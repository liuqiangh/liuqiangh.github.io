<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vscode使用editorconfig</title>
    <url>/2019/10/18/2019-10-18-vscode%E4%BD%BF%E7%94%A8editorconfig/</url>
    <content><![CDATA[<p> EditorConfig  是一个名称为.editorconfig的自定义文件。 文件中的设置用于在基本代码库中维持一致的编码风格和设置，例如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE 。 该文件用来定义项目的编码规范，编辑器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编辑器自身的设置要高，这在多人合作开发项目时十分有用而且必要 。 有些编辑器默认支持editorConfig，如webstorm；而有些编辑器则需要安装editorConfig插件，如ATOM、Sublime、VS Code等 。</p>
<h1 id="配置-editorconfig"><a href="#配置-editorconfig" class="headerlink" title="配置.editorconfig"></a>配置.editorconfig</h1><p>参考，本人vuex项目的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .editorconfig </span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure>

<h1 id="安装-EditorConfig扩展"><a href="#安装-EditorConfig扩展" class="headerlink" title="安装 EditorConfig扩展"></a>安装 EditorConfig扩展</h1><p> 在vscode里面安装EditorConfig 插件：</p>
<p><img src="https://i.loli.net/2019/10/18/wByVis1cjQWFHxd.png" alt=""></p>
<p> EditorConfig扩展的作用是读取第一步创建的editorconfig文件中定义的规则，并覆盖user/workspace settings中的对应配置 。</p>
<h1 id="全局安装或局部安装"><a href="#全局安装或局部安装" class="headerlink" title="全局安装或局部安装"></a>全局安装或局部安装</h1><p>editorconfig依赖包(npm install -g editorconfig | npm install -D editorconfig)<br>安装editorconfig依赖包主要是因为EditorConfig依赖于editorconfig包，不安装的可能会导致EditorConfig无法正常解析我们在第一步定义的editorconfig文件使用</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>打开需要格式化的文件并手动格式化代码（shift+alt+f）</p>
<p>（安装完毕一般自动就进行使用）</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>EditorConfig</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列笔记5</title>
    <url>/2019/10/16/2019-10-16-Vue%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B05/</url>
    <content><![CDATA[<blockquote>
<p>学习参考：coderwhy教学视频，整个系列可能会比较混乱，学到哪里觉得有需要的记录一下，可能和之前的java笔记类似。</p>
</blockquote>
<ol>
<li>Vuex是一个专为Vue.js专用程序开发的状态管理模式。其实，可以简单的将其看作把需要多个组件共享的变量全部存储到一个对象里面，然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。而且最重要的是，这个对象是响应式的；</li>
</ol>
<p><img src="https://i.loli.net/2019/10/16/s5lRSpZxtOwaGLy.png" alt=""></p>
<ol start="2">
<li>一般什么状态需要多个组件之间共享呢？例如用户的登录状态、用户名称、头像，例如商品的收藏、购物车中商品等；</li>
<li>简单使用</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        counter: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        increament(state) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.counter++</span><br><span class="line">          &#125;,</span><br><span class="line">          decreament(state) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.counter--</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// APP.js</span></span><br><span class="line">……</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addition() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.commit(<span class="string">'increament'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    subtraction() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.commit(<span class="string">'decreament'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>Vuex的store状态的更新唯一方式：提交mutation，mutation中回调函数的第一个参数就是state，传递的参数可以在state后边，被称作载荷(Payload)。</p>
<ol start="4">
<li>Vuex五大核心：state、mutations、actions、getters、modules：其中state就是存储管理变量、mutations类似methods，其中定义一些方法，对状态变量进行操作，但是只能是同步、actions针对异步操作、getters类似于computed，对状态变量进行一些计算或者筛选、modules主要是对state进行分流，随着要管理的变量增加，state会越来越臃肿，但是Vuex要求单一状态树(单一数据源)，所以就可以利用modules进行分模块，每个模块里又可以定义上述state、mutations等；</li>
<li>ES6新语法，对象的解构：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'gsynf'</span>,</span><br><span class="line">	age: <span class="number">18</span>,</span><br><span class="line">	height: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"><span class="comment">// const age = obj.age;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = obj</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Vue中发送网络请求有很多方式：<ul>
<li>传统的Ajax是基于XMLHttpRequest（XHR）；</li>
<li>比传统的Ajax更好用的jQuery-Ajax;</li>
<li>官方在Vue1.x时期，推出了Vue-resource；</li>
<li>在宣布Vue-resource不再维护时，推荐了axios；</li>
</ul>
</li>
<li>使用JSONP最主要的原因是为了解决跨域访问的问题；</li>
</ol>
<p><img src="https://i.loli.net/2019/10/17/hoG4mk1qQUCLbf6.png" alt=""></p>
<ol start="8">
<li>axios功能特点：</li>
</ol>
<ul>
<li>在浏览器中发送XMLHttpRequests请求；</li>
<li>在node.js中发送http请求；</li>
<li>支持Promise API；</li>
<li>拦截请求和响应；</li>
<li>转换请求和响应数据；</li>
</ul>
<ol start="9">
<li>axios最基本的使用：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 1.基本使用</span><br><span class="line">// axios(config)</span><br><span class="line">axios(&#123;</span><br><span class="line">  url: &apos;httpbin.org/&apos;</span><br><span class="line">  // 默认就是get</span><br><span class="line">  method: &apos;GET&apos;</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// axios.get(&apos;httpbin.org/&apos;).then(res =&gt; &#123;</span><br><span class="line">//   console.log(res);</span><br><span class="line">// &#125;)</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>发送并发请求可以使用axios.all([])，传入的参数和返回的结果都是一个数组。传入参数的数组内每个对象就是上述每个单一的axios请求。</li>
<li>axios常见配置选项：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求地址</span><br><span class="line">url: &apos;/user&apos;,</span><br><span class="line"></span><br><span class="line">请求类型</span><br><span class="line">method: &apos;get&apos;,</span><br><span class="line"></span><br><span class="line">请根路径</span><br><span class="line">baseURL: &apos;http://www.mt.com/api&apos;,</span><br><span class="line"></span><br><span class="line">请求前的数据处理</span><br><span class="line">transformRequest:[function(data)&#123;&#125;],</span><br><span class="line"></span><br><span class="line">请求后的数据处理</span><br><span class="line">transformResponse: [function(data)&#123;&#125;],</span><br><span class="line"></span><br><span class="line">自定义的请求头</span><br><span class="line">headers:&#123;&apos;x-Requested-With&apos;:&apos;XMLHttpRequest&apos;&#125;,</span><br><span class="line"></span><br><span class="line">URL查询对象</span><br><span class="line">params:&#123; id: 12 &#125;,</span><br><span class="line"></span><br><span class="line">查询对象序列化函数</span><br><span class="line">paramsSerializer: function(params)&#123; &#125;</span><br><span class="line"></span><br><span class="line">request body</span><br><span class="line">data: &#123; key: &apos;aa&apos;&#125;,</span><br><span class="line"></span><br><span class="line">超时设置s</span><br><span class="line">timeout: 1000,</span><br><span class="line"></span><br><span class="line">跨域是否带Token</span><br><span class="line">withCredentials: false,</span><br><span class="line"></span><br><span class="line">自定义请求处理</span><br><span class="line">adapter: function(resolve, reject, config)&#123;&#125;,</span><br><span class="line"></span><br><span class="line">身份验证信息</span><br><span class="line">auth: &#123; uname: &apos;&apos;, pwd: &apos;12&apos;&#125;,</span><br><span class="line"></span><br><span class="line">响应的数据格式 json / blob /document /arraybuffer / text / stream</span><br><span class="line">responseType: &apos;json&apos;,</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>意识：凡是对第三方框架，都不要在每一个组件内都加入依赖，这样一旦第三方框架停止维护，整个项目的维护将是一个巨大的工程，一般都要将对第三方框架进行一个封装。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// network/request.js</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">    // 1. 创建axios实例</span><br><span class="line">    const instance = axios.create(&#123;</span><br><span class="line">        baseURL: &apos;http://123.207.32.32:8000/api/v1&apos;,</span><br><span class="line">        timeout: 5000</span><br><span class="line">    &#125;)</span><br><span class="line">    // 2.发送真正的网络请求</span><br><span class="line">    return instance(config)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// main.js</span><br><span class="line">request(&#123;</span><br><span class="line">  url: &apos;/home/multidata&apos;,</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">  </span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>axios提供了拦截器，用于在发送每次请求或者得到响应后，进行对应的处理；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//1 请求拦截</span><br><span class="line">instance.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">    console.log(config);</span><br><span class="line">    // 1.比如config中的一些信息不符合服务器的要求</span><br><span class="line">    // 2.比如每次发送网络请求时，在界面显示一个请求图标</span><br><span class="line">    // 3.某些网络请求，例如登录（token），必须携带一些特殊的信息</span><br><span class="line">    return config</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    console.log(err);   </span><br><span class="line">&#125;);</span><br><span class="line">// 2 响应拦截</span><br><span class="line">instance.interceptors.response.use(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">    return res.data</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm audit fix</title>
    <url>/2019/10/16/2019-10-16-%E5%85%B3%E4%BA%8Enpm%20audit%20fix/</url>
    <content><![CDATA[<p> 其实之前也遇到过，一直没注意，今天安装vuex，<code>npm install vuex --save</code>出现如下提醒 </p>
<p><img src="https://i.loli.net/2019/10/16/SJFRPQtyCkHgx4D.png" alt=""></p>
<p> 执行 <code>npm audit fix</code>  </p>
<p><img src="https://i.loli.net/2019/10/16/YkSTBdZgepCRDIW.png" alt=""></p>
<p>出于好奇，从npm官网上查阅了对于<strong>npm audit fix</strong>的相关介绍。 npm@6 的一大更新是新增了 <code>npm audit</code> 命令 ,  <code>npm aduit</code> 主要动作就是在 <code>npm install</code> 完成之后把需要检查的包的信息发送给一个官方接口, 再根据返回信息生成一个包含包名称、漏洞严重性、简介, 路径等的报告。 该命令会在项目中更新或者下载新的依赖包之后会自动运行，如果你在项目中使用了具有已知安全问题的依赖，就收到官方的警告通知。 </p>
<p> ps. 一般不要直接运行 <code>--force</code> ，对于没能自动修复的问题，说明肯定出现了 <code>SEMVER WARNING</code> 之类的警告，这意味着推荐的修复版本存在让代码出问题的可能，主要发生在依赖包更改了 API 或者升级了大版本的情况下（semantic version major change）。这时候就需要格外的小心甚至需要改动一些自己的代码了。 </p>
<p>其他一些具体命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 扫描项目漏洞把不安全的依赖项自动更新到兼容性版本</span><br><span class="line">npm audit fix</span><br><span class="line"></span><br><span class="line"># 在不修改 node_modules 的情况下执行 audit fix，仍然会更改 pkglock</span><br><span class="line">npm audit fix --package-lock-only</span><br><span class="line"></span><br><span class="line"># 跳过更新 devDependencies</span><br><span class="line">npm audit fix --only=prod</span><br><span class="line"></span><br><span class="line"># 强制执行 audit fix 安装最新的依赖项（toplevel）</span><br><span class="line">npm audit fix --force</span><br><span class="line"></span><br><span class="line"># 单纯的获取 audit fix 会做的事，并以 json 格式输出。</span><br><span class="line">npm audit fix --dry-run --json</span><br><span class="line"></span><br><span class="line"># 获取详情</span><br><span class="line">npm audit</span><br><span class="line"></span><br><span class="line"># 以 JSON 格式打印报告</span><br><span class="line">npm audit --json</span><br></pre></td></tr></table></figure>

<p>至于如何关闭安全检查，可以采用以下方式：</p>
<ul>
<li>安装单个包关闭安全审查: <code>npm install example-package-name --no-audit</code></li>
<li>安装所有包关闭安全审查 - 运行 <code>npm set audit false</code> - 手动将 <code>~/.npmrc</code> 配置文件中的 <code>audit</code> 修改为 <code>false</code></li>
</ul>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列笔记4</title>
    <url>/2019/10/14/2019-10-14-Vue%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<blockquote>
<p>学习参考：coderwhy教学视频，整个系列可能会比较混乱，学到哪里觉得有需要的记录一下，可能和之前的java笔记类似。</p>
</blockquote>
<ol>
<li>前端渲染和后端渲染/前端路由和后端路由：</li>
</ol>
<ul>
<li>早期，服务器收到URL通过正则进行匹配，交给Controller进行处理，利用JSP等技术，直接生产渲染好对应的HTML页面，不仅有html、css，还有获取数据的java代码，返回给客户端进行展示，这就是后端渲染，在后端处理URL和页面之间的映射关系，即后端路由；</li>
<li>随着Ajax出现，有了前后端分离的开发模式，客户端通过URL发起请求，去静态资源服务器请求资源，请求回的资源包括html+css+js，前两者浏览器进行渲染，js浏览器执行，执行到API接口时，再去请求提供API接口的服务器，请求回之后由其他js代码进行处理，这就是前端渲染；</li>
<li>再发展就是单页面富应用阶段，最主要的特点就是在前后端分离的基础上加了一层前端路由，整个网站只有一个html页面，浏览器向静态资源网站请求时将所有资源全部请求下来，前端路由监听浏览器，当URL改变，就将请求的全部资源进行抽离但不进行页面整体刷新也就是不再进行新的请求，显示该显示的部分，也就是一个网页，这种一个URL和一个网页的映射就是前端路由；</li>
</ul>
<ol start="2">
<li>如何改变URL而页面不刷新呢？有两种方法，一种为利用URL的hash，另一种为html5的history模式。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//Console</span><br><span class="line">&gt;location.hash = &apos;foo&apos;</span><br><span class="line">&gt;history.pushState(&#123;&#125;,&apos;&apos;,&apos;foo&apos;) //这个push有点类似于入栈，history.back()或者history.go(-1)或者history.forward()或者浏览器返回类似于出栈</span><br><span class="line">&gt;history.replaceState(&#123;&#125;,&apos;&apos;,&apos;foo&apos;)//很明显，相比于上，这个直接是代替，不会留下history记录</span><br></pre></td></tr></table></figure>

<p>Vue默认使用hash，但是会发现hash的URL会有#，看起来不是很舒服，可以改为history模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    // redirect 重定向</span><br><span class="line">    redirect: &apos;/home&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/home&apos;,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/about&apos;,</span><br><span class="line">    component: About</span><br><span class="line">  &#125;,    </span><br><span class="line">],</span><br><span class="line">mode: &apos;history&apos;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>&lt;router-link&gt;该标签是vue-router中已经内置的一个标签，会被渲染成&lt;a&gt;标签，&lt;router-view&gt;该标签根据当前的路径，动态渲染不同组件，当路由切换，切换的是&lt;router-view&gt;挂载的组件，其他内容不会发送改变。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>&lt;router-link&gt;除了to属性，还有其他属性，例如tag属性，可以决定它会被渲染成除a意外的其他什么组件；replace属性，不会留下history记录，后退返回键不能用，也就是将默认的pushState改为了replaceState；active-class属性，当对应路由匹配成功，某组件会处于活跃状态，会自动给该元素设置一个router-link-active的class，active-class可以改这个class名字，但一般不做修改；</p>
<ol start="4">
<li><p>项目打包后会在dist文件夹下看到static/index.html，其中，static文件夹下有css/js，css文件夹下是将各个vue的css代码进行整合，js文件夹下有三个js文件，分别为app.js/manifest.js/vendor.js，分别是当前应用开发的所有业务代码、为了打包代码做的底层支撑代码、第三方（供应商）代码，如vue/axios/bs等；</p>
</li>
<li><p>随着业务逻辑的增多，会使得打包的app.js越来越大，这样用户请求加载时间变长，所以需要用到懒加载，一般一个vue打包成一个js，用到时才加载</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//router/index.js</span><br><span class="line"></span><br><span class="line">// import Home from &apos;../components/Home.vue&apos;</span><br><span class="line">// import About from &apos;../components/About.vue&apos;</span><br><span class="line">// import User from &apos;../components/User.vue&apos;</span><br><span class="line"></span><br><span class="line">// 懒加载</span><br><span class="line">const Home = () =&gt; import(&apos;../components/Home.vue&apos;)</span><br><span class="line">const About = () =&gt; import(&apos;../components/About.vue&apos;)</span><br><span class="line">const User = () =&gt; import(&apos;../components/User.vue&apos;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>路由传递参数：params类型和query类型</li>
</ol>
<ul>
<li>前者就是动态路由的方法 <ul>
<li>配置路由格式：/router/:id</li>
<li>传递的方式：在path后面跟上对应的值</li>
<li>传递后形成的路径：/router/123，/user/gsynf</li>
</ul>
</li>
<li>后者就是query<ul>
<li>配置路由格式：/router</li>
<li>传递的方式：对象中使用query的key作为传递方式</li>
<li>传递后形成的路径：/router?id=123，/user?id=gsynf</li>
</ul>
</li>
</ul>
<ol start="7">
<li>keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或避免搭环境：它有两个非常重要的属性：<ul>
<li>include-字符串或正则表达式，只有匹配的组件会被缓存</li>
<li>exclude-字符串或正则表达式，任何匹配的组件都不会被缓存</li>
</ul>
</li>
</ol>
<ul>
<li>router-view也是一个组件，如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存；</li>
</ul>
<ol start="8">
<li>Promise是ES6的新特性，是异步编程的一种解决方案。</li>
<li>什么情况下会用到Promise？一般情况下是有异步操作尤其是比较复杂的数据请求时，使用Promise对这个异步操作进行封装。执行过程，在new Promise时，会执行构造函数，一方面保存了一些状态信息，另一方面会执行传入的函数，在执行传入的回调函数时，会传入两个参数，resolve和reject，这两个参数本身又是函数，一旦调用resolve，就跳到then()，一旦调用reject，就跳到catch()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout((date) =&gt; &#123;</span><br><span class="line">        //请求中，等待状态，pending</span><br><span class="line">        </span><br><span class="line">        // 请求成功，满足状态，fulfill，调用resolve</span><br><span class="line">        resolve(data)</span><br><span class="line">        // 请求失败，拒绝状态，reject，调用reject</span><br><span class="line">        reject(&apos;error message&apos;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    // 此处处理请求的data</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    // 此处处理error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/15/YVRXhBEdS3MnfHI.png" alt=""></p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列笔记3</title>
    <url>/2019/10/10/2019-10-10-Vue%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<blockquote>
<p>学习参考：coderwhy教学视频，整个系列可能会比较混乱，学到哪里觉得有需要的记录一下，可能和之前的java笔记类似。</p>
</blockquote>
<ol>
<li>同一个项目中可能有多个js，这样就存在全局变量重名的问题，虽然通过函数闭包可以解决，但是又导致了不同js之间代码不可复用，所以就有了模块化的概念；</li>
<li>常用的模块化规范：CommonJS、AMD、CMD、ES6的Modules;</li>
<li>CommonJS导出写法：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//aaa.js</span><br><span class="line">modules.exports = &#123;</span><br><span class="line">	//要导出的部分</span><br><span class="line">	flag,</span><br><span class="line">	sum,</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CommonJS导入写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var/let &#123;flag,sum&#125; = require(&apos;./aaa.js&apos;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>ES6的modules：首先在html代码中要引入js文件，并且类型设置为module，然后在要导出的js文件中使用export指令导出模块对外提供的接口，在要引入的js文件中通过import命令来加载。</li>
<li>遇到本地Ajax跨域报错Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.原因在于使用了File协议，应该使用它提示的http, data, chrome, chrome-extension, https这些协议。使用webstorm或是visual studio这种重量级的IDE，应该不会遇到这种问题，这类IDE都内置了HTTP服务器。针对VSCode，可以安装<strong>Live Server</strong>插件，这个插件功能十分强大，不止可以解决ajax不支持file协议的问题，还可以实现在编辑器里保存修改后，页面自动刷新的功能。</li>
<li>什么是webpack，从本质上讲，webpack是一个现代的JavaScript应用的静态模块打包工具，分两点来讲，就是模块和打包。webpack其中一个核心就是让我们可以进行模块化开发，并且帮助我们处理模块间的依赖关系；打包就是将webpack中的各种资源模块进行打包合并成一个或多个包，并且在打包过程中，还可以对资源进行处理，例如压缩图片，ES5转成ES6等；</li>
</ol>
<p><img src="https://i.loli.net/2019/10/11/I7D6mBGlnfUhOxj.png" alt=""></p>
<ol start="7">
<li><p>grunt/gulp的核心是Task，更加强调的是前端流程的自动化，模块化不是它的核心；webpack更加强调模块化的开发管理，而grunt/gulp的文件压缩合并、预处理、转换等功能只是它附带的功能；</p>
</li>
<li><p>webpack为了正常运行，必须依赖node环境，node环境为了可以正常执行很多代码，其中必须包含各种依赖的包，为了便于安装管理这些包，需要npm（node package manager）工具。</p>
</li>
<li><p>全局安装webpack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.6.0 -g</span><br></pre></td></tr></table></figure>

<p>但是一般情况下，每个项目都要局部安装自己所对应需要的webpack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.6.0 --save-dev</span><br><span class="line">//--save-dev安装的是开发时依赖，而不是运行时依赖，这个安装完成后在package.json可以看出来</span><br><span class="line">//–save 将依赖包名称添加到 package.json 文件的 dependencies 键下</span><br><span class="line">//–save-dev 则添加到 package.json 文件的 devDependencies 键下</span><br></pre></td></tr></table></figure>

<p>然后需要在npm init创建的package.json中加入，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack&quot;</span><br></pre></td></tr></table></figure>

<p>这样，在终端输入npm run dev即可，而且优先使用本地webpack而非全局。</p>
</li>
<li><p>loader是webpack中一个非常核心的概念，webpack可以处理JS代码和相互之间的依赖，但在开发中，不仅仅有基础的JS代码，还有CSS、图片加载、将高级的ES6转化为ES5等，此时就需要给webpack扩展对应的loader：</p>
</li>
</ol>
<ul>
<li>通过npm安装所需要的loader</li>
<li>在webpack.config.js中的modules关键字中进行配置</li>
<li>具体安装什么loader可以在webpack官方文档进行查询</li>
</ul>
<ol start="11">
<li><p>plugin时webpack中另一个重要的核心，webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等，loader主要用于转换某些类型的模块，它是一个转换器，plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p>
</li>
<li><p>webpack配置文件的分离，再weback.config.js中，许多配置只是在开发中用到，在实际发布时并不需要，所以最好将这些配置抽离出来，便于后期管理：</p>
</li>
</ol>
<ul>
<li>创建base.config,js/dev.config.js/prod.config.js，将weback.config.js中内容进行分离，npm install webpack-merge –save-dev安装js合并工具，接下来</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//dev.config.js</span><br><span class="line">const WebpackMerge = require(&apos;webpack-merge&apos;)</span><br><span class="line">const baseConfig = require(&apos;./base.config&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = WebpackMerge(baseConfig,&#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase: &apos;./dist&apos;,</span><br><span class="line">      inline: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在package.json中指定一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack --config ./build/prod.config.js&quot;,</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ol start="13">
<li><p>使用vue开发大型项目，需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等，为了提高效率，通常会用到一些脚手架工具来帮助完成，CLI是Command-Line Interface，翻译为命令行界面，俗称脚手架。使用vue-cli可以快速搭建Vue开发环境以及对应的webpack配置。</p>
</li>
<li><p>e2e–&gt;e to e –&gt;end to end</p>
</li>
<li><p>Vue CLI2新建项目</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/12/eTxIybH9tGXiCz4.png" alt=""></p>
<ol start="16">
<li><p>脚手架安装了ESlint如何关闭：config==&gt;index==&gt;useEslint改为false，重新编译一下项目;</p>
</li>
<li><p>Vue程序运行过程</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/10/12/diyYvSRof14FgCI.png" alt=""></p>
<ol start="18">
<li><ul>
<li><p>runtime-compiler—&gt;代码中可以有template</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// template -&gt; ast -&gt; render -&gt; vdom -&gt; UI</span><br><span class="line">//main.js</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<pre><code>* runtime-only---&gt;代码中不可以有任何的template，性能更好，代码量更少，少6KB。

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// render -&gt; vdom -&gt; UI</span><br><span class="line">//main.js</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

​    </code></pre><ol start="19">
<li>npm run build/dev具体执行示意</li>
</ol>
<p><img src="https://i.loli.net/2019/10/13/qBbNAZ9kwSX5oml.png" alt=""></p>
<p><img src="C:%5CUsers%5Cgsynf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570934287208.png" alt="1570934287208"></p>
<ol start="20">
<li>Vue CLI3 创建项目</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create my-vue-project</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/13/5MzCDKqNBlLSZiG.png" alt=""></p>
<ol start="21">
<li><p>Vue CLI3管理配置文件及其他可以通过vue ui命令启动GUI界面进行可视化管理；</p>
<p>Vue CLI3的配置文件其实并不是没有，而是“隐藏”起来了，在node_modules-&gt;@vue-&gt;cli-service;</p>
<p>若要修改，可在工程目录下创建vue.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会自动将手动的配置和默认的配置进行合并。</p>
</li>
<li><p>前端渲染和后端渲染/前端路由和后端路由：</p>
</li>
</ol>
<ul>
<li>早期，服务器收到URL通过正则进行匹配，交给Controller进行处理，利用JSP等技术，直接生产渲染好对应的HTML页面，不仅有html、css，还有获取数据的java代码，返回给客户端进行展示，这就是后端渲染，在后端处理URL和页面之间的映射关系，即后端路由；</li>
<li>随着Ajax出现，有了前后端分离的开发模式，客户端通过URL发起请求，去静态资源服务器请求资源，请求回的资源包括html+css+js，前两者浏览器进行渲染，js浏览器执行，执行到API接口时，再去请求提供API接口的服务器，请求回之后由其他js代码进行处理，这就是前端渲染；</li>
<li>再发展就是单页面富应用阶段，最主要的特点就是在前后端分离的基础上加了一层前端路由，整个网站只有一个html页面，浏览器向静态资源网站请求时将所有资源全部请求下来，前端路由监听浏览器，当URL改变，就将请求的全部资源进行抽离但不进行页面整体刷新也就是不再进行新的请求，显示该显示的部分，也就是一个网页，这种一个URL和一个网页的映射就是前端路由；</li>
</ul>
<ol start="23">
<li>如何改变URL而页面不刷新呢？有两种方法，一种为利用URL的hash，另一种为html5的history模式。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//Console</span><br><span class="line">&gt;location.hash = &apos;foo&apos;</span><br><span class="line">&gt;history.pushState(&#123;&#125;,&apos;&apos;,&apos;foo&apos;) //这个push有点类似于入栈，history.back()或者history.go(-1)或者history.forward()或者浏览器返回类似于出栈</span><br><span class="line">&gt;history.replaceState(&#123;&#125;,&apos;&apos;,&apos;foo&apos;)//很明显，相比于上，这个直接是代替</span><br></pre></td></tr></table></figure>























































































<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列笔记2</title>
    <url>/2019/10/08/2019-10-08-Vue%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<blockquote>
<p>学习参考：coderwhy教学视频，整个系列可能会比较混乱，学到哪里觉得有需要的记录一下，可能和之前的java笔记类似。</p>
</blockquote>
<ol>
<li>如果将一个页面中所有的处理逻辑全部放到一起，处理起来就会变得非常复杂，而且不利于后续管理和扩展；但如果将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，之后整个页面的管理和维护就变得容易许多；</li>
</ol>
<p><img src="https://i.loli.net/2019/10/08/8rs7zERUAZK4eMk.png" alt=""></p>
<ol start="2">
<li>组件化提供了一种抽象，可以开发出一个个独立可复用的小组件来构造应用，任何的应用都会被抽象成一颗组件树；</li>
</ol>
<p><img src="https://i.loli.net/2019/10/08/YZB3fdb4Mcr79Jl.png" alt=""></p>
<ol start="3">
<li>组件的使用可以分成三个步骤：创建组件构造器，注册组件，使用组件；</li>
</ol>
<p><img src="C:%5CUsers%5Cgsynf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570496438265.png" alt="1570496438265"></p>
<ol start="4">
<li><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!-- 3.使用组件 --&gt;
        &lt;my-cpn&gt;&lt;/my-cpn&gt;
        &lt;my-cpn&gt;&lt;/my-cpn&gt;
        &lt;my-cpn&gt;&lt;/my-cpn&gt;
    &lt;/div&gt;
    &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        //1.创建组件构造器对象
        const cpnContructor = Vue.extend({
           template: `
                &lt;div&gt;
                    &lt;h2&gt;我是标题&lt;/h2&gt;
                    &lt;p&gt;我是内容，哈哈哈哈&lt;/p&gt;
                    &lt;p&gt;我是内容，呵呵呵呵&lt;/p&gt;
                &lt;/div&gt;`
        })
        //2.注册组件
        Vue.component(&apos;my-cpn&apos;, cpnContructor)

        const app = new Vue({
            el: &apos;#app&apos;,
            data: {
                message: &apos;Hello!&apos;,
            },

        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   Vue.extend()创建的是一个组件构造器，通常在创建组件构造器时，传入template代表我们自定义组件的模板。该模板就是在使用到组件的地方，要显示的HTML代码，事实上，这种写法在Vue 2.x的文档中就几乎看不到了，它会直接使用下面的语法糖，但这种方式是基础。</span><br><span class="line"></span><br><span class="line">   Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</span><br><span class="line"></span><br><span class="line">   组件使用时必须挂载在某个Vue实例下，否则它不会生效。</span><br><span class="line"></span><br><span class="line">5. 全局组件和局部组件:上述方法构建的为全局组件。局部组件需要挂载到Vue实例下，只有该实例对应的app才可以使用。</span><br></pre></td></tr></table></figure>
 const app = new Vue({
            el: &apos;#app&apos;,
            //2.局部组件注册
            components: {
                cpn: cpnC
            }
        })
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 父组件和子组件：要求子组件在父组件中进行注册：</span><br></pre></td></tr></table></figure>
//1.创建第一个组件构造器(子组件)
     const cpnC1 = Vue.extend({
         template:`
             &lt;div&gt;
                 &lt;h2&gt;我是标题1&lt;/h2&gt;
                 &lt;p&gt;我是内容，哈哈哈哈&lt;/p&gt;
             &lt;/div&gt;`
     })

     //2.创建第二个组件构造器(父组件)
     const cpnC2 = Vue.extend({
         template:`
             &lt;div&gt;
                 &lt;h2&gt;我是标题2&lt;/h2&gt;
                 &lt;p&gt;我是内容，呵呵呵呵&lt;/p&gt;
                 &lt;cpn1&gt;&lt;/cpn1&gt;
             &lt;/div&gt;`
         ,
         components: {
             cpn1: cpnC1
         }
     })
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7. 组件注册的语法糖，将上述创建组件构造器和注册组件合并：</span><br></pre></td></tr></table></figure>
     Vue.component(&apos;cpn1&apos;, {
         template: `
             &lt;div&gt;
                 &lt;h2&gt;我是标题1&lt;/h2&gt;
                 &lt;p&gt;我是内容，哈哈哈哈&lt;/p&gt;
             &lt;/div&gt;`
     })
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">8. 组件模板的抽离写法，可以看出来，上边的js代码中嵌套HTML，看起来比较乱，所以需要抽离，有两种写法：</span><br></pre></td></tr></table></figure>
&lt;body&gt;
 &lt;div id=&quot;app&quot;&gt;
     &lt;cpn1&gt;&lt;/cpn1&gt;
     &lt;cpn2&gt;&lt;/cpn2&gt;
 &lt;/div&gt;
 &lt;!-- 1.通过script标签，但是注意类型必须是text/x-template --&gt;
 &lt;script type=&quot;text/x-template&quot; id=&quot;cpn1&quot;&gt;
 &lt;div&gt;
     &lt;h2&gt;我是标题1&lt;/h2&gt;
     &lt;p&gt;我是内容，哈哈哈哈&lt;/p&gt;
 &lt;/div&gt;
 &lt;/script&gt;

&lt;!-- 2.template标签 --&gt;
&lt;template id=&quot;cpn2&quot;&gt;
     &lt;div&gt;
         &lt;h2&gt;我是标题2&lt;/h2&gt;
         &lt;p&gt;我是内容，呵呵呵呵&lt;/p&gt;
     &lt;/div&gt;
&lt;/template&gt;

 &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;
 &lt;script&gt;
     Vue.component(&apos;cpn1&apos;, {
         template: &apos;#cpn1&apos;,
     })
     Vue.component(&apos;cpn2&apos;, {
         template: &apos;#cpn2&apos;,
     })
     const app = new Vue({
         el: &apos;#app&apos;,
     })
 &lt;/script&gt;
&lt;/body&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. 组件中的数据不应该也不能放在全局的data中，应该放在自己的data中，但是需要注意组件的data属性必须是一个函数，且要求返回一个实例对象，对象内部保存着数据。</span><br><span class="line"></span><br><span class="line">10. 在开发中，往往一些数据确实需要从上层传到下层，例如在一个页面中，从服务器请求了许多数据，其中一部分数据并非整个页面的大组件来展示，而是需要下面的小组件来展示，这时，并不会让小组件再发一次网络请求，而是让大组件将数据传给小组件，这是就涉及到父子组件之间的通信，有两种方式：通过props向子组件传递数据和通过事件向父组件发送消息。</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/10/08/7NDfCeuZXOgqELG.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11. 在组件中，使用选项props来声明需要从父级接受的数据。</span><br><span class="line"></span><br><span class="line">props的值有两种方式：</span><br><span class="line"></span><br><span class="line">1）字符串数组，数组中的字符串就是传递时的名称；</span><br><span class="line"></span><br><span class="line">2）对象，对象可以设置传递时的类型，也可以设置默认值等；</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/10/08/kbKwUJmEgjFx9HI.png)</span><br><span class="line"></span><br><span class="line">12. 子组件向父组件发送数据：子组件内部先通过&amp;emit()定义发射事件，父组件中监听（类似于系统自带的click等监听），监听到后执行相应的响应函数即可。</span><br></pre></td></tr></table></figure>
//子组件
         methods: {
             btnClick(item) {
                 //发射事件(自定义事件)
                 this.$emit(&apos;item-click&apos;, item)
             }
         }
//监听
 &lt;div id=&quot;app&quot;&gt;
     &lt;!-- 监听事件 --&gt;
     &lt;cpn @item-click=&quot;cpnClick&quot;&gt;&lt;/cpn&gt;
 &lt;/div&gt;
//父组件
         methods: {
             cpnClick(item) {
                 console.log(item);                 
             }
         }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">13. 父子组件的访问：父组件访问子组件使用$children或者$refs；子组件访问父组件使用$parent；子组件访问根组件使用$root</span><br><span class="line"></span><br><span class="line">14. 在实际开发中，refs用的比较多一些，因为使用children需要使用下标，但是组件顺序可能会有更改，不利于维护</span><br></pre></td></tr></table></figure>
 &lt;div id=&quot;app&quot;&gt;
     &lt;button @click=&quot;btnClick&quot;&gt;按钮&lt;/button&gt;
     &lt;cpn&gt;&lt;/cpn&gt;
     &lt;cpn&gt;&lt;/cpn&gt;
     &lt;cpn ref=&quot;aaa&quot;&gt;&lt;/cpn&gt;
 &lt;/div&gt;
 ………………
             methods: {
             btnClick() {
                 // 1.$children
                 // console.log(this.$children);
                 // this.$children[0].showMessage();
                 // console.log(this.$children[1].name);

                 //2.$refs
                 this.$refs.aaa.showMessage();
                 console.log(this.$refs.aaa.name);  
             }
  ………………
           components: {
             cpn: {
                 template: &apos;#cpn&apos;,
                 data() {
                     return {
                         name: &apos;我是子组件的name&apos;
                     }
                 },
                 methods: {
                     showMessage() {
                         console.log(&apos;aaaaaaaa&apos;);

                     }
                 }
             }
         }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">15. $parent在实际开发中应用不多，因为组件强调的是复用性，在组件中使用$parent可能会导致其和父组件的耦合度太高。</span><br><span class="line"></span><br><span class="line">16. 组件的插槽slot是为了让组件有更强的扩展性，往往需要的一些组件之间有很多区别，但也有很多共性，每个都封装成一个单独的不太合理，将所有的都封装成一个也不合理，这里就需要用到slot，slot就是占位，具体占好位置放什么可以由调用者决定；</span><br></pre></td></tr></table></figure>
 &lt;div id=&quot;app&quot;&gt;
     &lt;cpn&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;/cpn&gt;
     &lt;cpn&gt;&lt;span&gt;哈哈哈&lt;/span&gt;&lt;/cpn&gt;
     &lt;cpn&gt;
         &lt;p&gt;哦哦哦&lt;/p&gt;
         &lt;i&gt;呵呵呵&lt;/i&gt;
     &lt;/cpn&gt;
 &lt;/div&gt;

 &lt;template id=&quot;cpn&quot;&gt;
     &lt;div&gt;
         &lt;h2&gt;我是组件&lt;/h2&gt;
         &lt;p&gt;我是组件，嘿嘿嘿&lt;/p&gt;
         &lt;slot&gt;&lt;/slot&gt;
     &lt;/div&gt;
 &lt;/template&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">17. 作用域插槽：举例：子组件中包含一组数据，pLanguages: [&apos;JavaScript&apos;,&apos;Python&apos;,&apos;Java&apos;,&apos;C++&apos;]，要求进行不同的展示效果，例如以列表形式展示，以水平方向展示等等</span><br></pre></td></tr></table></figure>
 &lt;div id=&quot;app&quot;&gt;
     &lt;!-- 默认以列表进行展示 --&gt;
     &lt;cpn&gt;&lt;/cpn&gt;
     &lt;!-- 以水平方式进行展示 --&gt;
     &lt;cpn&gt;
         &lt;!-- 目的是获取子组件的pLanguages --&gt;
         &lt;template slot-scope=&quot;slot&quot;&gt;
             &lt;!-- &lt;span v-for=&quot;item in slot.data&quot;&gt;{{item}} ** &lt;/span&gt; --&gt;
             &lt;span&gt;{{slot.data.join(' * ')}}&lt;/span&gt;
         &lt;/template&gt;
     &lt;/cpn&gt;

 &lt;/div&gt;

 &lt;template id=&quot;cpn&quot;&gt;
     &lt;div&gt;
         &lt;slot :data=&quot;pLanguages&quot;&gt;
             &lt;ul&gt;
                 &lt;li v-for=&quot;item in pLanguages&quot;&gt;{{item}}&lt;/li&gt;
             &lt;/ul&gt;
         &lt;/slot&gt;
     &lt;/div&gt;
 &lt;/template&gt;</code></pre></li>
</ol>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列笔记1</title>
    <url>/2019/09/26/2019-09-26-Vue%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<blockquote>
<p>学习参考：coderwhy教学视频，整个系列可能会比较混乱，学到哪里觉得有需要的记录一下，可能和之前的java笔记类似。</p>
</blockquote>
<ol>
<li>语法糖：简写</li>
</ol>
<p><img src="https://i.loli.net/2019/09/27/DnTr2avz4EOPiAC.png" alt=""></p>
<ol start="2">
<li>MVVM：model，view，viewmodel;</li>
<li>回调函数举例：</li>
</ol>
<p><img src="https://i.loli.net/2019/09/27/b6P58HUcry7tIVR.png" alt=""></p>
<ol start="4">
<li>Vue生命周期</li>
</ol>
<img src="https://i.loli.net/2019/09/27/e7agZw2QWuEcdFn.png" alt="官方图" style="zoom: 50%;" />

<p><img src="https://i.loli.net/2019/09/27/OZzk7YPsFjd16Tb.png" alt="coderwhy的图"></p>
<ol start="5">
<li><p>代码规范：在前端代码中，一般缩进2个空格而非4个；</p>
</li>
<li><p>将data中的数据插入到HTML中，Mustache语法，也就是双大括号；</p>
</li>
<li><p>computed和methods对比：往往会发现，在computed中定义的方法在methods中同样可以定义，那么computed意义何在呢?其实计算属性会进行缓存，如果多次使用，计算属性只会调用一次，而methods每次都会调用；</p>
</li>
<li><p>ES5中，var没有块级作用域，if和for没有作用域，只有函数有作用域；ES6中let有块级作用域，if和for也有作用域；</p>
</li>
<li><p>在ES6开发中，优先使用const，只有在需要改变某一标识符的时候才用let；</p>
</li>
<li><p>什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 。</p>
</li>
<li><p>v-if：当条件为false，包含v-if指令的元素，根本就不会存在于dom中，所以推荐在切换频率不高时使用；</p>
<p>v-show：当条件为false，包含v-show指令的元素，只是增加了一个行内元素，display = none，所以推荐在切换频率较高时使用；</p>
</li>
<li><p>官方推荐在使用v-for时，给对应的元素或组件添加一个key属性。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in letters&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>过滤器filters，举例将价格由整数变为带￥的两位小数：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">    showPrice(price) &#123;</span><br><span class="line">        return &apos;￥&apos; + price.toFixed(2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总价格：&#123;&#123;totalPrice | showPrice&#125;&#125;</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p>编程范式：命令式编程/声明式编程</p>
<p>编程范式：面向对象编程（第一公民：对象）/函数式编程（第一公民：函数）</p>
</li>
<li><p>三个高阶函数：filter、map、reduce</p>
</li>
</ol>
<p>1)）filter过滤函数用于过滤数组中的某部分，传的参数需是一个回调函数，回调函数有一个要求：必须返回一个boolean值，当返回true时，函数内部会自动将这次回调的n加入到新的数组中，当返回false时，函数内部会过滤掉这次的n。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//过滤小于100的数字</span><br><span class="line">const nums = [10,234,50,678,90]</span><br><span class="line">let newNums = nums.filter(function (n) &#123;</span><br><span class="line">	return n &lt; 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2）map映射函数用于对数组中所有元素进行统一操作，传的参数同样是一个回调函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//将newNums中的数字全部乘以2</span><br><span class="line">let new2Nums = newNums.map(function(n) &#123;</span><br><span class="line">	return n*2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3）reduce函数用于对数组中所有的内容进行汇总，传的参数至少需要两个，第一个参数同样是一个回调函</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//将new2Nums中的数字全部相加</span><br><span class="line">//0就是perValue初始化的值，以后的preValue就是上一次return的值</span><br><span class="line">let total = new2Nums.reduce(function(preValue,n) &#123;</span><br><span class="line">	return preValue + n</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure>

<p>以上三部分可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const nums = [10,234,50,678,90]</span><br><span class="line">let total = nums.filter(function (n) &#123;</span><br><span class="line">	return n &lt; 100</span><br><span class="line">&#125;).map(function(n) &#123;</span><br><span class="line">	return n*2</span><br><span class="line">&#125;).reduce(function(preValue,n) &#123;</span><br><span class="line">	return preValue + n</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure>

<p>甚至可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const nums = [10,234,50,678,90]</span><br><span class="line">let total = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n*2).reduce((preValue,n) =&gt; preValue + n)</span><br></pre></td></tr></table></figure>



<ol start="14">
<li>vue中使用v-model指令来实现表单元素和数据的双向绑定。所谓双向绑定，就是原来利用 Mustache将内容进行响应式显示，手动更改显示数据无法改变原数据，双向绑定则可以实现。</li>
<li>radio的name相同才会互斥，但是如果v-model绑定相同的，可以不加name。</li>
<li>v-model三个修饰符：lazy、number、trim：</li>
</ol>
<p>1）lazy：默认情况下，v-model是在input事件中同步输入框的数据也就是一旦数据发生改变data中的数据就会自动发生改变，加入lazy修饰符可以让数据在失去焦点或者回车时才更新；</p>
<p>2）number：默认情况下，在输入框无论输入字母还是数字，都会被当作字符串进行处理，number修饰符可以让输入框输入的内容自动转换为数字类型；</p>
<p>3）trim：如果输入的内容首尾有很多空格，通常我们希望将其去除，trim修饰符可以过滤内容左右两边的空格；</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb5</title>
    <url>/2019/09/24/2019-09-24-JavaWeb5/</url>
    <content><![CDATA[<h1 id="创建DrawImage-Servlet"><a href="#创建DrawImage-Servlet" class="headerlink" title="创建DrawImage Servlet"></a>创建DrawImage Servlet</h1><h1 id="一、创建DrawImage-Servlet"><a href="#一、创建DrawImage-Servlet" class="headerlink" title="一、创建DrawImage Servlet"></a>一、创建DrawImage Servlet</h1><p>用来生成验证码图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1 package gacl.response.study;</span><br><span class="line">  2 import java.awt.Color;</span><br><span class="line">  3 import java.awt.Font;</span><br><span class="line">  4 import java.awt.Graphics;</span><br><span class="line">  5 import java.awt.Graphics2D;</span><br><span class="line">  6 import java.awt.image.BufferedImage;</span><br><span class="line">  7 import java.io.IOException;</span><br><span class="line">  8 import java.util.Random;</span><br><span class="line">  9 import javax.imageio.ImageIO;</span><br><span class="line"> 10 import javax.servlet.ServletException;</span><br><span class="line"> 11 import javax.servlet.http.HttpServlet;</span><br><span class="line"> 12 import javax.servlet.http.HttpServletRequest;</span><br><span class="line"> 13 import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> 14 /**</span><br><span class="line"> 15  * 生成随机图片，用来作为验证码</span><br><span class="line"> 16  */</span><br><span class="line"> 17 public class DrawImage extends HttpServlet &#123;</span><br><span class="line"> 18     private static final long serialVersionUID = 3038623696184546092L;</span><br><span class="line"> 19     </span><br><span class="line"> 20     public static final int WIDTH = 120;//生成的图片的宽度</span><br><span class="line"> 21     public static final int HEIGHT = 30;//生成的图片的高度</span><br><span class="line"> 22 </span><br><span class="line"> 23     public void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> 24             throws ServletException, IOException &#123;</span><br><span class="line"> 25         this.doPost(request, response);</span><br><span class="line"> 26     &#125;</span><br><span class="line"> 27 </span><br><span class="line"> 28     public void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> 29             throws ServletException, IOException &#123;</span><br><span class="line"> 30         String createTypeFlag = request.getParameter(&quot;createTypeFlag&quot;);//接收客户端传递的createTypeFlag标识</span><br><span class="line"> 31         //1.在内存中创建一张图片</span><br><span class="line"> 32         BufferedImage bi = new BufferedImage(WIDTH, HEIGHT,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"> 33         //2.得到图片</span><br><span class="line"> 34         Graphics g = bi.getGraphics();</span><br><span class="line"> 35         //3.设置图片的背影色</span><br><span class="line"> 36         setBackGround(g);</span><br><span class="line"> 37         //4.设置图片的边框</span><br><span class="line"> 38         setBorder(g);</span><br><span class="line"> 39         //5.在图片上画干扰线</span><br><span class="line"> 40         drawRandomLine(g);</span><br><span class="line"> 41         //6.写在图片上随机数</span><br><span class="line"> 42         //String random = drawRandomNum((Graphics2D) g,&quot;ch&quot;);//生成中文验证码图片</span><br><span class="line"> 43         //String random = drawRandomNum((Graphics2D) g,&quot;nl&quot;);//生成数字和字母组合的验证码图片</span><br><span class="line"> 44         //String random = drawRandomNum((Graphics2D) g,&quot;n&quot;);//生成纯数字的验证码图片</span><br><span class="line"> 45         //String random = drawRandomNum((Graphics2D) g,&quot;l&quot;);//生成纯字母的验证码图片</span><br><span class="line"> 46         String random = drawRandomNum((Graphics2D) g,createTypeFlag);//根据客户端传递的createTypeFlag标识生成验证码图片</span><br><span class="line"> 47         //7.将随机数存在session中</span><br><span class="line"> 48         request.getSession().setAttribute(&quot;checkcode&quot;, random);</span><br><span class="line"> 49         //8.设置响应头通知浏览器以图片的形式打开</span><br><span class="line"> 50         response.setContentType(&quot;image/jpeg&quot;);//等同于response.setHeader(&quot;Content-Type&quot;, &quot;image/jpeg&quot;);</span><br><span class="line"> 51         //9.设置响应头控制浏览器不要缓存</span><br><span class="line"> 52         response.setDateHeader(&quot;expries&quot;, -1);</span><br><span class="line"> 53         response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);</span><br><span class="line"> 54         response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line"> 55         //10.将图片写给浏览器</span><br><span class="line"> 56         ImageIO.write(bi, &quot;jpg&quot;, response.getOutputStream());</span><br><span class="line"> 57     &#125;</span><br><span class="line"> 58 </span><br><span class="line"> 59     /**</span><br><span class="line"> 60      * 设置图片的背景色</span><br><span class="line"> 61      * @param g</span><br><span class="line"> 62      */</span><br><span class="line"> 63     private void setBackGround(Graphics g) &#123;</span><br><span class="line"> 64         // 设置颜色</span><br><span class="line"> 65         g.setColor(Color.WHITE);</span><br><span class="line"> 66         // 填充区域</span><br><span class="line"> 67         g.fillRect(0, 0, WIDTH, HEIGHT);</span><br><span class="line"> 68     &#125;</span><br><span class="line"> 69 </span><br><span class="line"> 70     /**</span><br><span class="line"> 71      * 设置图片的边框</span><br><span class="line"> 72      * @param g</span><br><span class="line"> 73      */</span><br><span class="line"> 74     private void setBorder(Graphics g) &#123;</span><br><span class="line"> 75         // 设置边框颜色</span><br><span class="line"> 76         g.setColor(Color.BLUE);</span><br><span class="line"> 77         // 边框区域</span><br><span class="line"> 78         g.drawRect(1, 1, WIDTH - 2, HEIGHT - 2);</span><br><span class="line"> 79     &#125;</span><br><span class="line"> 80 </span><br><span class="line"> 81     /**</span><br><span class="line"> 82      * 在图片上画随机线条</span><br><span class="line"> 83      * @param g</span><br><span class="line"> 84      */</span><br><span class="line"> 85     private void drawRandomLine(Graphics g) &#123;</span><br><span class="line"> 86         // 设置颜色</span><br><span class="line"> 87         g.setColor(Color.GREEN);</span><br><span class="line"> 88         // 设置线条个数并画线</span><br><span class="line"> 89         for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line"> 90             int x1 = new Random().nextInt(WIDTH);</span><br><span class="line"> 91             int y1 = new Random().nextInt(HEIGHT);</span><br><span class="line"> 92             int x2 = new Random().nextInt(WIDTH);</span><br><span class="line"> 93             int y2 = new Random().nextInt(HEIGHT);</span><br><span class="line"> 94             g.drawLine(x1, y1, x2, y2);</span><br><span class="line"> 95         &#125;</span><br><span class="line"> 96     &#125;</span><br><span class="line"> 97 </span><br><span class="line"> 98     /**</span><br><span class="line"> 99      * 画随机字符</span><br><span class="line">100      * @param g</span><br><span class="line">101      * @param createTypeFlag</span><br><span class="line">102      * @return</span><br><span class="line">103      * String... createTypeFlag是可变参数，</span><br><span class="line">104      * Java1.5增加了新特性：可变参数：适用于参数个数不确定，类型确定的情况，java把可变参数当做数组处理。注意：可变参数必须位于最后一项</span><br><span class="line">105      */</span><br><span class="line">106     private String drawRandomNum(Graphics2D g,String... createTypeFlag) &#123;</span><br><span class="line">107         // 设置颜色</span><br><span class="line">108         g.setColor(Color.RED);</span><br><span class="line">109         // 设置字体</span><br><span class="line">110         g.setFont(new Font(&quot;宋体&quot;, Font.BOLD, 20));</span><br><span class="line">111         //常用的中国汉字</span><br><span class="line">112         String baseChineseChar = &quot;\u7684\u4e00\u4e86\u662f\u6211\u4e0d\u5728\u4eba\u4eec\u6709\u6765\u4ed6\u8fd9\u4e0a\u7740\u4e2a\u5730\u5230\u5927\u91cc\u8bf4\u5c31\u53bb\u5b50\u5f97\u4e5f\u548c\u90a3\u8981\u4e0b\u770b\u5929\u65f6\u8fc7\u51fa\u5c0f\u4e48\u8d77\u4f60\u90fd\u628a\u597d\u8fd8\u591a\u6ca1\u4e3a\u53c8\u53ef\u5bb6\u5b66\u53ea\u4ee5\u4e3b\u4f1a\u6837\u5e74\u60f3\u751f\u540c\u8001\u4e2d\u5341\u4ece\u81ea\u9762\u524d\u5934\u9053\u5b83\u540e\u7136\u8d70\u5f88\u50cf\u89c1\u4e24\u7528\u5979\u56fd\u52a8\u8fdb\u6210\u56de\u4ec0\u8fb9\u4f5c\u5bf9\u5f00\u800c\u5df1\u4e9b\u73b0\u5c71\u6c11\u5019\u7ecf\u53d1\u5de5\u5411\u4e8b\u547d\u7ed9\u957f\u6c34\u51e0\u4e49\u4e09\u58f0\u4e8e\u9ad8\u624b\u77e5\u7406\u773c\u5fd7\u70b9\u5fc3\u6218\u4e8c\u95ee\u4f46\u8eab\u65b9\u5b9e\u5403\u505a\u53eb\u5f53\u4f4f\u542c\u9769\u6253\u5462\u771f\u5168\u624d\u56db\u5df2\u6240\u654c\u4e4b\u6700\u5149\u4ea7\u60c5\u8def\u5206\u603b\u6761\u767d\u8bdd\u4e1c\u5e2d\u6b21\u4eb2\u5982\u88ab\u82b1\u53e3\u653e\u513f\u5e38\u6c14\u4e94\u7b2c\u4f7f\u5199\u519b\u5427\u6587\u8fd0\u518d\u679c\u600e\u5b9a\u8bb8\u5feb\u660e\u884c\u56e0\u522b\u98de\u5916\u6811\u7269\u6d3b\u90e8\u95e8\u65e0\u5f80\u8239\u671b\u65b0\u5e26\u961f\u5148\u529b\u5b8c\u5374\u7ad9\u4ee3\u5458\u673a\u66f4\u4e5d\u60a8\u6bcf\u98ce\u7ea7\u8ddf\u7b11\u554a\u5b69\u4e07\u5c11\u76f4\u610f\u591c\u6bd4\u9636\u8fde\u8f66\u91cd\u4fbf\u6597\u9a6c\u54ea\u5316\u592a\u6307\u53d8\u793e\u4f3c\u58eb\u8005\u5e72\u77f3\u6ee1\u65e5\u51b3\u767e\u539f\u62ff\u7fa4\u7a76\u5404\u516d\u672c\u601d\u89e3\u7acb\u6cb3\u6751\u516b\u96be\u65e9\u8bba\u5417\u6839\u5171\u8ba9\u76f8\u7814\u4eca\u5176\u4e66\u5750\u63a5\u5e94\u5173\u4fe1\u89c9\u6b65\u53cd\u5904\u8bb0\u5c06\u5343\u627e\u4e89\u9886\u6216\u5e08\u7ed3\u5757\u8dd1\u8c01\u8349\u8d8a\u5b57\u52a0\u811a\u7d27\u7231\u7b49\u4e60\u9635\u6015\u6708\u9752\u534a\u706b\u6cd5\u9898\u5efa\u8d76\u4f4d\u5531\u6d77\u4e03\u5973\u4efb\u4ef6\u611f\u51c6\u5f20\u56e2\u5c4b\u79bb\u8272\u8138\u7247\u79d1\u5012\u775b\u5229\u4e16\u521a\u4e14\u7531\u9001\u5207\u661f\u5bfc\u665a\u8868\u591f\u6574\u8ba4\u54cd\u96ea\u6d41\u672a\u573a\u8be5\u5e76\u5e95\u6df1\u523b\u5e73\u4f1f\u5fd9\u63d0\u786e\u8fd1\u4eae\u8f7b\u8bb2\u519c\u53e4\u9ed1\u544a\u754c\u62c9\u540d\u5440\u571f\u6e05\u9633\u7167\u529e\u53f2\u6539\u5386\u8f6c\u753b\u9020\u5634\u6b64\u6cbb\u5317\u5fc5\u670d\u96e8\u7a7f\u5185\u8bc6\u9a8c\u4f20\u4e1a\u83dc\u722c\u7761\u5174\u5f62\u91cf\u54b1\u89c2\u82e6\u4f53\u4f17\u901a\u51b2\u5408\u7834\u53cb\u5ea6\u672f\u996d\u516c\u65c1\u623f\u6781\u5357\u67aa\u8bfb\u6c99\u5c81\u7ebf\u91ce\u575a\u7a7a\u6536\u7b97\u81f3\u653f\u57ce\u52b3\u843d\u94b1\u7279\u56f4\u5f1f\u80dc\u6559\u70ed\u5c55\u5305\u6b4c\u7c7b\u6e10\u5f3a\u6570\u4e61\u547c\u6027\u97f3\u7b54\u54e5\u9645\u65e7\u795e\u5ea7\u7ae0\u5e2e\u5566\u53d7\u7cfb\u4ee4\u8df3\u975e\u4f55\u725b\u53d6\u5165\u5cb8\u6562\u6389\u5ffd\u79cd\u88c5\u9876\u6025\u6797\u505c\u606f\u53e5\u533a\u8863\u822c\u62a5\u53f6\u538b\u6162\u53d4\u80cc\u7ec6&quot;;</span><br><span class="line">113         //数字和字母的组合</span><br><span class="line">114         String baseNumLetter = &quot;0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">115         //纯数字</span><br><span class="line">116         String baseNum = &quot;0123456789&quot;;</span><br><span class="line">117         //纯字母</span><br><span class="line">118         String baseLetter = &quot;ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">119         //createTypeFlag[0]==null表示没有传递参数</span><br><span class="line">120         if (createTypeFlag.length &gt; 0 &amp;&amp; null != createTypeFlag[0]) &#123;</span><br><span class="line">121             if (createTypeFlag[0].equals(&quot;ch&quot;)) &#123;</span><br><span class="line">122                 // 截取汉字</span><br><span class="line">123                 return createRandomChar(g, baseChineseChar);</span><br><span class="line">124             &#125;else if (createTypeFlag[0].equals(&quot;nl&quot;)) &#123;</span><br><span class="line">125                 // 截取数字和字母的组合</span><br><span class="line">126                 return createRandomChar(g, baseNumLetter);</span><br><span class="line">127             &#125;else if (createTypeFlag[0].equals(&quot;n&quot;)) &#123;</span><br><span class="line">128                 // 截取数字</span><br><span class="line">129                 return createRandomChar(g, baseNum);</span><br><span class="line">130             &#125;else if (createTypeFlag[0].equals(&quot;l&quot;)) &#123;</span><br><span class="line">131                 // 截取字母</span><br><span class="line">132                 return createRandomChar(g, baseLetter);</span><br><span class="line">133             &#125;</span><br><span class="line">134         &#125;else &#123;</span><br><span class="line">135             // 默认截取数字和字母的组合</span><br><span class="line">136             return createRandomChar(g, baseNumLetter);</span><br><span class="line">137         &#125;</span><br><span class="line">138         </span><br><span class="line">139         return &quot;&quot;;</span><br><span class="line">140     &#125;</span><br><span class="line">141 </span><br><span class="line">142     /**</span><br><span class="line">143      * 创建随机字符</span><br><span class="line">144      * @param g</span><br><span class="line">145      * @param baseChar</span><br><span class="line">146      * @return 随机字符</span><br><span class="line">147      */</span><br><span class="line">148     private String createRandomChar(Graphics2D g,String baseChar) &#123;</span><br><span class="line">149         StringBuffer sb = new StringBuffer();</span><br><span class="line">150         int x = 5;</span><br><span class="line">151         String ch =&quot;&quot;;</span><br><span class="line">152         // 控制字数</span><br><span class="line">153         for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">154             // 设置字体旋转角度</span><br><span class="line">155             int degree = new Random().nextInt() % 30;</span><br><span class="line">156             ch = baseChar.charAt(new Random().nextInt(baseChar.length())) + &quot;&quot;;</span><br><span class="line">157             sb.append(ch);</span><br><span class="line">158             // 正向角度</span><br><span class="line">159             g.rotate(degree * Math.PI / 180, x, 20);</span><br><span class="line">160             g.drawString(ch, x, 20);</span><br><span class="line">161             // 反向角度</span><br><span class="line">162             g.rotate(-degree * Math.PI / 180, x, 20);</span><br><span class="line">163             x += 30;</span><br><span class="line">164         &#125;</span><br><span class="line">165         return sb.toString();</span><br><span class="line">166     &#125;</span><br><span class="line">167 &#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、在Form表单中使用验证码图片"><a href="#二、在Form表单中使用验证码图片" class="headerlink" title="二、在Form表单中使用验证码图片"></a>二、在Form表单中使用验证码图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 &lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"> 2 &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class="line"> 3 &lt;html&gt;</span><br><span class="line"> 4   &lt;head&gt;</span><br><span class="line"> 5     &lt;title&gt;在Form表单中使用验证码&lt;/title&gt;</span><br><span class="line"> 6     &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> 7     //刷新验证码</span><br><span class="line"> 8     function changeImg()&#123;</span><br><span class="line"> 9         document.getElementById(&quot;validateCodeImg&quot;).src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage?&quot;+Math.random();</span><br><span class="line">10     &#125;</span><br><span class="line">11     &lt;/script&gt;</span><br><span class="line">12   &lt;/head&gt;</span><br><span class="line">13   </span><br><span class="line">14   &lt;body&gt;</span><br><span class="line">15         &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/CheckServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">16             验证码：&lt;input type=&quot;text&quot; name=&quot;validateCode&quot;/&gt;</span><br><span class="line">17             &lt;img alt=&quot;验证码看不清，换一张&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage&quot; id=&quot;validateCodeImg&quot; onclick=&quot;changeImg()&quot;&gt;</span><br><span class="line">18             &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;changeImg()&quot;&gt;看不清，换一张&lt;/a&gt;</span><br><span class="line">19             &lt;br/&gt;</span><br><span class="line">20             &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">21         &lt;/form&gt;</span><br><span class="line">22   &lt;/body&gt;</span><br><span class="line">23 &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>DrawImage Servlet除了可以生成的字母和数字的组合的验证码图片之外，还可以生成汉字，纯数字，纯字母的验证码图片，只需要向DrawImage Servlet传递约定好的生成标识符参数即可，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 &lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"> 2 &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class="line"> 3 &lt;html&gt;</span><br><span class="line"> 4   &lt;head&gt;</span><br><span class="line"> 5     &lt;title&gt;在Form表单中使用验证码&lt;/title&gt;</span><br><span class="line"> 6     &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> 7     //刷新验证码</span><br><span class="line"> 8     function changeImg(obj,createTypeFlag)&#123;</span><br><span class="line"> 9         document.getElementById(obj.id).src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage?createTypeFlag=&quot;+createTypeFlag+&quot;&amp;&quot;+Math.random();</span><br><span class="line">10     &#125;</span><br><span class="line">11     &lt;/script&gt;</span><br><span class="line">12   &lt;/head&gt;</span><br><span class="line">13   </span><br><span class="line">14   &lt;body&gt;</span><br><span class="line">15         &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/CheckServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">16             数字字母混合验证码：&lt;input type=&quot;text&quot; name=&quot;validateCode&quot;/&gt;</span><br><span class="line">17             &lt;img alt=&quot;验证码看不清，换一张&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage&quot; id=&quot;validateCodeImg1&quot; onclick=&quot;changeImg(this,&apos;nl&apos;)&quot;&gt;</span><br><span class="line">18             &lt;br/&gt;</span><br><span class="line">19             中文验证码：&lt;input type=&quot;text&quot; name=&quot;validateCode&quot;/&gt;</span><br><span class="line">20             &lt;img alt=&quot;验证码看不清，换一张&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage?createTypeFlag=ch&quot; id=&quot;validateCodeImg2&quot; onclick=&quot;changeImg(this,&apos;ch&apos;)&quot;&gt;</span><br><span class="line">21             &lt;br/&gt;</span><br><span class="line">22             英文验证码：&lt;input type=&quot;text&quot; name=&quot;validateCode&quot;/&gt;</span><br><span class="line">23             &lt;img alt=&quot;验证码看不清，换一张&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage?createTypeFlag=l&quot; id=&quot;validateCodeImg3&quot; onclick=&quot;changeImg(this,&apos;l&apos;)&quot;&gt;</span><br><span class="line">24             &lt;br/&gt;</span><br><span class="line">25             数字验证码：&lt;input type=&quot;text&quot; name=&quot;validateCode&quot;/&gt;</span><br><span class="line">26             &lt;img alt=&quot;验证码看不清，换一张&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DrawImage?createTypeFlag=n&quot; id=&quot;validateCodeImg4&quot; onclick=&quot;changeImg(this,&apos;n&apos;)&quot;&gt;</span><br><span class="line">27             &lt;br/&gt;</span><br><span class="line">28             &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">29         &lt;/form&gt;</span><br><span class="line">30   &lt;/body&gt;</span><br><span class="line">31 &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="三、服务器端对form表单提交上来的验证码处理"><a href="#三、服务器端对form表单提交上来的验证码处理" class="headerlink" title="三、服务器端对form表单提交上来的验证码处理"></a><strong>三、服务器端对form表单提交上来的验证码处理</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 package gacl.response.study;</span><br><span class="line"> 2 import java.io.IOException;</span><br><span class="line"> 3 import javax.servlet.ServletException;</span><br><span class="line"> 4 import javax.servlet.http.HttpServlet;</span><br><span class="line"> 5 import javax.servlet.http.HttpServletRequest;</span><br><span class="line"> 6 import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> 7 /**</span><br><span class="line"> 8  * @author gacl</span><br><span class="line"> 9  * 服务器端接收到验证码后的处理</span><br><span class="line">10  */</span><br><span class="line">11 public class CheckServlet extends HttpServlet &#123;</span><br><span class="line">12     public void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">13             throws ServletException, IOException &#123;</span><br><span class="line">14         String clientCheckcode = request.getParameter(&quot;validateCode&quot;);//接收客户端浏览器提交上来的验证码</span><br><span class="line">15         String serverCheckcode = (String) request.getSession().getAttribute(&quot;checkcode&quot;);//从服务器端的session中取出验证码</span><br><span class="line">16         if (clientCheckcode != null &amp;&amp; serverCheckcode != null &amp;&amp; clientCheckcode.equals(serverCheckcode)) &#123;//将客户端验证码和服务器端验证比较，如果相等，则表示验证通过</span><br><span class="line">17             System.out.println(&quot;验证码验证通过！&quot;);</span><br><span class="line">18         &#125;else &#123;</span><br><span class="line">19             System.out.println(&quot;验证码验证失败！&quot;);</span><br><span class="line">20         &#125;</span><br><span class="line">21     &#125;</span><br><span class="line">22 </span><br><span class="line">23     public void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">24             throws ServletException, IOException &#123;</span><br><span class="line">25         doGet(request, response);</span><br><span class="line">26     &#125;</span><br><span class="line">27 </span><br><span class="line">28 &#125;</span><br></pre></td></tr></table></figure>





























































<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb4</title>
    <url>/2019/09/23/2019-09-23-JavaWeb4/</url>
    <content><![CDATA[<h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><p>会话可以简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。</p>
<p>每个用户与服务器进行交互的过程中，各自会有一些数据，程序要想办法保存每个用户的数据。可以通过两种方式：Cookie/Session。</p>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie是客户端技术，程序把每个用户的数据以cookie的形式写给用户各自的浏览器，当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去，这样，web资源处理的就是用户各自的数据了。</p>
<p>javax.servlet.http.Cookie类用于创建以一个Cookie，response接口中也定义了一个addCookie方法，它用于在其响应头中增加一个相应的Set-Cookie头字段，同样，request接口中也定义了一个getCookie方法，它用于获取客户端提交的Cookie。</p>
<h2 id="显示上次访问时间并可清除"><a href="#显示上次访问时间并可清除" class="headerlink" title="显示上次访问时间并可清除"></a>显示上次访问时间并可清除</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PrintWrite out = response.getWrite();</span><br><span class="line">out.print(&quot;&lt;a href=&apos;/ProjectName/servlet/DeleteCookieServlet&apos;&gt;清除上次访问时间&lt;/a&gt;&lt;br/&gt;&quot;);</span><br><span class="line">out.print(&quot;您上次访问时间是：&quot;);</span><br><span class="line">//获得用户的时间cookie</span><br><span class="line">Cookie cookies[] = request.getCookie();</span><br><span class="line">for(int i=0;cookies != null &amp;&amp; i &lt; cookies.length;i++)&#123;</span><br><span class="line">	if(cookies[i].getName().equals(&quot;lastAccessTime&quot;))&#123;</span><br><span class="line">		long cookieValue = Long.parseLong(cookies.getValue());		//得到用户上次访问时间</span><br><span class="line">		Date date = new Date(cookieValue);</span><br><span class="line">		out.print(date.toLocalString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//给用户回送最新的访问时间</span><br><span class="line">Cookie cookie = new Cookie(&quot;lastAccessTime&quot;,System.currentTimeMillis()+&quot;&quot;);</span><br><span class="line">cookie.setMaxAge(1*30*24*3600);		//一个月期限</span><br><span class="line">cookie.setPath(&quot;/ProjectName&quot;);		//访问网站下所以资源都带cookie来</span><br><span class="line"></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">//DeleteCookieServlet</span><br><span class="line">Cookie cookie = new Cookie(&quot;lastAccessTime&quot;,System.currentTimeMillis()+&quot;&quot;);</span><br><span class="line">cookie.setMaxAge(0);		</span><br><span class="line">cookie.setPath(&quot;/ProjectName&quot;);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">response.sendRedirect(&quot;/ProjectName/servlet/CookieDemoServlet&quot;);</span><br></pre></td></tr></table></figure>

<p>tip：如果创建了一个cookie，并将它发送到浏览器，默认情况下它是一个会话级别的cookie（即存储在浏览器内存 中），用户退出浏览器之后即被删除，若希望浏览器将该cookie存储在硬盘上，需使用setMaxAge，并给出一个以秒为单位的时间，将最大失效设为0则是命令浏览器删除该cookie，注意删除cookie时，path必须一致，否则不会删除。</p>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>Session是服务器端技术，利这个技术，服务器在运行时可以为每一个用户的浏览器创建一个独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其他资源时，其他web资源再从用户各自的session中取出数据为用户服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//buySession</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(&quot;name&quot;,&quot;洗衣机&quot;);</span><br><span class="line">------------------------------------------------------</span><br><span class="line">//paySession</span><br><span class="line">PrintWrite out = response.getWrite();</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">String product = session.getAttribute(&quot;name&quot;);</span><br><span class="line">out.write(&quot;您购买的商品为：&quot; + product);</span><br></pre></td></tr></table></figure>

<p>session对象在调用getSession方法时创建，在30分钟内没有再次使用，浏览器会自动销毁，手动摧毁使用invalidate()方法即可。</p>
<h2 id="session工作原理"><a href="#session工作原理" class="headerlink" title="session工作原理"></a>session工作原理</h2><p>session工作是基于cookie的。服务器创建session出来后，会把session的id号，以cookie的形式回写给客户机，这样，只要客户机的浏览器不关，再去访问服务器时，都会带着session的id号去，服务器发现客户机浏览器带session id过来了，就会使用内存中与之对应的session为之服务。</p>
<p><img src="https://i.loli.net/2019/09/23/7JlrZYh8SNizCe5.png" alt=""></p>
<p>现在有个问题，Sun公司在设计getSession方法时，默认使用cookie没有使用期限，也就是随着浏览器关闭，cookie也就销毁，也就意味着标识每一个session的唯一ID被销毁，这样就无法使session存留30分钟。</p>
<p>解决办法：</p>
<p>在获得session之后获取到ID号，重写对应的cookie，覆盖掉本来的即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">String sessionid = session.getId();</span><br><span class="line">Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionid);</span><br><span class="line">cookie.setPath(&quot;/ProjectName&quot;);</span><br><span class="line">cookie.setMaxAge(30*60);		</span><br><span class="line"></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<h2 id="防止表单重复提交"><a href="#防止表单重复提交" class="headerlink" title="防止表单重复提交"></a>防止表单重复提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//form.jsp</span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Form表单&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DoFormServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; id=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//DoFormServlet</span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Form表单&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DoFormServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; id=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>但是会有如下三种情况的表单重复提交：</p>
<ol>
<li>在网络延迟的情况下让用户有时间点击多次submit按钮导致表单重复提交；</li>
<li>表单提交后用户点击【刷新】按钮导致表单重复提交；</li>
<li>用户提交表单后，点击浏览器的【后退】按钮回退到表单页面后进行再次提交；</li>
</ol>
<p>解决方案：</p>
<ol>
<li>利用JavaScript防止表单重复提交</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Form表单&lt;/title&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var isCommitted = false;//表单是否已经提交标识，默认为false</span><br><span class="line">        function dosubmit()&#123;</span><br><span class="line">            if(isCommitted==false)&#123;</span><br><span class="line">                isCommitted = true;//提交表单后，将表单是否已经提交标识设置为true</span><br><span class="line">                return true;//返回true让表单正常提交</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return false;//返回false那么表单将不提交</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DoFormServlet&quot; onsubmit=&quot;return dosubmit()&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; id=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>或者，表单提交之后，将提交按钮设置为不可用，让用户没有机会点击第二次提交按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function dosubmit()&#123;</span><br><span class="line">    //获取表单提交按钮</span><br><span class="line">    var btnSubmit = document.getElementById(&quot;submit&quot;);</span><br><span class="line">    //将表单提交按钮设置为不可用，这样就可以避免用户再次点击提交按钮</span><br><span class="line">    btnSubmit.disabled= &quot;disabled&quot;;</span><br><span class="line">    //返回true让表单可以正常提交</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用JavaScript防止表单重复提交的做法只对上述提交到导致表单重复提交的三种场景中的【场景一】有效，而对于【场景二】和【场景三】是没有用，依然无法解决表单重复提交问题。</p>
<ol start="2">
<li>利用Session防止表单重复提交</li>
</ol>
<p>具体的做法：<strong>在服务器端生成一个唯一的随机标识号，专业术语称为Token(令牌)，同时在当前用户的Session域中保存这个Token。然后将Token发送到客户端的Form表单中，在Form表单中使用隐藏域来存储这个Token，表单提交的时候连同这个Token一起提交到服务器端，然后在服务器端判断客户端提交上来的Token与服务器端生成的Token是否一致，如果不一致，那就是重复提交了，此时服务器端就可以不处理重复提交的表单。如果相同则处理表单提交，处理完后清除当前用户的Session域中存储的标识号。</strong><br>　　在下列情况下，服务器程序将拒绝处理用户提交的表单请求：</p>
<ol>
<li><strong>存储Session域中的Token(令牌)与表单提交的Token(令牌)不同。</strong></li>
<li><strong>当前用户的Session中不存在Token(令牌)。</strong></li>
<li><strong>用户提交的表单数据中没有Token(令牌)。</strong></li>
</ol>
<p>首先，创建FormServlet，用于生成<strong>Token(令牌)</strong>和跳转到form.jsp页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package xdp.gacl.session;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class FormServlet extends HttpServlet &#123;</span><br><span class="line">    private static final long serialVersionUID = -884689940866074733L;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        String token = TokenProccessor.getInstance().makeToken();//创建令牌</span><br><span class="line">        System.out.println(&quot;在FormServlet中生成的token：&quot;+token);</span><br><span class="line">        request.getSession().setAttribute(&quot;token&quot;, token);  //在服务器使用session保存token(令牌)</span><br><span class="line">        request.getRequestDispatcher(&quot;/form.jsp&quot;).forward(request, response);//跳转到form.jsp页面</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在form.jsp中使用隐藏域来存储<strong>Token(令牌)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;form表单&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DoFormServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;%--使用隐藏域存储生成的token--%&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">            &lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;&lt;%=session.getAttribute(&quot;token&quot;) %&gt;&quot;&gt;</span><br><span class="line">        --%&gt;</span><br><span class="line">        &lt;%--使用EL表达式取出存储在session中的token--%&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;$&#123;token&#125;&quot;/&gt; </span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; </span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>DoFormServlet处理表单提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package xdp.gacl.session;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class DoFormServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">                throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">            boolean b = isRepeatSubmit(request);//判断用户是否是重复提交</span><br><span class="line">            if(b==true)&#123;</span><br><span class="line">                System.out.println(&quot;请不要重复提交&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            request.getSession().removeAttribute(&quot;token&quot;);//移除session中的token</span><br><span class="line">            System.out.println(&quot;处理用户提交请求！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 判断客户端提交上来的令牌和服务器端生成的令牌是否一致</span><br><span class="line">         * @param request</span><br><span class="line">         * @return </span><br><span class="line">         *         true 用户重复提交了表单 </span><br><span class="line">         *         false 用户没有重复提交表单</span><br><span class="line">         */</span><br><span class="line">        private boolean isRepeatSubmit(HttpServletRequest request) &#123;</span><br><span class="line">            String client_token = request.getParameter(&quot;token&quot;);</span><br><span class="line">            //1、如果用户提交的表单数据中没有token，则用户是重复提交了表单</span><br><span class="line">            if(client_token==null)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //取出存储在Session中的token</span><br><span class="line">            String server_token = (String) request.getSession().getAttribute(&quot;token&quot;);</span><br><span class="line">            //2、如果当前用户的Session中不存在Token(令牌)，则用户是重复提交了表单</span><br><span class="line">            if(server_token==null)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //3、存储在Session中的Token(令牌)与表单提交的Token(令牌)不同，则用户是重复提交了表单</span><br><span class="line">            if(!client_token.equals(server_token))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成Token的工具类TokenProccessor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package xdp.gacl.session;</span><br><span class="line"></span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line">public class TokenProccessor &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     *单例设计模式（保证类的对象在内存中只有一个）</span><br><span class="line">     *1、把类的构造函数私有</span><br><span class="line">     *2、自己创建一个类的对象</span><br><span class="line">     *3、对外提供一个公共的方法，返回类的对象</span><br><span class="line">     */</span><br><span class="line">    private TokenProccessor()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    private static final TokenProccessor instance = new TokenProccessor();</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 返回类的对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static TokenProccessor getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 生成Token</span><br><span class="line">     * Token：Nv6RRuGEVvmGjB+jimI/gw==</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String makeToken()&#123;  //checkException</span><br><span class="line">        //  7346734837483  834u938493493849384  43434384</span><br><span class="line">        String token = (System.currentTimeMillis() + new Random().nextInt(999999999)) + &quot;&quot;;</span><br><span class="line">        //数据指纹   128位长   16个字节  md5</span><br><span class="line">        try &#123;</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(&quot;md5&quot;);</span><br><span class="line">            byte md5[] =  md.digest(token.getBytes());</span><br><span class="line">            //base64编码--任意二进制编码明文字符   adfsdfsdfsf</span><br><span class="line">            BASE64Encoder encoder = new BASE64Encoder();</span><br><span class="line">            return encoder.encode(md5);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式处理表单重复提交，可以解决上述的场景二和场景三中出现的表单重复提交问题。</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb3</title>
    <url>/2019/09/20/2019-09-20-JavaWeb3/</url>
    <content><![CDATA[<h1 id="response"><a href="#response" class="headerlink" title="response"></a>response</h1><h2 id="response的OutputStream输出数据"><a href="#response的OutputStream输出数据" class="headerlink" title="response的OutputStream输出数据"></a>response的OutputStream输出数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String data = &quot;中国&quot;;</span><br><span class="line">OutputStream out = response.getOutputStream();		//字节流</span><br><span class="line">out.write(data.getByte());		//这样在浏览器显示是正确的</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">out.write(data.getBytes(“UTF-8&quot;);	//这样浏览器反而显示乱码</span><br><span class="line">//原因：浏览器拿到response解析时默认用的码表时GB2312，并不是UTF-8，所以可以修改浏览器的码表，但实际开发显然不会这样做，需要在响应头指定码表。(新版谷歌浏览器默认UTF-8且无法更换)</span><br><span class="line">response.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">String data =……</span><br><span class="line">…………</span><br></pre></td></tr></table></figure>

<p>或者利用html的meta标签模拟一个HTTP响应头，来控制浏览器行为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out.write(&quot;&lt;meta http-equiv=&apos;Content-type&apos; content=&apos;text/html;charset=UTF-8&apos;&gt;&quot;.getBytes());</span><br></pre></td></tr></table></figure>

<h2 id="response的Writer输出数据"><a href="#response的Writer输出数据" class="headerlink" title="response的Writer输出数据"></a>response的Writer输出数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String data = &quot;中国&quot;;</span><br><span class="line">PrintWriter out = response.getWriter();		//字符流</span><br><span class="line">out.write(data);		//这样在浏览器显示??</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">//原因：servlet将“中国”写入response，response默认使用ISO8859码表，在码表中找“中国”，无法找到，所以返回两个“？”对应的数字，浏览器拿到response返回的数字解析显示“？”，所以修改response码表即可。</span><br><span class="line">response.setCharacterEncoding(“UTF-8&quot;);</span><br><span class="line">response.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">String data =……</span><br><span class="line">…………</span><br></pre></td></tr></table></figure>

<h2 id="response下载文件"><a href="#response下载文件" class="headerlink" title="response下载文件"></a>response下载文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String path = this.getServletContext().getRealPath(&quot;/download/1.jpg&quot;);	//得到资源文件1.jpg在硬盘中的地址</span><br><span class="line">String filename = path.substring(path.lastIndexOf(&quot;\\&quot;)+1);		//截取文件名</span><br><span class="line">response.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename=&quot; + filename);	//告诉浏览器下载文件</span><br><span class="line">//如果下载文件中是中文文件，需要经过URL编码</span><br><span class="line">//response.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename=&quot; + URLEncoder.encode(filename, &quot;UTF-8&quot;);</span><br><span class="line">//读资源文件</span><br><span class="line">InputStream in = null;</span><br><span class="line">OutputStream out = null;</span><br><span class="line">try&#123;</span><br><span class="line">	in =  new FileInputStream(path);</span><br><span class="line">	int len = 0;</span><br><span class="line">	byte buffer[] = new byte[1024];</span><br><span class="line">	out = response.getOutputStream();</span><br><span class="line">	while((len = in.read(buffer)) &gt; 0) (</span><br><span class="line">		out.write(buffer, 0, len);</span><br><span class="line">	)</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">	if (in != null) &#123;</span><br><span class="line">		try(</span><br><span class="line">			in.close();</span><br><span class="line">		)catch(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (out != null) &#123;</span><br><span class="line">		try(</span><br><span class="line">			out.close();</span><br><span class="line">		)catch(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="response控制浏览器定时刷新"><a href="#response控制浏览器定时刷新" class="headerlink" title="response控制浏览器定时刷新"></a>response控制浏览器定时刷新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setHeader(&quot;refersh&quot;,3);	//每隔3s刷新一次</span><br></pre></td></tr></table></figure>

<p>实际开发中，一般这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String message = &quot;&lt;meta http-squiv=&apos;refresh&apos; content=&apos;3;url=/ProjectName/index.jsp&apos;&gt;恭喜你，登陆成功，本浏览器将在3s后跳转到主页面&quot;;</span><br><span class="line">this.getServletContext().setAttribute(&quot;message&quot;,message);</span><br><span class="line">this.getServletContext().getRequestDispatcher(&quot;/message.jsp&quot;).forward(request,response);</span><br></pre></td></tr></table></figure>

<h2 id="response控制浏览器缓存"><a href="#response控制浏览器缓存" class="headerlink" title="response控制浏览器缓存"></a>response控制浏览器缓存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setDateHeader(&quot;expires&quot;, System.currentTimeMillis()+1000*3600);	//缓存1h</span><br></pre></td></tr></table></figure>

<h2 id="response实现请求重定向"><a href="#response实现请求重定向" class="headerlink" title="response实现请求重定向"></a>response实现请求重定向</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setStatus(302);	</span><br><span class="line">response.setHeader(&quot;location&quot;, &quot;/ProjectName/index.jsp&quot;);	//重定向到首页</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">response.setRedirect(&quot;/ProjectName/index.jsp&quot;);	//相当于上边两句</span><br></pre></td></tr></table></figure>

<p>重定向向服务器发送两次请求，通过浏览器地址栏自动改变就可以看出来，这样对服务器压力较大，所以除了登录跳转和购物下单跳转购物车一般不介意采用。</p>
<h2 id="response一些细节"><a href="#response一些细节" class="headerlink" title="response一些细节"></a>response一些细节</h2><ol>
<li><p>getOutputStream()和getWriter()方法分别用于得到输出二进制数据、输出文本数据的ServletOutputStream、Printwriter对象，这两个方法互斥，调用了其中一个就不能调用另一个；</p>
</li>
<li><p>Servlet程序向ServletOutputStream或Printwriter对象写入的数据将被Servlet引擎从response里面获取，Servlet引擎将这些数据当作响应消息的正文，然后再与响应状态行和各响应头组合后输出到客户端；</p>
</li>
<li><p>Servlet的service方法结束后，Servlet引擎将检查getWriter()或getOutputStream()方法返回的输出流对象是否已经调用过close方法，如果没有，Servlet引擎将调用close方法关于该输出流对象；</p>
</li>
</ol>
<h1 id="request"><a href="#request" class="headerlink" title="request"></a>request</h1><p>HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求投中的所有信息都封装在这个对象中，开发人员通过这个对象的方法，可以获得客户端的信息。</p>
<h2 id="RUL和URI"><a href="#RUL和URI" class="headerlink" title="RUL和URI"></a>RUL和URI</h2><p>URL：用于标识某个互联网资源，如<a href="http://www.sina.com/news/1.html；" target="_blank" rel="noopener">http://www.sina.com/news/1.html；</a></p>
<p>URI：用于标识某个资源，如/news/1.html；C:\abc\d.txt；</p>
<p>判断这两个区别的用处：权限拦截、访问次数统计等</p>
<h2 id="request获取请求头和请求数据"><a href="#request获取请求头和请求数据" class="headerlink" title="request获取请求头和请求数据"></a>request获取请求头和请求数据</h2><p>获取请求头：request.getHeader()/request.getHeaders()/request.getHeaderNames()；</p>
<p>获取客户端带来的数据：</p>
<p>首先，客户端一般有两种方式带数据</p>
<ol>
<li><pre><code>//通过超链接
&lt;a href=&quot;RequestDemo?username=xxx&quot;&gt;点我&lt;/a&gt;    
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>
//通过表单
&lt;form action=&quot;RequestDemo&quot; method=&quot;post&quot;&gt;
    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;br&gt;
&lt;/form&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">request获取：</span><br></pre></td></tr></table></figure>
String value = request.getParameter(&quot;username&quot;);
//tip:获取请求数据要先检查再使用，如先判断输入是否为空或者是否为空格
if(value != null &amp;&amp; !value,trim().equals(&quot;&quot;)){
 System.out.println(values);
}</code></pre></li>
</ol>
<hr>
<p>//所有name和对应的value<br>Enumeration e = request.getParameterNames();<br>while(e.hasMoreElements()) {<br>    String name = (String)e.nextElement();<br>    value = request.getParameter(name);<br>    System.out.println(name+”=”+value);<br>}</p>
<hr>
<p>//一个name的所有value<br>String[] values = request.getParameterValues(“username”)；<br>for(int i = 0;values != null &amp;&amp; i &lt; values.length;i++){<br>    System.out.println(values[i]);<br>}</p>
<hr>
<p>//存到Map中<br>//需要首先先建好一个User.java的对象<br>Map map = request.getParameterMap();<br>User user = new User();<br>//需要导入commons-beanutils.jar和commons-logging,jar<br>BeanUtils.populate(user,map);<br>//有异常try……catch……<br>System.out.println(user);</p>
<hr>
<p>//流的方式，但即使获取到也需要解析，因为获取到的格式为“uername=xxx&amp;password=yyy”<br>InputStream in = request.getInputStream();<br>int len = 0;<br>byte buffer[] = new byte[1024];<br>while((len=in.read(buffer))&gt;0){<br>    System.out.println(new String(buffer,0,len));<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## request中文乱码</span><br></pre></td></tr></table></figure>
<p>request.setCharacterEncoding(“UTF-8”);        //只对post提交有效<br>username = new String(username.getBytes(“iso8859-1”),”UTF-8”);    //解决get提交乱码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## request实现请求转发</span><br><span class="line"></span><br><span class="line">请求转发指一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理。</span><br><span class="line"></span><br><span class="line">request对象提供了一个getRequestDispatcher方法，该方法返回一个 RequestDispatcher对象，调用这个对象的forward方法可以实现请求转发。</span><br></pre></td></tr></table></figure>
<p>String data = “aaaaa”;<br>request.setAttribute(“data”,data);<br>request.getRequestDispatcher(“/1.jsp”).forward(request，response);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">request对象同时也是一个域对象，开发人员通过request对象在实现转发时，把数据通过request对象带给其他web资源处理。</span><br><span class="line"></span><br><span class="line">MVC：model-javabean;view-jsp;controller-servlet，流程：jsp收到请求产生数据，数据通过JavaBean封装，JavaBean不适合做输出，会存在request域，jsp再从request中取出进行输出。</span><br><span class="line"></span><br><span class="line">细节一：</span><br><span class="line"></span><br><span class="line">如果在调用forward方法之前，在servlet程序中写入的部分内容已经被真正的传送到了客户端，forward方法将抛出IIIegalStateException异常，例如。</span><br></pre></td></tr></table></figure>
<p>if(true){<br>    request.getRequestDispatcher(“/1.jsp”).forward(request，response);<br>}<br>request.getRequestDispatcher(“/2.jsp”).forward(request，response);<br>//解决方案：在第一个forward后加入return;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">细节二：</span><br><span class="line"></span><br><span class="line">如果在调用forward方法之前向servlet引擎的缓冲区，即response中写入了客户端，只要写入到缓冲区中的内容还没有被真正输出到客户端，forward方法就可以被正常执行，原来写入response的内容将被清空，但是，已写入到HttpServletResponse对象中的响应头字段信息保持有效。</span><br><span class="line"></span><br><span class="line">细节三：</span><br><span class="line"></span><br><span class="line">RequestDispatcher对象除了forward方法之外还有一个方法，include方法，例如。</span><br></pre></td></tr></table></figure>
<p>//例如，每个界面的头脚都一样，单独写一个head.jsp和foot.jsp，在需要的界面引用即可<br>request.getRequestDispatcher(“/head.jsp”).include(request，response);<br>response.getWriter().write(“aaaaa”);<br>request.getRequestDispatcher(“/foot.jsp”).include(request，response);<br>//注意被包含的页面，也就是head.jsp和foot.jsp不要包含全局架构标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># web工程各类地址写法</span><br></pre></td></tr></table></figure>
<p>//1.<br>request.getRequestDispatcher(“/index.jsp”).forward(request，response);</p>
<p>//2.<br>response.sendRedirect(“/ProjectName/index.jsp”);</p>
<p>//3.<br>this.getServletContext().getRealPath(“/index.jsp”);</p>
<p>//4.<br>this.getServletContext().getResourceAsStream(“/index.jsp”);</p>
<p>//5.<br>/*<br><a href="/ProjectName/index.jsp">点击</a></p>
<form action="/ProjectName/index.jsp">
</form>
*/
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">写地址先写一个斜杠(/)，如果地址是写给服务器用的，这个斜杠就代表web应用；如果地址是写给浏览器的，这个斜杠就代表网站；</span><br><span class="line"></span><br><span class="line"># 利用referer防盗链</span><br></pre></td></tr></table></figure>
String referer = request.getHeader("referer");        //获得访问链接
//判断如果是盗链者跳转到首页
if(referer==null || referer.startsWith("https://localhost")){
    response.sendRedirect("/ProjectName/index.jsp");
    return;
}
```













































<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos安装JDK以及多个Tomcat服务器</title>
    <url>/2019/09/17/2019-09-17-Centos%E5%AE%89%E8%A3%85JDK%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AATomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p>JDK</p>
<h1 id="一、JDK"><a href="#一、JDK" class="headerlink" title="一、JDK"></a>一、JDK</h1><p>下载地址:<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p> 注意下载版本   　　  linux环境下    jdkxxxxxx_bin.tar.gz</p>
<p>通过Xftp登陆时注意新建一个root用户的会话，否则一会儿文件无法传输。</p>
<p>配置环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//进入root</span><br><span class="line">su root </span><br><span class="line">password:</span><br><span class="line">mkdir     /usr/local/java</span><br><span class="line">//通过Xftp将下载好的tar.gz压缩包传到新建的这个文件夹下</span><br><span class="line">//进入文件夹</span><br><span class="line">cd /usr/local/java</span><br><span class="line">//解压</span><br><span class="line">tar -zxvf jdk..._bin.tar.gz</span><br><span class="line">//可删可不删   随意</span><br><span class="line">rm -rf jdk..._bin.tar.gz </span><br><span class="line"></span><br><span class="line">vi /etc/profile</span><br><span class="line">//在最下面加上如下配置，注意JAVA_HOME路径即解压好的jdk路径</span><br><span class="line">//键盘 按i 输入或复制以下内容</span><br><span class="line">#java config</span><br><span class="line">JAVA_HOME=/usr/local/java/jdk-11.0.4</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export PATH</span><br><span class="line">//最后    esc +   :wq    保存退出</span><br><span class="line"></span><br><span class="line">//让配置立即生效  或者重启服务器也行</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>验证JDK是否安装成功，在命令行，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>回车，若打印出JDK版本，则成功。</p>
<h1 id="二、安装多个Tomcat服务器"><a href="#二、安装多个Tomcat服务器" class="headerlink" title="二、安装多个Tomcat服务器"></a>二、安装多个Tomcat服务器</h1><p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p>
<p>上传、解压和刚才基本相同，这里放在了/usr/local/tomcat/tomcat1和/usr/local/tomcat/tomcat2。</p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>同样是操作/etc/profile 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vi  /etc/profile</span><br></pre></td></tr></table></figure>

<p>然后在文件最后一行，即刚刚添加JDK环境变量的后边添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#tomcat1</span><br><span class="line">export CATALINA_HOME1=/usr/local/tomcat/tomcat1/apache-tomcat-8.5.45</span><br><span class="line">export CATALINA_BASE1=/usr/local/tomcat/tomcat1/apache-tomcat-8.5.45</span><br><span class="line">export TOMCAT_HOME1=/usr/local/tomcat/tomcat1/apache-tomcat-8.5.45</span><br><span class="line"></span><br><span class="line">#tomcat2</span><br><span class="line">export CATALINA_HOME2=/usr/local/tomcat/tomcat2/apache-tomcat-8.5.45</span><br><span class="line">export CATALINA_BASE2=/usr/local/tomcat/tomcat2/apache-tomcat-8.5.45</span><br><span class="line">export TOMCAT_HOME2=/usr/local/tomcat/tomcat2/apache-tomcat-8.5.45</span><br></pre></td></tr></table></figure>

<p>最后    esc +   :wq    保存退出，source /etc/profile  配置立即生效。</p>
<h2 id="修改tomcat1-2中的server-xml文件"><a href="#修改tomcat1-2中的server-xml文件" class="headerlink" title="修改tomcat1/2中的server.xml文件"></a>修改tomcat1/2中的server.xml文件</h2><p>tomcat1：修改tomcat1的server.xml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、修改Server prot 默认为8005－－》修改为8001</span><br><span class="line"></span><br><span class="line">&lt;Server port=&quot;8001&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class="line">  &lt;!-- Security listener. Documentation at /docs/config/listeners.html</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改Connector port HTTP/1.1  默认为8080－－》修改为8081</span><br><span class="line"></span><br><span class="line">&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">connectionTimeout=&quot;20000&quot;</span><br><span class="line">redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、修改Connector port AJP/1.3 默认为8009－－》修改为8011</span><br><span class="line"></span><br><span class="line">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;Connector port=&quot;8011&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>同样，修改tomcat2的server.xml文件，3个端口号分别修改为8002，8082，8012。</p>
<h2 id="修改tomcat1-2中的startup-sh-和-shutdown-sh文件"><a href="#修改tomcat1-2中的startup-sh-和-shutdown-sh文件" class="headerlink" title="修改tomcat1/2中的startup.sh 和 shutdown.sh文件"></a>修改tomcat1/2中的startup.sh 和 shutdown.sh文件</h2><p>tomcat1：修改tomcat1中bin下startup.sh 和 shutdown.sh 两个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、tomcat1中bin下startup.sh</span><br><span class="line">命令： vi startup.sh</span><br><span class="line">加入：</span><br><span class="line">export CATALINA_BASE=$CATALINA_BASE1</span><br><span class="line">export CATALINA_HOME=$CATALINA_HOME1</span><br><span class="line">export TOMCAT_HOME=TOMCAT_HOME1</span><br><span class="line"></span><br><span class="line">2、tomcat1中bin下shutdown.sh</span><br><span class="line">命令： vi shutdown.sh</span><br><span class="line">加入：</span><br><span class="line">export CATALINA_BASE=$CATALINA_BASE1</span><br><span class="line">export CATALINA_HOME=$CATALINA_HOME1</span><br><span class="line">export TOMCAT_HOME=TOMCAT_HOME1</span><br></pre></td></tr></table></figure>

<p>tomcat2：修改tomcat3中bin下startup.sh 和 shutdown.sh 两个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、tomcat2中bin下startup.sh</span><br><span class="line">命令： vi startup.sh</span><br><span class="line">加入：</span><br><span class="line">export CATALINA_BASE=$CATALINA_BASE2</span><br><span class="line">export CATALINA_HOME=$CATALINA_HOME2</span><br><span class="line">export TOMCAT_HOME=TOMCAT_HOME2</span><br><span class="line"></span><br><span class="line">2、tomcat2中bin下shutdown.sh</span><br><span class="line">命令： vi shutdown.sh</span><br><span class="line">加入：</span><br><span class="line">export CATALINA_BASE=$CATALINA_BASE2</span><br><span class="line">export CATALINA_HOME=$CATALINA_HOME2</span><br><span class="line">export TOMCAT_HOME=TOMCAT_HOME2</span><br></pre></td></tr></table></figure>

<h2 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h2><p>和之前MySQL开放防火墙3306端口操作一样。</p>
<p>【1】查看目前防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>

<p>【2】开放3306端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=8081/tcp	//8082同理</span><br></pre></td></tr></table></figure>

<p>【3】重启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service firewalld restart</span><br></pre></td></tr></table></figure>

<h2 id="开启并测试"><a href="#开启并测试" class="headerlink" title="开启并测试"></a>开启并测试</h2><p>在相应bin目录下分别运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh startup.sh	//关闭为shutdown.sh</span><br></pre></td></tr></table></figure>

<p>然后在远程浏览器地址栏输入:　ip:port，比如192.168.1.152:8081或192.168.1.152:8082弹出Tomcat页面即说明成功，测试成功记得关闭服务器。</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>TomcatJDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb2</title>
    <url>/2019/09/15/2019-09-15-JavaWeb2/</url>
    <content><![CDATA[<blockquote>
<p>动态资源分为Servlet和JSP，前者是基础。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Sun公司在其API中提供了一个Servlet接口，用户若想开发一个动态web资源（即开发一个java程序向浏览器输出数据），需要完成以下两个步骤：</p>
<ul>
<li>编写一个Java类，实现Servlet接口；</li>
<li>把开发好的Java类部署到web服务器；</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>如同人一样，六岁上学，十八岁上大学，三十岁结婚，六十岁退休……这些事件是和人这个对象的生命周期相关的，到了某个特定时间就会做。同样，Servlet中有些方法和Servlet的生命周期也是相关的，文档中原文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This interface defines methods to initialize a servlet, to service requests, and to remove a servlet from the server. These are known as life-cycle methods and are called in the following sequence: </span><br><span class="line"></span><br><span class="line">1. The servlet is constructed, then initialized with the init method. </span><br><span class="line">2. Any calls from clients to the service method are handled. </span><br><span class="line">3. The servlet is taken out of service, then destroyed with the destroy method, then garbage collected and finalized.</span><br></pre></td></tr></table></figure>

<p>也就是初始化init()、响应请求service()、移除destory()这些方法在某个特定时刻必定会执行。具体来说，客户端第一次访问web资源时会创建一个servlet对象，随后init方法会完成对象的初始化，servlet对象不会随着此次访问结束而摧毁，而是留于内存中，客户端访问调用service方法，调用service方法时先创建request对象和response对象，直至关闭服务器或者web应用从服务器删除才会调用servlet的destory()方法。</p>
<p><img src="https://i.loli.net/2019/09/18/J7SmpFgCARqaV4s.png" alt=""></p>
<h2 id="初试"><a href="#初试" class="headerlink" title="初试"></a>初试</h2><ol>
<li>在tomcat中新建一个servlettest应用，在应用中新建一个WEB-INF/classes目录；</li>
<li>在classes目录中新建一个FirstServlet.java</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast;</span><br><span class="line">import java.io.*;</span><br><span class="line">import javax.servlet.*;</span><br><span class="line"></span><br><span class="line">public class FirstServlet extends GenericServlet &#123;</span><br><span class="line">	public void service(ServletRequest req,ServletResponse res) throws ServletException,java.io.IOException</span><br><span class="line">	&#123;</span><br><span class="line">		OutputStream out = res.getOutputStream();</span><br><span class="line">		out.write(&quot;hello world&quot;.getBytes());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>进入classes文件夹，进行编译，但需先导入jar包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set classpath=%classpath%;E:\apache-tomcat-8.5.45\lib\servlet-api.jar</span><br></pre></td></tr></table></figure>

<p>再进行编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -d . FirstServlet.java</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写配置文件，在WEB-INF目录下新建web.xml，配置servlet对外访问路径</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line">    version=&quot;3.1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;cn.itcast.FirstServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/FirstServlet&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动服务器，浏览器地址栏输入<a href="http://localhost:8080/servlettest/FirstServlet即可。" target="_blank" rel="noopener">http://localhost:8080/servlettest/FirstServlet即可。</a></li>
</ol>
<h2 id="在Eclipse中初始"><a href="#在Eclipse中初始" class="headerlink" title="在Eclipse中初始"></a>在Eclipse中初始</h2><p>参考这几个博客：</p>
<ol>
<li><a href="https://blog.csdn.net/ldw4033/article/details/18313281" target="_blank" rel="noopener">https://blog.csdn.net/ldw4033/article/details/18313281</a></li>
</ol>
<p>这篇介绍的最基本的，截至2.3都是没问题的，但是按照他的方法启动有些问题，浏览器一直404，也可能是自己启动方法不对；</p>
<ol start="2">
<li><a href="https://blog.csdn.net/u014079773/article/details/51397850" target="_blank" rel="noopener">https://blog.csdn.net/u014079773/article/details/51397850</a></li>
</ol>
<p>这篇主要参考设置服务器，也就是第10项；</p>
<ol start="3">
<li><a href="https://www.cnblogs.com/SamWeb/p/7627044.html" target="_blank" rel="noopener">https://www.cnblogs.com/SamWeb/p/7627044.html</a></li>
</ol>
<p>这篇主要参考最后总结修改class文件生成路径部分；</p>
<ol start="4">
<li><p>参考以上，最后右击项目，Run As=&gt;Run on Server，成功。</p>
</li>
<li><p>但是有一个问题，在工程的web.xml下也没有对servlet进行配置，如何成功的呢？这里存疑。</p>
<p>（找到了！！！在servlet3.0后，eclipse中开发服务器的时候，Eclipse不会自动在web.xml中生成该Servlet对应的mapping信息，而是在Servlet代码中加入注解@WebServlet。）</p>
</li>
</ol>
<h1 id="Servlet接口实现类"><a href="#Servlet接口实现类" class="headerlink" title="Servlet接口实现类"></a>Servlet接口实现类</h1><p>Servlet接口Sun公司定义了两个默认实现类，分别为：GenericServlet和HttpServlet，前者就是之前讲过的，后者指能够处理HTTP请求的servlet，它在原有接口上添加了一些与HTTP协议处理方法，它比servlet接口的功能更为强大，因此在开发过程中，通常应该继承这个类，在刚才Eclipse自动创建servlet对象中也是继承的这个类。</p>
<p>HttpServlet在实现Servlet接口时，覆写了service方法，该方法体内的代码会自动判断用户的请求方式，如为GET请求，则调用doGet方法；如为POST请求，则调用doPost方法，因此，在实际开发中，通常只需要覆写这两种方法，而不去覆写service方法。</p>
<h1 id="Servlet的一些细节"><a href="#Servlet的一些细节" class="headerlink" title="Servlet的一些细节"></a>Servlet的一些细节</h1><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>这部分内容其实已经不需要了，但是为了深入了解，还是在此记录，简单学习一下。</p>
<p>由于客户端是通过URL地址访问web服务器中的资源，所以Servlet程序若想被外界访问，必须把servlet程序映射到一个URL地址上，这个工作在web.xml文件中使用&lt; servlet &gt;元素和&lt; servlet-mapping &gt;元素完成。</p>
<p>&lt; servlet &gt;元素用于注册Servlet，它包含两个主要的元素：&lt; servlet-name &gt;和&lt; servlet-class &gt;，分别用于设置Servlet的注册名称和Servlet的完整类名。</p>
<p>&lt; servlet-mapping &gt;元素用于映射一个已注册的Servlet的一个对外访问路径，也就是说同一个Servlet可以被映射到多个URL上，每一个&lt; servlet-mapping &gt;包含两个子元素：&lt; servlet-name &gt;和&lt; url-pattern &gt;，分别用于指定Servlet的注册名称和Servlet的对外访问路径。</p>
<p><img src="https://i.loli.net/2019/09/19/kSoKL5EMvOy6AWq.png" alt=""></p>
<p>如果在&lt; servlet &gt;元素中配置了一个&lt; load-on-startup &gt;元素，那么web应用程序在启动时，就会装载并创建Servlet的实例对象以及调用Servlet实例对象的init()方法，&lt; load-on-startup &gt;2&lt; /load-on-startup &gt;中的数字代表创建的优先级，正整数越小代表优先级越高。</p>
<h2 id="Servlet引擎"><a href="#Servlet引擎" class="headerlink" title="Servlet引擎"></a>Servlet引擎</h2><p>需要说明的是，Servlet是一个供其他Java程序调用的Java类，它不能独立运行，它的运行完全由Servlet引擎来控制和调度。这里的Servlet引擎其实就是调用它的其他Java程序，也就是web服务器。</p>
<h2 id="缺省Servlet"><a href="#缺省Servlet" class="headerlink" title="缺省Servlet"></a>缺省Servlet</h2><p>如果某个Servlet的映射路径仅仅为一个正斜杠/，那么这个Servlet就成为当前web应用的缺省Servlet。</p>
<p>凡是在web.xml文件中找不到匹配的&lt; servlet-mapping &gt;元素的URL，它们的访问请求都将交给缺省Servlet处理，也就是说，缺省Servlet用于处理其他Servlet都不处理的访问请求。</p>
<p>当访问Tomcat服务器中某个静态HTML文件或者图片时，实际上是在访问这个缺省Servlet。也就是说你在浏览器中输入动态web资源也好，静态web资源也好，其实浏览器客户端都交给了Servlet，只不过输入静态web资源，例如访问xxxxxxxx/a.html，这个a.html资源并没有在&lt; servlet-mapping &gt;中进行映射，所以调用缺省Servlet，缺省Servlet寻找同名的a.html进行显示，若缺省Servlet也找不到，则返回404界面。</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Webtest extends HttpServlet &#123;</span><br><span class="line">	int i = 0;</span><br><span class="line">	protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		i++;</span><br><span class="line">		try&#123;</span><br><span class="line">			Thread.sleep(1000*10);</span><br><span class="line">		&#125;catch(InterruptedException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		response.getOutputStream().write((i+&quot;&quot;).getBytes());</span><br><span class="line">	&#125;</span><br><span class="line">	protected void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设有两个用户，第一个用户的页面应该输出1，但是假如在该用户线程休眠过程中有另一个用户访问，则最后输出2，这样就涉及到了线程安全，当然，可以通过synchronized()方法来保证线程安全</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">synchronized(this)&#123;</span><br><span class="line">		i++;</span><br><span class="line">		try&#123;</span><br><span class="line">			Thread.sleep(1000*10);</span><br><span class="line">		&#125;catch(InterruptedException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		response.getOutputStream().write((i+&quot;&quot;).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，很显然在实际开发中，不可能这么做，否则一个用户访问其他用户只能等待。还有另外一种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Webtest extends HttpServlet implements SingleThreadModel</span><br></pre></td></tr></table></figure>

<p>SingleThreadModel接口中没有定义任何内容，称为标记接口，相当于只是给该类贴了一个线程安全的标签，这种方法在servlet 2.4之后就已经Deprecated。</p>
<p>线程安全问题很大部分是由实例变量造成的，只要在Servlet里面的任何方法里面都不使用实例变量，那么该Servlet就是线程安全的。<strong>所以，在Servlet中避免使用实例变量是保证Servlet线程安全的最佳选择。</strong></p>
<p>Java 内存模型中，方法中的临时变量是在栈上分配空间，而且每个线程都有自己私有的栈空间，所以它们不会影响线程的安全。</p>
<h1 id="Servlet对象"><a href="#Servlet对象" class="headerlink" title="Servlet对象"></a>Servlet对象</h1><p>服务器在创建Servlet时，除了有request、response对象，还有ServletConfig、ServletContext、Session、Cookie等对象。</p>
<h2 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h2><p>在Servlet配置文件中，可以在&lt; servlet &gt;元素中使用一个或多个&lt; init-param &gt;标签为Servlet配置一些初始化参数，配置之后，web容器在创建Servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用init()方法时，将ServletConfig对象传递给servlet，进而，开发人员通过ServletConfig对象就可以得到当前servlet的初始化参数信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;date&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;2019&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>

<p>java程序中调用即可得到“2019”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String value = this.getServletConfig().getInitParameter(&quot;data&quot;);</span><br></pre></td></tr></table></figure>

<p>在实际开发中，例如字符码表、要连接的数据库以及读取哪个配置文件等不适合在程序中显示，就用到了ServletConfig。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;charset&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;url&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;jdbc:mysql://localhost:3306/test&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;username&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;root&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;password&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;root&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">	&lt;param-name&gt;config&lt;/param-name&gt;</span><br><span class="line">	&lt;param-value&gt;/struts-config.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><p> web容器在启动时，会为每个web应用都创建一个ServletContext对象，ServletConfig对象中维护ServletContext对象的引用，可以通过ServletConfig().ServletContext()方法获得ServletContext对象。、</p>
<p>由于一个web应用中所有Servlet共用一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象实现通讯。ServletContext对象通常也称之为context域对象。</p>
<p>在实际开发中，ServletContext具体有以下几个应用：</p>
<ul>
<li>多个servlet之间实现数据共享，一个写入，其他就可以读到；</li>
<li>获取WEB应用的初始化参数，和上边ServletConfig设置初始化参数类似，只不过这里设置的是整个web应用，使用&lt; context-param &gt;</li>
<li>实现servlet转发，关于转发和重定向的区别，打个比方，你找我借钱，我让你去找他借，这是重定向；你找我借钱，我帮你去找他借，这是转发。在开发中，转发用的很多，比如servlet的内容肯定要转发，让html去排版再在浏览器显示。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RequestDispatcher rd = this.getServletContext().getRequestDispatcher(&quot;/1.jsp&quot;);</span><br><span class="line">rd.forward(request，response);</span><br></pre></td></tr></table></figure>

<ul>
<li>读取资源文件</li>
</ul>
<p>假设读取应用下的db.properties：(常见的两种配置文件，如果配置文件内数据有关联，则用xml，否则properties)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url=jdbc:mysql://localhost:3306/test</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure>

<p>在servlet中读取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream in = this.getServletContext().getResourceAsStream(&quot;/WEB-INF/classes/db.properties&quot;);</span><br><span class="line">//不能使用传统方法</span><br><span class="line">//FileInputStream in = new FileInputStream(&quot;classes/db.properties&quot;);</span><br><span class="line">//因为执行这行代码的是JVM，也就是说相对路径是以Tomcat下startup.bat来看的，此时并没有classes目录</span><br><span class="line">//要想使用，应该采用如下方法;</span><br><span class="line">//String path = this.getServletContext().getRealPath(&quot;/WEB-INF/classes/db.properties&quot;);</span><br><span class="line">//FileInputStream in = new FileInputStream(path);</span><br><span class="line">Properties props = new properties();	//map</span><br><span class="line">props.load(in);		//将in的内容装载到props</span><br><span class="line"></span><br><span class="line">String url = props.getProperty(&quot;url&quot;);</span><br><span class="line">String username = props.getProperty(&quot;username&quot;);</span><br><span class="line">String password = props.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(url);</span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(password);</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">&gt;&gt;jdbc:mysql://localhost:3306/test</span><br><span class="line">&gt;&gt;root</span><br><span class="line">&gt;&gt;root</span><br></pre></td></tr></table></figure>

<p>如果读取资源文件的不是servlet，而是普通的Java文件，就只能通过<a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html" target="_blank" rel="noopener">类加载器</a>，例如在dao读取db.properties:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#servlet</span><br><span class="line">……………………</span><br><span class="line">UserDao dao = new UserDao();</span><br><span class="line">dao.update();</span><br><span class="line">……………………</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#UserDao.java</span><br><span class="line">package cn.itcast.dao;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class UserDao(</span><br><span class="line">	public void update() throws IOException &#123;</span><br><span class="line">		InputStream in = UserDao.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br><span class="line">		Properties props = new properties();	</span><br><span class="line">		props.load(in);		</span><br><span class="line">		</span><br><span class="line">		String url = props.getProperty(&quot;url&quot;);</span><br><span class="line">		String username = props.getProperty(&quot;username&quot;);</span><br><span class="line">		String password = props.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">		System.out.println(url);</span><br><span class="line">		System.out.println(username);</span><br><span class="line">		System.out.println(password);</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>扩展一：</p>
<p>类加载器读取的文件不能太大，因为类加载器加载的文件直接存在内存中，文件太大会导致内存溢出，JVM爆掉。</p>
<p>扩展二：</p>
<p>UserDao.java中除了update方法还可能有find、delete等方法，但是这写方法只加载一次就可以，不用每个方法里都加载，所以可以写成静态代码块，实际开发中常这样写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserDao(</span><br><span class="line">	private static Properties dbconfig = new Properties();</span><br><span class="line">	static &#123;</span><br><span class="line">		try&#123;</span><br><span class="line">			InputStream in = UserDao.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br><span class="line">			dbconfig.load(in);		</span><br><span class="line">		&#125;catch (Exception e)&#123;</span><br><span class="line">			throw new ExceptionInInitializerError(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public void update() throws IOException &#123;</span><br><span class="line">			System.out.println(dbconfig.getProperty(&quot;url&quot;));</span><br><span class="line">	&#125;</span><br><span class="line">	public void find()  &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p>扩展三：</p>
<p>这样的话，启动服务器后，在db.properties中进行修改，这边是无法更新的，因为类加载加载到内存中，要想更新，只能重启服务器，显然不是想要的，所以应该如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserDao(</span><br><span class="line">	public void update() throws IOException &#123;</span><br><span class="line">	//通过类装载的方式得到资源文件的位置，再通过传统方式读取资源文件的数据，这样可以读取到更新后的数据</span><br><span class="line">			String path = UserDao.class.getClassLoader().getResource(&quot;db.properties&quot;).getPath();</span><br><span class="line">			FileInputStream in = new FileInputStream(path);</span><br><span class="line">			Properties dbconfig = new Properties();</span><br><span class="line">			dbconfig.load(in);</span><br><span class="line">			System.out.println(dbconfig.getProperty(&quot;url&quot;));</span><br><span class="line">	&#125;</span><br><span class="line">	public void find()  &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>





<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb1</title>
    <url>/2019/09/10/2019-09-10-JavaWeb1/</url>
    <content><![CDATA[<h1 id="Web开发相关概念"><a href="#Web开发相关概念" class="headerlink" title="Web开发相关概念"></a>Web开发相关概念</h1><ol>
<li><p>静态Web资源开发技术：Html</p>
<p>动态Web资源开发技术：JSP/Servlet、ASP、PHP等，在Java中，动态web资源开发统称为JavaWeb。</p>
</li>
<li><p>常见Web服务器：WebLogic，目前应用最广泛，商业；WebSphere，IBM，商业；Tomcat，APache，免费；</p>
</li>
<li><p>一个Web应用由多个静态Web资源和多个动态Web资源组成，如html、css、js文件以及Jsp文件、java程序、支持jar包和配置文件等；</p>
</li>
<li><p>Web应用开发好之后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为虚拟目录的映射，<a href="https://tomcat.apache.org/tomcat-8.5-doc/config/context.html#Defining_a_context" target="_blank" rel="noopener">详情</a>，目前已经不推荐直接在server.xml中直接修改 &lt; Context &gt;，例如直接写入&lt; Context path=“/login” docBase=”C:\login” /&gt;，这样直接浏览器输入<a href="http://localhost:8080/login/1.html" target="_blank" rel="noopener">http://localhost:8080/login/1.html</a> 就可以直接访问C盘login文件夹下的1.html资源了，但是这样一旦修改server.xml，服务器就必须重启；</p>
</li>
<li><p>补充小知识：互联网上一些协议及常用的端口：http-80;smtp-25;pop3-110;ftp-23;https-443;mysql-3306;oracle-1521;</p>
</li>
</ol>
<h1 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h1><h2 id="服务器目录结构"><a href="#服务器目录结构" class="headerlink" title="服务器目录结构"></a>服务器目录结构</h2><p>bin：存放启动和关闭Tomcat的脚本文件；</p>
<p>conf：存放Tomcat服务器的各种配置文件，最重要的是server.xml；</p>
<p>lib：存放Tomcat服务器支持的jar包；</p>
<p>logs：存放Tomcat服务器的日志文件，若启动不成功无法通过控制台查看问题的话可查看日志文件；</p>
<p>temp：存放Tomcat服务器产生的临时文件；</p>
<p>webapps：web应用所在目录，即供外界访问的web资源的存放目录，对于开发人员最重要的目录；</p>
<p>work：存放Tomcat服务器的工作目录，JSP需要用到；</p>
<h2 id="web应用的组成结构"><a href="#web应用的组成结构" class="headerlink" title="web应用的组成结构"></a>web应用的组成结构</h2><p>webapps下的web应用需要严格按照以下存放规则</p>
<p><img src="https://i.loli.net/2019/09/10/T5ry6kOdICmjUXs.png" alt=""></p>
<p>web.xml文件是整个web应用中最重要的配置文件，必须放在WEB-INF目录中，在开发web应用时，但凡涉及到对web应用中某个web资源的配置，往往都在web.xml中进行设置。例如把某个资源配置成网站首页，直接参考Tomcat中自带的Web.xml文件，取头取尾即可。</p>
<p>应用发布到服务器上时需要打包成war包，这样服务器会自动解析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//进入应用目录</span><br><span class="line">jar -cvf xxx.war xxx</span><br></pre></td></tr></table></figure>

<p>打包后的war文件直接放到服务器的webapps目录，会看到自动解析出xxx文件。</p>
<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>所谓配置虚拟主机，就是在tomcat服务器中配置一个网站，一个tomcat服务器中可以放置多个文档，在Web服务器中配置一个网站，需使用Host元素在server.xml进行配置，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Host name=&quot;www.google.com&quot; appBase=&quot;C:\login&quot;&gt;&lt;/Host&gt;</span><br></pre></td></tr></table></figure>

<p>但是配置的主机要想被外界访问，必须在DNS进行注册IP，很显然，<a href="http://www.google.com是不能再被注册的，但是浏览器在询问DNS之前会先询问Windows系统，这个主机名是否在系统中注册IP，所以可以修改C:\Windows\System32\drivers\etc下的hosts文件，将本机IP映射成为www.google.com，这样本机浏览器访问www.google.com就可以访问自己C盘下的login应用。" target="_blank" rel="noopener">www.google.com是不能再被注册的，但是浏览器在询问DNS之前会先询问Windows系统，这个主机名是否在系统中注册IP，所以可以修改C:\Windows\System32\drivers\etc下的hosts文件，将本机IP映射成为www.google.com，这样本机浏览器访问www.google.com就可以访问自己C盘下的login应用。</a></p>
<h2 id="配置https连接器"><a href="#配置https连接器" class="headerlink" title="配置https连接器"></a>配置https连接器</h2><p>主要用于表单等提交时的加密，设计密码学尤其是非对称加密，这部分略过。</p>
<p>首先需要为网站生产一份数字证书（公钥），cmd命令行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias tomcat -keyalg RSA</span><br></pre></td></tr></table></figure>

<p>系统将产生的数字证书保存到密钥库。然后将这份密钥库文件拷贝到Tomcat安装目录下的conf文件夹下，之后在server.xml中进行配置，也就是使网站自动提取密钥库中的密钥给网站使用用户。具体配置可以打开server.xml文件中关于8443端口的部分，这部分视频使用的方法在Tomcat官方文档中显示deprecated，故不记录，另外，这里配置的只是单向加密连接器，实际开发中应配置https双向加密连接器。</p>
<h2 id="Tomcat管理器"><a href="#Tomcat管理器" class="headerlink" title="Tomcat管理器"></a>Tomcat管理器</h2><p>在官方文档首先有Manger APP，点击需要用户名密码。这个在复制文件中可以进行配置，打开tomcat-users.xml可以看到几个注释的用户名密码，可以用这几个或者自己再配置。注意默认正好无权限，需要加一个manager的角色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,manager&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;both&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;role1&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;role1&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>客户端连上web服务器之后，若想要获得web服务器中某个web资源，需遵守一定的通讯格式，HTTP协议用于定义客户端与web服务器通讯的格式，时TCP/IP协议的一个应用层协议。</p>
<p>可以使用windows自带的telnet程序连上web服务器并使用HTTP协议获取某个页面或者浏览器的一些插件也可以实现查看HTTP的请求和响应。</p>
<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>客户端连上服务器后，向服务器请求某个web资源，称之为客户端向服务器发送了一个HTTP请求，一个完整的HTTP请求包括：一个请求行、若干请求头、以及实体内容。请求行用于描述客户端的请求方式、请求的资源名称以及使用的HTTP协议版本号；请求头用于描述客户端请求哪台主机以及客户端的一些环境信息等；实体内容为表单请求的数据等。</p>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行中常用的请求方式有GET和POST，如果用户没有设置，默认都是GET，用户想把请求方式改为POST，可通过更改表单的提交方式实现。GET在请求的URL地址后以?的形式带上交给服务器的数据，多个数据之间以&amp;进行分隔，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /mail/1.html?name=abc&amp;password=123456 HTTP/1.1</span><br></pre></td></tr></table></figure>

<p>其数据容量通常不能超过1K，POST传送的数据量无限制。</p>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>Accept：用于告诉服务器，客户机支持的数据类型；</p>
<p>Accept-Charset：用于告诉服务器，客户机采用的编码；</p>
<p>Accept-Encoding：用于告诉服务器，客户机支持的数据压缩格式；</p>
<p>Accept-Language：用于告诉服务器，客户机的语言环境；</p>
<p>Host：客户机通过这个头告诉服务器，想访问的主机名；</p>
<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间；</p>
<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的（主要用于防盗链）；</p>
<p>User-Agent：客户机通过这个头告诉服务器，客户机的软件环境；</p>
<p>Cookie：客户机通过这个头可以向服务器带一点数据；</p>
<h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>一个HTTP响应代表服务器向客户端回送的数据。HTTP响应包括：一个状态行、若干响应头、以及实体内容。状态行用于描述服务器对于请求的处理结果；响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据；实体内容为服务器向客户端回送的数据。</p>
<h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>状态码用于表示服务器对请求的处理结果，它是一个三位的十进制数，响应状态码分为三类：</p>
<p><img src="https://i.loli.net/2019/09/15/gyEoDF23zGwltV9.png" alt=""></p>
<p>例如302：服务器告诉客户端去其他地址找；304/307：服务器告诉客户端去找缓存；404：服务器告诉客户端资源找不到；403：服务器告诉客户端没有权限访问该资源；</p>
<p>响应头</p>
<p>Location：这个头配合302状态码使用，用于告诉客户端找谁，实现请求重定向；</p>
<p>Server：通过这个头，告诉浏览器服务器的类型；</p>
<p>Context-Type：通过这个头，告诉浏览器回送数据的类型，不同的文件类型对应的具体书写格式可在Tomcat/conf/web.xml中查看；</p>
<p>Refresh：通过这个头，服务器告诉浏览器多久刷新一次；</p>
<p>Content-Disposition：通过这个头，服务器告诉浏览器以下载方式打开数据；</p>
<p>ETag：缓存相头的头；</p>
<p>Expirse：通过这个头，服务器告诉浏览器把回送的资源缓存多长时间，-1或0代表不缓存；</p>
<p>Set-Cookie、Cache-Control、Pragma等其他一些头和缓存相关；</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>XML</title>
    <url>/2019/09/09/2019-09-09-XML/</url>
    <content><![CDATA[<blockquote>
<p>XML语言出现的根本目标在于描述在现实生活中经常出现的有关系的数据。在XML语言中，它允许用户自定义标签。除了用于保存有关系的数据，还经常用作软件配置文件，以描述程序模块之间的关系。</p>
</blockquote>
<h1 id="XML内容"><a href="#XML内容" class="headerlink" title="XML内容"></a>XML内容</h1><ul>
<li><p>文档申明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>元素</p>
<p>XML元素指的就是XML文件中出现的标签，一个标签分为开始标签和结束标签，格式良好的XML文档必须有且仅有一个根标签，其他标签都是这个根标签的子孙标签。</p>
<p>由于在XML中，空格和换行都作为原始内容被处理，所以，在编写XML文件时，使用换行和缩进等方式让原文件内容清晰可读的习惯可能要被迫改变。</p>
</li>
<li><p>属性</p>
<p>一个标签可以有多个属性，每个属性都有它自己名称和取值，在XML中，标签属性所代表的信息也可以被改成用子元素的形式来描述，例如下面两种写法是一样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>text<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注释</p>
<p>需要注意XML声明之前不能有注释。</p>
</li>
<li><p>CDATA区</p>
<p>在编写XML文件时，有些内容可能不想让解析引擎解析执行，而是当作原始数据处理。在这种情况下，就把这些内容放在CDATA区里，对于CDATA区域里的内容，XML解析程序不会处理，而是直接原封不动的输出。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">x&lt;![CDATA[</span><br><span class="line">	内容</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理指令</p>
</li>
</ul>
<p>处理指令用来指挥解析引擎如何解析XML文档内容，处理指令必须以&lt; ? 开头，以? &gt;作为结尾，XML声明语句是最常见的处理指令。另外，在XML文档中可以使用xml-stylesheet指令通知XML解析引擎，应用css文件显示xml文档内容。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/css" href="1.css"?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h1><p>在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束。常用的约束技术包括XML DTD和XML Schema</p>
<h2 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h2><p>DTD:Document Type Definition，举例：</p>
<p>book.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 书架 SYSTEM &quot;book.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>book.dtd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT 书架（书+）&gt;</span><br><span class="line">	&lt;!ELEMENT 书（书名，作者，售价）&gt;</span><br><span class="line">	&lt;!ELEMENT 书名（#PCDATA）&gt;</span><br><span class="line">	&lt;!ELEMENT 作者（#PCDATA）&gt;</span><br><span class="line">	&lt;!ELEMENT 售价（#PCDATA）&gt;</span><br></pre></td></tr></table></figure>

<p>查看一份XML文档是否遵循对应的DTD约束，可以使用Eclipse进行校验，DTD文件应该使用UTF-8或者Unicode。</p>
<p>具体DTD的语法在此略过。</p>
<h2 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h2><ul>
<li><p>XML Schema符合XML语法，也就是说它本身就是一个XML文档，但它扩展名为.xsd，同时，它也必须有一个根节点，名称为chema；</p>
</li>
<li><p>XML Schema对<strong>名称空间</strong>支持得很好；</p>
</li>
<li><p>XML Schema比DTD支持更多的数据类型，并支持用户自定义新的数据类型；</p>
</li>
<li><p>XML Schema定义约束的能力非常强大，可以对XML实例文档作出细致的语义限制；</p>
</li>
<li><p>XML Schema不能像DTD一样定义实体，比DTD更复杂，但已成为W3C标准，正逐步取代DTD;</p>
</li>
<li><p>编写一个XML Schema约束文档之后，需要把这个文件中声明的元素绑定到一个URI地址上，这个地址，也就是所谓的名称空间，以后XML文件就可以通过这个URL来告诉解析引擎，xml文档中编写的元素来自哪里，被谁约束。</p>
</li>
<li><p>关于名称空间：每个约束模式文档都可以被赋予一个唯一的名称空间，用一个唯一的URI表示。在XML文件中书写标签时，可以通过名称空间声明（xmlns）,来声明当前编写的标签来自哪个Schema约束文档。如：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;gsynf:书架 xmlns:gsynf=&quot;http://gsynf.github.io&quot;&gt;</span><br><span class="line">	&lt;gsynf:书&gt;……&lt;/gsynf:书&gt;</span><br><span class="line">&lt;/gsynf:书架&gt;</span><br></pre></td></tr></table></figure>

<p>此处使用gsynf来指向声明的名称，方便后面对名称空间的引用。</p>
<p>注意：名称空间的名字语法 很容易让人混淆，尽管以http://开始，那个URL并不指向一个包含模式定义的文件。事实上，这个URL：http ://gsynf.github.io 根本没有指向任何文件，只是一个分配的名字。</p>
<p>为了在一个XML文档中声明它所遵循的Schema文件的具体位置，通常需要在Xml文档中的根节点使用schemaLocation属性来指定，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gsynf:书架</span> <span class="attr">xmlns:gsynf</span>=<span class="string">"http://gsynf.github.io"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://gsynf.github.io"</span> <span class="attr">book.xsd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>schemaLocation此属性有两个值，第一个值是需要的命名空间，第二个值是供命名空间使用的XML Schema文件位置。</p>
<h1 id="XML编程"><a href="#XML编程" class="headerlink" title="XML编程"></a>XML编程</h1><p>所谓XML编程，其实就是CRUD（create,read,update,delete）。</p>
<h2 id="XMl解析方式"><a href="#XMl解析方式" class="headerlink" title="XMl解析方式"></a>XMl解析方式</h2><p>DOM：W3C官方推荐的解析方式；</p>
<p>SAX：社区事实上的标准；</p>
<p>XML解析开发包：Jaxp(sun)、Jdom、dom4j</p>
<h3 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h3><p>把XML中的节点均变为对象，标签成为Element对象，文本成为Text对象，属性成为Attribute对象，然后根据这些对象之间的关系生成DOM树。DOM解析对增删改查比较容易，DOM解析对内存资源占用较大，不适用于较大的文档对象。</p>
<p>以JAXP为例，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建解析工厂</span></span><br><span class="line">DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="comment">//2.得到dom解析器</span></span><br><span class="line">DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line"><span class="comment">//3.解析xml文档，得到代表文档的document</span></span><br><span class="line">Document document = builder.parse(<span class="string">"src/book.xml"</span>);</span><br><span class="line"><span class="comment">//4.调用Document方法获取某个节点内容</span></span><br><span class="line">NodeList list = document.getElementsByTagName(<span class="string">"书名"</span>);</span><br><span class="line">Node node = list.item(<span class="number">1</span>);</span><br><span class="line">String content = node.getTextContent();</span><br><span class="line"><span class="comment">//5.对某个节点进行操作，例如增加一个属性</span></span><br><span class="line">Element price = document.creatElement(<span class="string">"售价"</span>);</span><br><span class="line">price.setTextContent(<span class="string">"59元"</span>);</span><br><span class="line">Element book = (Element) document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);<span class="comment">//把创建的节点挂到第一本书上</span></span><br><span class="line">book.appendChild(price);</span><br></pre></td></tr></table></figure>

<h3 id="SAX解析"><a href="#SAX解析" class="headerlink" title="SAX解析"></a>SAX解析</h3><p>从上向下读取，读取一行处理一行。所以对内存压力较小，解析速度快，但是只适合读取，不适合增删改查。</p>
<p>SAX采用事件处理的方式解析XML文档，利用SAX解析文档，涉及两个部分：解析器和事件处理器。</p>
<ul>
<li><p>解析器可以使用JAXP的API创建，创建出解析器之后，就可以指定解析器去解析某个XML文档</p>
</li>
<li><p>解析器采用SAX方式在解析某个XML文档时，只要解析到XML文档中的一个组成部分，都会调用事件处理器的一个方法，解析器在调用事件处理器的方法时，会把当前解析到的xml文档内容作为方法的参数传递给事件处理器；</p>
</li>
<li><p>事件处理器由程序员编写，通过事件处理器中方法的参数，就可以轻松得到sax解析器解析到的数据，从而决定如何对数据进行处理。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/09/10/6JRPor4UqTduI27.png" alt=""></p>
<p>以JAXP为例，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建解析工厂</span></span><br><span class="line">SAXParserFactory factory = SAXParseFactory.newInstance();</span><br><span class="line"><span class="comment">//2.得到解析器</span></span><br><span class="line">SAXParser sp = factory.newSAXParser();</span><br><span class="line"><span class="comment">//3.得到读取器</span></span><br><span class="line">XMLReader reader = sp.getXMLReader();</span><br><span class="line"><span class="comment">//4.设置内容处理器</span></span><br><span class="line">reader.SetContentHandler();</span><br><span class="line"><span class="comment">//5.读取xml文档</span></span><br><span class="line">reader.parse(<span class="string">"src/book.xml"</span>);</span><br></pre></td></tr></table></figure>

<p>除了JAXP，dom4j是一个简单、灵活的开放源代码的第三方库，使用接口和抽象基类，性能优异、功能强大，目前使用最多。</p>
<h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>快速定位需要找到的节点：</p>
<ul>
<li><p>如果路径以斜线/开始，表示到一个元素的绝对路径；</p>
</li>
<li><p>如果路径以双斜线//开始，表示选择文档中所有满足双斜线//之后规则的元素（无论层级关系）；</p>
</li>
<li><p>星号*表示选择所有由星号之前的路径所定位的元素；</p>
</li>
<li><p>方块中的表达式可以进一步指定元素，其中数字表示元素在选择集里的位置，而last()函数则表示选择集中的最后一个元素；</p>
</li>
<li><p>[@ATT]找到有特定属性的元素，还可以选择属性值[@ATT=‘att’];</p>
</li>
<li><p>……………………………………</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/AAA/BBB  找到AAA下的所有BBB</span><br><span class="line">//AAA/BBB  选择所有父元素是AAA的BBB元素</span><br><span class="line">/AAA/BBB/*  选择所有路径依附于/AAA/BBB的元素</span><br><span class="line">/AAA/BBB[1]  选择AAA的第一个BBB子元素</span><br><span class="line">//BBB[@name]  选择有name属性的BBB元素</span><br></pre></td></tr></table></figure>





<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java零散笔记</title>
    <url>/2019/09/05/2019-09-05-Java%E9%9B%B6%E6%95%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>Java学习内容较多，在此零散记录一些需要注意的地方，尤其是其他语言没有的东西，不作为系统学习Java的教程。</p>
</blockquote>
<ol>
<li><p>A obj = new A();，obj可以看作是内存对象中的一个对象（包括若干个数据）的句柄，在C/C++中，obj称为指针，在Java中成为Reference,需要注意的是对象比较庞大，所以对象赋值是Refenence赋值，也就是两个Reference会指向同一个东西，而如int等基本对象比较简单，他们的赋值是直接拷贝。</p>
</li>
<li><p>String是不可变对象，而StringBuffer和StringBuilder是可变对象。也就是使用StringBuilder append(任意类型)方法可以实现添加数据并返回对象本身。StringBuilder reverse（）同理，但是String没有这两个常用的方法，所以涉及到相互转换：通过toString()就可以实现把StringBuilder转换为String；反之，通过构造方法StringBuilder(String s)。</p>
</li>
<li><p>短路逻辑运算符<br>逻辑与&amp;，无论左边真假，右边都要执行；短路与&amp;&amp;，如果左边为真，右边执行，如果左边为假，右边短路不执行。<br>逻辑或与短路或同理。</p>
</li>
<li><p>成员变量在类中方法外，存放于堆内存，有默认的初始化值；而局部变量存在于方法内或方法声明上，存放于栈内存，没有默认初始化值，必须先定义，赋值，才能使用。</p>
</li>
<li><p>Java构造函数的名称必须和类名一样，且没有返回值，定义时不能有void，写了就成为了普通函数；Java有构造函数但是没有析构函数，也就是每个变量都有生命周期，它只能存储在离它最近的一对{}中，当变量被创建时，变量将占据内存；当变量消亡时，系统将回收内存。每个Java类必须有构造函数，如果没有显式的定义构造函数，Java编译器自动为该类产生一个空的无形参的构造函数。一个类可以有多个构造函数，只要形参列表不相同即可，和重载函数一样。</p>
</li>
<li><p>面向对象有一个法则：信息隐藏，也就是类的成员属性是私有的private，类的方法是共有的public，通过方法修改成员属性的值。外界对类成员的操作只能通过get和set方法，可以用Java IDE快速生成，如Eclipse中Source-Generate Getters and Setters可以自动快速地对类中的成员生产get和set方法，且遵循驼峰命名法。</p>
</li>
<li><p>this不仅可以负责指向本类中的成员变量和成员方法，还可以代替本类的构造方法。</p>
</li>
<li><p>在Java语言设计中，针对C++中方法指代不清的问题进行改进，特意强调了单根继承的原则，也就是每个类只能继承一个类。继承如果不写extends，Java都默认继承java.lang.Object类，也就是Java所有类都从java.lang.Object开始，构建出一个类型继承树，Object类里面默认就有clone、equals、hashCode、toString等方法。另外，每个子类的构造函数第一句话都默认调用父类的<strong>无参数构造函数</strong>super()，除非子类的构造函数第一句话是super，而且super语句必须放在第一条。</p>
</li>
<li><p>多态的作用：<br>(1)以统一的接口来操纵某一类中不同的对象的动态行为，每一个对象的行为由自己来决定；<br>(2)对象之间的解耦，基于接口，利用转型和多态，不影响真正方法的调用，可以将调用类和被调用类解耦。<br>多态中成员访问特点：<br>成员变量：编译看左边，执行看左边；成员方法：编译看左边，执行看右边。解释一下，以Animal a = new Cat()为例，假设Animal类中有变量age=20和方法“动物吃东西”，Cat类继承于Animal类，变量有age=40和name，方法有“猫吃鱼”和“猫捉老鼠”。此时a.age可以，输出的是20，a.name报错；a.eat()可以，输出“猫吃鱼”，a.play()报错。原因是因为成员方法有重写，但是成员变量没有。如果想使用a.play()。需要用到转型，上述Animal a = new Cat()是父类引用指向子类对象，称为向上转型，反之，父类引用转为子类对象称为向下转型，即Cat c = (Cat)a。</p>
</li>
<li><p>在Java中，一个没有方法体的方法应该被定义为抽象方法，使用abstract关键字，而类中如果有抽象方法，该类必须定义为抽象类。抽象类不能直接创建对象，创建对象参照多态的方法即可，但是抽象类的子类要不重写抽象类的方法，要不同样将自己定义为抽象类。</p>
</li>
<li><p>接口：新建Inferface，定义接口使用关键字interface，例如public interface Eating{…抽象方法…}再定义类实现方法需要用到关键字implement，例如public class Cat implement Eating{…重写方法…}，注意接口中定义的常量默认是被public static final修饰的，也就是默认静态常量；另外接口中没有构造方法，也没有非抽象方法。</p>
</li>
<li><p>权限修饰符：private/默认/protecte/public<br>状态修饰符：final/static</p>
<p><img src="https://i.loli.net/2019/09/10/jKMZB34fEyl1F27.png" alt=""></p>
</li>
<li><p>final关键字：final的类，不能被继承；父类中如果有final的方法，子类中不能改写此方法；final的变量，不能再次赋值（如果是基本类型的变量，不能修改其值；如果是对象实例，不能修改其指针，但是可以改值）<br>static变量只依赖于类存在，不依赖于实例对象存在，也就是如果有一个静态变量，那么一个类的所有对象实例都共享存储在一个共同的空间；static方法无需通过对象来引用，直接通过类名即可，在静态方法中，只能引用静态变量，且静态方法不能引用非静态方法。 </p>
</li>
<li><p>单例模式：保证一个类有且只有一个对象<br>-采用static来共享对象实例<br>-采用private构造函数，防止外界new操作</p>
</li>
<li><p>内部类：就是在一个类的内部再定义一个类。<br>格式：<br>public class 类名{</p>
<pre><code>修饰符 class 类名{
}</code></pre><p>}<br>内部类可以直接访问外部类的成员，包括私有；外部类想要访问内部类的成员，必须创建对象。<br>特殊：匿名内部类，也是局部内部类的一种，所以要写在外部类的方法中<br>new 类名或接口名() {</p>
<pre><code>重写方法；</code></pre><p>}；<br>可见匿名内部类的本质就是一个继承了该类或者实现了该接口的子类匿名对象。所以可以采取以下例子<br>Inter i = new Inter() {</p>
<pre><code>public void 方法名(){
…方法体…
}</code></pre><p>}；<br>i.方法名();</p>
</li>
<li><p>package<br>在Java类文件的第一句话给出包的名称，类似com.edu.nssc.PackageExample，在这里引用类的时候，必须采用全称引用，程序正文可以采用PackageExample短名称，而且必须严格放置在com/edu/nssc目录下。package name尽量唯一，因此常用域名逆序。</p>
</li>
<li><p>import<br>import必须全部放在package之后，定义类之前。</p>
</li>
</ol>
<ol start="18">
<li><p><img src="https://i.loli.net/2019/09/10/rKuGX5E1kBDwxml.png" alt=""></p>
<p>异常处理<br>(1)try{</p>
<pre><code>可能存在异常的代码；</code></pre><p>}catch(异常类名 变量名) {</p>
<pre><code>异常的处理代码；
如e.printStackTrace();System.out.println(e.getMessage());System.out.println(e.toString());等</code></pre><p>} finally {</p>
<pre><code>最终执行的模块；</code></pre><p>}<br>执行流程：程序从try里面的代码开始执行，出现异常会自动生成一个异常类对象提交给JVM，当JVM接收到提交时，会到catch中找匹配的异常，找到后进行异常的处理，因此catch块可以有多个，每个有不同的入口形参，当已发生的异常和某一个catch块中的形参类型一致，那么将执行该catch块中的代码，如果没有一个匹配，catch也不会被触发，最后都进入finally块。<br>(2)并不是所有的情况都有权限对异常进行处理，因此方法存在可能异常的语句，但不处理，需要使用throws来声明异常：throws 异常类名；这个格式放在方法的括号后面。</p>
<pre><code>(2.1)一个方法被覆盖，覆盖他的方法必须抛出相同的异常或者异常的子类；
(2.2)如果父类的方法抛出多个异常，那么重写的子类方法必须抛出那么异常的子类，也就是不能抛出新的异常；
(2.3)throws只是抛出或者说延后这个异常，并没有处理，处理还得用try…catch…</code></pre><p>(3)自定义异常：需要继承Exception类及其子类<br>-继承自Exception，就变成Checked Exception<br>-继承自RuntimeException，就变成Unchecked Exception<br>自定义异常重点在于构造函数：<br>-可以调用父类Exception的message构造函数<br>public 自定义Exception(){}<br>public 自定义Exception(String message){</p>
<pre><code>super(message);</code></pre><p>}<br>其他方法调用<br>public void 方法名() <strong>throws</strong> 自定义Exception {</p>
<pre><code>//throw new 自定义Exception();
**throw** new 自定义Exception(&quot;xxxxxxx&quot;);</code></pre><p>}<br>-可以自定义自己的成员变量</p>
</li>
<li><p>泛型：<br>它提供了编译时类型安全检测机制，该机制允许再编译时检测到非法的类型，它的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。换个说法，其实就是将类型由原来的类型参数化，然后再使用/调用时传入具体的类型。<br>泛型定义格式：<br>&lt;类型1，类型2，……&gt;：指定多种类型的格式，多种类型之间用逗号隔开，这里的类型可以看作是形参。<br>泛型类定义：public class Generic&lt; T &gt;{</p>
<pre><code>public void show(T t){
方法体
}</code></pre><p>}<br>泛型方法定义：<br>public class Generic{</p>
<pre><code>public &lt; T &gt; void show&lt; T t &gt;{
方法体    </code></pre><p>}<br>}<br>泛型接口定义：<br>修饰符 interface 接口名&lt;类型&gt;{}</p>
</li>
<li><p>类型通配符<br>为了标识各种类型List的父类，可以使用类型通配符&lt;?&gt;；<br>List&lt; ? &gt;表示元素类型未知的List，它的元素可以匹配任何的元素；如果不希望List&lt; ? &gt;是任何类型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限，如List&lt; ?extends Number &gt;：它表示的类型是Number或其子类型；也可以指定类型通配符的下限，如List&lt;?super Number&gt;：它表示的类型是Number或者其父类型。</p>
</li>
<li><p>个数可变参数<br>格式：修饰符 返回值类型 方法名(数据类型…变量名){ }，如public static int sum(int b, int… a){ } 注意：如果一个方法有多个参数，包含可变参数，可变参数要放在最后。</p>
</li>
<li><p>反射<br>若通过反射去使用一个类，首先要获取该类的字节码文件对象，也就是类型为Class类型的对象，三种方法获取Class类的对象。（此部分内容帮助文档搜索Class即可）<br>(1)使用类的class属性来获取该类对应的Class对象。举例，Class<Student> c1 = Student.class;<br>(2)调用对象的getClass()方法，返回该对象所属类对应的Class对象，举例，Student s = new Student()；Class<? extends Student> c2 = s.getClass();
(3)使用Class类中的静态方法forName(String className)，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径。举例，Class<?> c4 = Class.forName(“com.xxxx.Student”);<br>获取Class类的对象之后，使用c.getConstructors();c.getDeclaredConstructors();等方法获取构造方法；使用c.getFields();c.getDeclaredFields();等方法获取成员变量；使用c.getMethods();c.getDeclaredMethods();等方法获取成员变量；</p>
</li>
<li><p>内省introspector：<br>(1)内省主要是用来操作Javabean属性的，那么什么是Javabean呢？这里举例说明比较好：<br>定义了一个类Person，里面有age,name,sex等，其实这个Person就是一个Javabean，里面的age,name,sex等是字段还不是属性，如何成为属性呢？只有对age,name,sex这些定义了set,get方法才能成为Javabean属性，也就是说是不是Javabean属性取决于set或get方法。<br>(2)使用内省操作：首先，获得操作Javabean，BeanInfo info = introspector.getBeanInfo(Person.class);然后，获得属性描述器，PropertyDescriptor[] pds = info.getPropertyDescriptors();接下来可以对增强for循环对pds中的每一个进行pd.getName()可以看到属性名；若针对某一个属性进行操作，PropertyDescriptor pd = new PropertyDescriptor(“age”, Person.class);  然后使用Method method = pd.getWriteMethod();得到属性的写方法，相当于set，method.invoke(p,45)即可完成设置属性，读取属性pd.getReadMethod();同理。</p>
</li>
<li><p>beanUtils操作bean属性：<br>相比于内省，beanUtils在开发中更常用，beanUtils是一个第三方jar包，需要导入。<br>使用起来比内省简单许多，BeanUtils.setProperty(bean,name,value)即可。</p>
</li>
<li><p>模块化<br>Java9正式推出了模块化，模块基本使用步骤：<br>(1)创建模块，按照之前的方式创建模块，创建包，创建类，定义方法即可；<br>(2)在模块的src目录下新建一个module-info.java的描述文件，（Eclipse在工程名右键-Configure）该文件专门定义模块名，访问权限，模块依赖等信息；<br>(3)模块中所有未导出的包都是模块私有的，他们是不能在模块外被访问的，模块导出格式：experts 包名；<br>(4)一个模块要访问其他模块，必须明确指定依赖哪些模块，未明确指定依赖的模块不能访问，模块依赖格式：requires 模块名；</p>
</li>
<li><p>JCF(这部分内容学习的不是很详细，需要时再来认真学)<br>JCF主要的数据结构实现类：<br>-列表:List,ArrayList,LinkedList<br>-集合:Set,HashSet,TreeSet,LinkedHashSet<br>-映射:Map,HashMap,TreeMap,LinkedHashMap<br>JCF主要的算法类（工具类）：<br>-Arrays:对数组进行查找和排序等操作<br>-Collections：对Collection及其子类进行排序和查找等操作</p>
</li>
<li><p>ArrayList：<br>ArrayList&lt; E &gt;：<br>(1)可调整大小的数组实现；<br>(2)&lt; E &gt;是一种特殊的数据类型，泛型，也就是在出现E的地方使用引用的数据类型替换即可；</p>
</li>
<li><p>快速修复，ctrl+1<br>Eclipse自动生成返回值对象的快捷键：ctrl+1<br>快速生成main函数，输入main，alt+/<br>快速生成System.out.println()，输入syso，alt+/<br>内容提示，alt+/<br>自动import ，Ctrl + Shift + O<br>格式化代码，Ctrl + Shift + F<br>查看源码，ctrl+鼠标左键<br>向前向后，alt+左右<br>查看类的继承关系，ctrl+T<br>查看Eclipse所有快捷键，Ctrl + Shift + L</p>
</li>
<li><p>Junit测试工具<br>(1)方法前加注解@Test，导入Juit包，右侧Outline工具框，选中要测试的方法，右键，Run As–&gt;JUit Test；<br>(2)测试类中最前和最后可以写两个方法，分别加注解@Before和@After或者@BeforeClass和@AfterClass，用于初始化和销毁；<br>(3)断言Assert，判断期望的实际的是否相同，相同则通过测试，否则不通过；</p>
</li>
</ol>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>QT学习</title>
    <url>/2019/09/01/2019-09-01-Qt%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<ol>
<li><p>定义宏</p>
<p><img src="https://i.loli.net/2019/09/10/cCQvDPKMqlYVTGI.png" alt=""></p>
</li>
<li><p>.exe无法直接运行：打包或者添加环境变量</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windeployqt HelloWorld.exe	//打包命令</span><br></pre></td></tr></table></figure>





<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架搭建</title>
    <url>/2019/08/31/2019-08-31-Spring%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>包括JDK的下载安装、eclipse的安装、Spring插件的安装、Spring开发环境的搭建</p>
</blockquote>
<h1 id="一、JDK的下载安装"><a href="#一、JDK的下载安装" class="headerlink" title="一、JDK的下载安装"></a>一、JDK的下载安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载链接：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p>我这里下载了Java SE 12.0.2，下载安装即可，可以装到其他盘符。但是在安装完成周，安装目录下会有jre(Java Runtime Environment )文件夹，但是并没有，解决方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以管理员身份进入powershell，进入安装目录</span><br><span class="line">输入 bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>这里有点坑，以后需要及时躲避。一般情况下配置环境变量比较简单，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建JAVA_HOME：jdk的绝对路径</span><br><span class="line">编辑Path： 增加%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br><span class="line">新建Classpath： %JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure>

<p>但是我参照这种方法配置之后，cmd输入Java -version发现并没有配置成功，最后发现问题所在，这好像是win10的毛病，也就是添加环境变量的时候不能使用上述比较安全的方法，只能使用目前JDK安装的绝对路径直接添加到PATH中。也就是说JDK的安装路径以后不可以移动或者改变。</p>
<h1 id="二、eclipse的安装"><a href="#二、eclipse的安装" class="headerlink" title="二、eclipse的安装"></a>二、eclipse的安装</h1><p>这一步就很简单了，直接去<a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">官网</a>下载即可。下载之后打开注意去Help-&gt;About Eclipes IDE查看一下自己安装的版本号，我这里安装的是4.12.0，版本号接下来会用到。</p>
<h1 id="三、Spring插件的安装"><a href="#三、Spring插件的安装" class="headerlink" title="三、Spring插件的安装"></a>三、Spring插件的安装</h1><p>官网下载地址：<a href="https://spring.io/tools/sts/all" target="_blank" rel="noopener">https://spring.io/tools/sts/all</a></p>
<p><img src="https://i.loli.net/2019/08/31/WhkmQiFHw9Mx7Sj.png" alt=""></p>
<p>请看清楚刚才查看的的<strong>eclipse版本</strong>和对应的<strong>springsource-tool-suite版本</strong>，下载对应的版本。</p>
<h1 id="四、Spring插件的安装"><a href="#四、Spring插件的安装" class="headerlink" title="四、Spring插件的安装"></a>四、Spring插件的安装</h1><p>打开eclipse，选择 “Help” –&gt; “Install New Software” –&gt; “add” –&gt;”Archive” –&gt; 选择刚才下载好的springsource-tool-suite “打开”–&gt; “OK”。</p>
<p>选择要安装的组件：选定<strong>4个标有“IDE”的组件</strong>：</p>
<p><img src="https://i.loli.net/2019/08/31/cIDCvxFgwBs71qA.png" alt=""></p>
<p>接着一直点“Next”，最后“Finish”。等待其安装，右下角会提示进度。安装完之后会弹出对话框问是否<strong>重启eclipse</strong>，点“yes”重启。重启之后Window-&gt;Preferences，如在弹出的对话框出现如下内容，则安装成功。</p>
<p><img src="https://i.loli.net/2019/08/31/IrKA8YfgEsvbCwp.png" alt=""></p>
<h1 id="五、Spring开发环境的搭建"><a href="#五、Spring开发环境的搭建" class="headerlink" title="五、Spring开发环境的搭建"></a>五、Spring开发环境的搭建</h1><ol>
<li>左边窗口空白处右键–&gt;”New”–&gt;”Java Project”–&gt; 输入项目名称 –&gt;”Finish”；</li>
<li>右击刚才创建的项目，”New”–&gt;”Folder”新建文件夹，并命名为“lib”,”Finish”；</li>
</ol>
<p>注意在工程目录下可以看到jre的版本，不同版本的软件和组件之间有不同的兼容性，如果安装或使用过程中出现错误，请考虑是否需要更换版本。</p>
<ol start="3">
<li>获取以下五个jar包：</li>
</ol>
<p>具体获取方法如下：</p>
<ul>
<li><p>第一个，commons-logging-1.2 官网下载地址：</p>
<p><a href="https://commons.apache.org/proper/commons-logging/download_logging.cgi" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-logging/download_logging.cgi</a></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/08/31/oJ6zZqUWNH9OiCv.png" alt=""></p>
<p>下载，解压，找到第一个jar包。</p>
<ul>
<li><p>下面四个jar包的 官网下载地址：</p>
<p><a href="https://maven.springframework.org/release/org/springframework/spring/4.3.8.RELEASE/" target="_blank" rel="noopener">https://maven.springframework.org/release/org/springframework/spring/4.3.8.RELEASE/</a></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/08/31/pXWdClHoxP82GSI.png" alt=""></p>
<p>将<strong>第一个</strong>也下载下来，解压，在“lib”目录下找到另外四个jar包。</p>
<ol start="4">
<li><p>将这5个jar包复制到eclipse里你新建的spring项目下的“lib”里面：</p>
<p>选中jar包，ctrl+c，到eclipse里点击”lib”，ctrl+v 即可。现在的eclipse左侧窗口是这样的：</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/08/31/E3qVTI74zk5LKeQ.png" alt=""></p>
<p>​        然后选中5个jar包，右键–&gt;”bulid path”–&gt;”add to build path”；</p>
<p>​        现在的左侧窗口是这样的：</p>
<p><img src="https://i.loli.net/2019/08/31/Of1zSG3bWVFHgIk.png" alt=""></p>
<p>​        到这里Spring的开发环境就搭建完成了。</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装MySQL及连接</title>
    <url>/2019/08/30/2019-08-30-CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%E5%8F%8A%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<blockquote>
<p>前段时间在闲置的电脑上装了centos7，打算先装个MySQL试试。在此记录一下。</p>
</blockquote>
<h1 id="一、添加yum源"><a href="#一、添加yum源" class="headerlink" title="一、添加yum源"></a>一、添加yum源</h1><p>MySQL官网：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a></p>
<p>进入官网去选择和是的rpm包，包的作用是添加MySQL yum源，我在这里下载的是 mysql80-community-release-el7-3.noarch.rpm。下载之后通过XFTP上传文件到服务器，然后在rpm文件目录下执行yum localinstall 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum localinstall mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>如果权限不够请使用sudo执行，执行完毕过后我们可以使用 cd /etc/yum.repos.d进入到目录中查看文件，发现会有如下两个文件：</p>
<ul>
<li>mysql-community.repo</li>
<li>mysql-community-source.repo</li>
</ul>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>当我们添加好yum源之后就可以执行安装命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<h1 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h1><p>安装完成之后使用 systemctl start 执行启动MySQL命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<p>使用  systemctl status mysqld.service  可以查看MySQL的运行状态。</p>
<p><img src="https://i.loli.net/2019/08/30/t37pmNBPezIiOXW.png" alt=""></p>
<p>关闭命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure>

<p>重启命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>

<h1 id="四、修改密码"><a href="#四、修改密码" class="headerlink" title="四、修改密码"></a>四、修改密码</h1><p>当MySQL服务启动之后我们就需要对密码进行更改：MySQL 默认创建了 root 用户的密码，这个密码打印在 MySQL 的日志文件<code>/var/log/mysqld.log</code>中，可以通过<code>temporary password</code>关键字来找出这个临时的密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>找到密码之后使用改密码连接数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>然后修改密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;NewPassword&apos;;</span><br></pre></td></tr></table></figure>

<p>执行上述命令密码将被修改为：NewPassword</p>
<p>PS：新版本的MySQL对密码强度有限制，执行到上一步的时候，会提示密码强度不够，则应更改为更高强度的密码。</p>
<p>密码更改完成之后重启MySQL服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>



<h1 id="五、开放远程连接"><a href="#五、开放远程连接" class="headerlink" title="五、开放远程连接"></a>五、开放远程连接</h1><p>MySQL默认只对本机开放连接，我们则需要对mysql表的host字段进行修改以支持其他主机连接,%表示所有。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先连接数据库</span><br><span class="line">use mysql;</span><br><span class="line">update user set host = &apos;%&apos; where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>

<p>更改完成之后刷新权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>然后在navicat新建连接：</p>
<p><img src="https://i.loli.net/2019/08/30/XnKBdbcOxWtPizu.png" alt=""></p>
<p>问题解决步骤：</p>
<p>发现是防火墙未关闭，有两种方法去解决。</p>
<ol>
<li>关闭防火墙</li>
<li>设置防火墙开放端口</li>
</ol>
<p>第一种方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//停止</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">//禁止开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<p>第二种方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//这里发现防火墙是开启的，再来查看防火墙控制的端口</span><br><span class="line">systemctl status firewalld</span><br><span class="line">//查看防火墙控制的端口，发现我想要监听的8081端口没有开启</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">//永久开启3306端口</span><br><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">//重载防火墙</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<p>我使用了第一种</p>
<p><img src="https://i.loli.net/2019/08/30/geVp1iWMNvorOXU.png" alt=""></p>
<p>再次实验，成功</p>
<p><img src="https://i.loli.net/2019/08/30/bFtJRPHxdwViOyz.png" alt=""></p>
<p><strong>注：</strong>在用正版navicat连接MySQL8+时没问题，但使用破解版会出现2059错误，这是由于新版本的MySQL使用的是caching_sha2_password验证方式，但此时的navicat还没有支持这种验证方式。解决方法就是将验证方式改为以前版本(5.7及以下)使用的验证方式mysql_native_password。</p>
<hr>
<h1 id="后续："><a href="#后续：" class="headerlink" title="后续："></a>后续：</h1><p>2019.09.12</p>
<p>后期在安装mysql5.7时遇到了不少大坑，在此记录一下。</p>
<h2 id="1、安装mysql5-7"><a href="#1、安装mysql5-7" class="headerlink" title="1、安装mysql5.7"></a>1、安装mysql5.7</h2><p>CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL，因此安装方式较为以往有一些改变：</p>
<p>下载mysql的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装yum库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum localinstall -y mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure>

<p>启动MySQL服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<h2 id="2、修改MySQL的root密码"><a href="#2、修改MySQL的root密码" class="headerlink" title="2、修改MySQL的root密码"></a>2、修改MySQL的root密码</h2><p>MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，以下为查看初始随机密码的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>进入mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`mysql ``-``uroot ``-``p`</span><br></pre></td></tr></table></figure>

<p>完成之后进入，首先修改密码策略，然后修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=1;</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456789&apos;;</span><br></pre></td></tr></table></figure>

<p>然后退出后即可用新密码登录。</p>
<h2 id="3、远程连接授权"><a href="#3、远程连接授权" class="headerlink" title="3、远程连接授权"></a>3、远程连接授权</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>授权之后，用nevicat检查一下是否可以连接，如果不可以，可能是防火墙限制了。需要在防火墙里面加开放数据库端口的规则。</p>
<h2 id="4、防火墙开放数据库端口（默认3306，可以在-etc-my-cnf中修改）"><a href="#4、防火墙开放数据库端口（默认3306，可以在-etc-my-cnf中修改）" class="headerlink" title="4、防火墙开放数据库端口（默认3306，可以在/etc/my.cnf中修改）"></a>4、防火墙开放数据库端口（默认3306，可以在/etc/my.cnf中修改）</h2><p>【1】查看目前防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>

<p>【2】开放3306端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=3306/tcp</span><br></pre></td></tr></table></figure>

<p>【3】重启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service firewalld restart</span><br></pre></td></tr></table></figure>

<p>【4】查看3306端口是否开放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=3306/tcp</span><br></pre></td></tr></table></figure>

<p>【5】再次查看现在防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>

<p>【6】再次测试是否可以远程连接，成功。</p>
<h2 id="5、设置开机自启"><a href="#5、设置开机自启" class="headerlink" title="5、设置开机自启"></a>5、设置开机自启</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>



<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(2)-JavaScript核心DOM BOM1</title>
    <url>/2019/08/23/2019-08-23-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(2)-JavaScript%E6%A0%B8%E5%BF%83DOM%20BOM1/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。<br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 2：JavaScript，此部分涉及许多计算机及编程基础知识，这里略过不做记录，只记录之前用的比较少的部分。</p>
</blockquote>
<h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><h2 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<ul>
<li>任何开发语言都有自己的API</li>
<li>API的特征输入和输出(I/O)</li>
<li>API的使用方法(console.log())</li>
</ul>
<h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web API的概念"></a>Web API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p>
<p>此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义</p>
<h3 id="掌握常见的浏览器提供的API的调用方式"><a href="#掌握常见的浏览器提供的API的调用方式" class="headerlink" title="掌握常见的浏览器提供的API的调用方式"></a>掌握常见的浏览器提供的API的调用方式</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p>
<h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>![1496912475691](D:/Study/02-JavaScript-WEB-API-第1天/01教学资料/02-Web API/media/1496912475691.png)</p>
<h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了javascript的语法规范</p>
<p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p>
<h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p>
<p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p>
<h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p>
<p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p>
<h1 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h1><p><img src="https://i.loli.net/2019/08/23/guHfc9jkz6JmOwM.png" alt=""></p>
<ul>
<li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li>
<li>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</li>
<li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li>
</ul>
<p><strong>DOM 把以上内容都看做是对象</strong></p>
<h2 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h2><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><p>使用 getElementById() 方法可以获取带有ID 的元素对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'标签名'</span>);</span><br></pre></td></tr></table></figure>

<p>注意： </p>
<p>1.因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</p>
<p>2.得到元素对象是动态的</p>
<p>3.如果获取不到元素,则返回为空的伪数组(因为获取不到对象)</p>
<p>还可以获取某个元素(父元素)内部所有指定标签名的子元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.getElementsByTagName(<span class="string">'标签名'</span>);</span><br></pre></td></tr></table></figure>

<p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己。</p>
<h3 id="Html5新增的获取方法"><a href="#Html5新增的获取方法" class="headerlink" title="Html5新增的获取方法"></a>Html5新增的获取方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">document</span>.getElementsByClassName(‘类名’)；<span class="comment">// 根据类名返回元素对象集合</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span>.querySelector(<span class="string">'选择器'</span>);        <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="number">3.</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">'选择器'</span>);     <span class="comment">// 根据指定选择器返回</span></span><br></pre></td></tr></table></figure>

<p>注意：querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector(‘#nav’); </p>
<h3 id="特殊元素（body-html获取）"><a href="#特殊元素（body-html获取）" class="headerlink" title="特殊元素（body/html获取）"></a>特殊元素（body/html获取）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> doucumnet.body  <span class="comment">// 返回body元素对象</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span>.documentElement  <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure>

<h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p>
<p>简单理解： 触发— 响应机制。</p>
<p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p>
<h3 id="事件执行步骤"><a href="#事件执行步骤" class="headerlink" title="事件执行步骤"></a>事件执行步骤</h3><ol>
<li><p>获取事件源</p>
</li>
<li><p>注册事件（绑定事件）</p>
</li>
<li><p>添加事件处理程序（采取函数赋值形式）</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/08/23/BYRD13zFGnq5dmw.png" alt=""></p>
<h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.innerText</span><br></pre></td></tr></table></figure>

<p>从起始位置到终止位置的内容, 但它去除 html 标签，同时空格和换行也会去掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.innerHTML</span><br></pre></td></tr></table></figure>

<p>起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行。</p>
<h3 id="常用元素的属性操作"><a href="#常用元素的属性操作" class="headerlink" title="常用元素的属性操作"></a>常用元素的属性操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> src、href</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> id、alt、title</span><br></pre></td></tr></table></figure>

<p>直接在事件中修改元素.属性即可。</p>
<h3 id="表单元素属性修改"><a href="#表单元素属性修改" class="headerlink" title="表单元素属性修改"></a>表单元素属性修改</h3><p>利用 DOM 可以操作如下表单元素的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  type、value、checked、selected、disabled</span><br><span class="line">- value 用于大部分表单元素的内容获取(option除外)</span><br><span class="line">- type 可以获取input标签的类型(输入框或复选框等)</span><br><span class="line">- disabled 禁用属性</span><br><span class="line">- checked 复选框选中属性</span><br><span class="line">- selected 下拉菜单选中属性</span><br></pre></td></tr></table></figure>

<h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> element.style     行内样式操作</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> element.className 类名样式操作</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</li>
<li>JS 修改 style 样式操作，产生的是行内样式，权重比CSS 高</li>
<li>如果样式修改较多，可以采取操作类名方式更改元素样式。 </li>
<li>class因为是个保留字，因此使用className来操作元素类名属性</li>
<li>className 会直接更改元素的类名，会覆盖原先的类名，如果想要保留原类名，使用多类名选择器，即this.className=’原类名 新类名’。</li>
</ol>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(2)-JavaScript入门与提高2</title>
    <url>/2019/08/22/2019-08-22-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(2)-JavaScript%E5%85%A5%E9%97%A8%E4%B8%8E%E6%8F%90%E9%AB%982/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。<br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 2：JavaScript，此部分涉及许多计算机及编程基础知识，这里略过不做记录，只记录之前用的比较少的部分。</p>
</blockquote>
<h1 id="对象定义"><a href="#对象定义" class="headerlink" title="对象定义"></a>对象定义</h1><p>对象是由属性和方法组成的。</p>
<ul>
<li>属性：事物的<strong>特征，</strong>在对象中用<strong>属性</strong>来表示（常用名词）</li>
<li>方法：事物的<strong>行为，</strong>在对象中用<strong>方法</strong>来表示（常用动词）</li>
</ul>
<h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h2><p>对象字面量：就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法。</p>
<p>{ } 里面采取<strong>键值对</strong>的形式表示 </p>
<ul>
<li>键：相当于属性名</li>
<li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li>
</ul>
<h3 id="对象的调用"><a href="#对象的调用" class="headerlink" title="对象的调用"></a>对象的调用</h3><ul>
<li>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </li>
<li>对象里面属性的另一种调用方式 : 对象[‘属性名’]<strong>，</strong>注意方括号里面的属性必须加引号</li>
<li>对象里面的方法调用：对象.方法名() <strong>，</strong>注意这个方法名字后面一定加括号 </li>
</ul>
<h2 id="利用new-Object创建对象"><a href="#利用new-Object创建对象" class="headerlink" title="利用new Object创建对象"></a>利用new Object创建对象</h2><ul>
<li>Object() ：第一个字母大写   </li>
<li>new Object() ：需要 new 关键字</li>
<li>使用的格式：对象.属性 =  值;     </li>
</ul>
<h2 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h2><p><strong>构造函数 ：</strong>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
<p>在 js 中，使用构造函数要时要注意以下两点：</p>
<ul>
<li>构造函数用于创建某一类对象，其首字母要大写</li>
<li>构造函数要和 new 一起使用才有意义</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'我的名字叫：'</span> + <span class="keyword">this</span>.name + <span class="string">'，年龄：'</span> + <span class="keyword">this</span>.age + <span class="string">'，性别：'</span> + <span class="keyword">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params">song</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我会唱'</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bigbai = <span class="keyword">new</span> Person(<span class="string">'大白'</span>, <span class="number">100</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">var</span> smallbai = <span class="keyword">new</span> Person(<span class="string">'小白'</span>, <span class="number">21</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bigbai.name);</span><br><span class="line"><span class="built_in">console</span>.log(smallbai.name);</span><br><span class="line">bigbai.sayHi();</span><br><span class="line">smallbai.sing(<span class="string">'爱你一万年'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ol>
<li><p>构造函数约定首字母大写。</p>
</li>
<li><p>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</p>
</li>
<li><p>构造函数中不需要 return 返回结果。</p>
</li>
<li><p>当我们创建对象的时候，必须用 new 来调用构造函数。</p>
</li>
</ol>
<p><strong>new在执行时会做四件事情</strong>：</p>
<ol>
<li><p>在内存中创建一个新的空对象。</p>
</li>
<li><p>让 this 指向这个新的对象。</p>
</li>
<li><p>执行构造函数里面的代码，给这个新对象添加属性和方法。</p>
</li>
<li><p>返回这个新对象（所以构造函数里面不需要return）。</p>
</li>
</ol>
<h1 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h1><p>for…in 语句用于对数组或者对象的属性进行循环操作。</p>
<p>其语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h2><p>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p>
<p>MDN:   <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.</a><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">mozilla.org/zh-CN/</a></p>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用Math 中的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI		 <span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor() 	 <span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil()            <span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()           <span class="comment">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span></span><br><span class="line"><span class="built_in">Math</span>.abs()		 <span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min()	 <span class="comment">// 求最大和最小值 </span></span><br><span class="line"><span class="built_in">Math</span>.random()		<span class="comment">//随机返回一个小数，其取值范围是 [0，1)</span></span><br></pre></td></tr></table></figure>

<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用。Date 实例用来处理日期和时间。</p>
<p><strong>Date() 构造函数的参数</strong></p>
<p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date(‘2019-5-1’)  或者 new Date(‘2019/5/1’)</p>
<ul>
<li>如果Date()不写参数，就返回当前时间</li>
<li>如果Date()里面写参数，就返回括号里面输入的时间 </li>
</ul>
<p><strong>日期格式化</strong></p>
<p><img src="https://i.loli.net/2019/08/23/Okb9uAYSzGscI35.png" alt=""></p>
<p>​        <strong>注意：</strong></p>
<ul>
<li>月份因为返回的是0到11，所以要+1才正确；</li>
<li>星期一到六返回1-6，但是星期日返回的是0而不是7；</li>
</ul>
<p><strong>时间戳</strong></p>
<p>Date 对象是基于1970年1月1日（世界标准时间）起的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())	</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())	</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> date1 = + <span class="keyword">new</span> <span class="built_in">Date</span>();			</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure>

<h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p><strong>检测是否为数组</strong></p>
<ul>
<li>instanceof 运算符，可以判断一个对象是否属于某种类型</li>
<li>Array.isArray判断一个对象是否为() 5 中提供的方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>数组增删元素</strong></p>
<p><img src="https://i.loli.net/2019/08/23/b1F8oh9AxB6Yrp3.png" alt=""></p>
<p><strong>数组排序</strong></p>
<p><img src="https://i.loli.net/2019/08/23/lNJcaLtmfzDQv3R.png" alt=""></p>
<p>​        <strong>注意</strong></p>
<p>sort排序会有问题，如[1,4,13,56,43,5]sort排序后结果为[1,13,4,43,5,56]解决方案如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;      <span class="comment">// 降a序</span></span><br><span class="line">    <span class="comment">// return a - b;   // 升序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p><strong>数组转换为字符串</strong></p>
<p><img src="https://i.loli.net/2019/08/23/oDsI1fW4baF5kxK.png" alt=""></p>
<h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p><strong>基本包装类型</strong></p>
<p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p>
<p>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'andy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为<br>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'andy'</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>字符串的不可变</strong></p>
<p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 当重新给 str 赋值的时候，常量'abc'不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串转换为数组</strong></p>
<p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a,b,c,d'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">','</span>));   <span class="comment">// 返回的是一个数组 [a, b, c, d]</span></span><br></pre></td></tr></table></figure>

<h1 id="简单对象与复杂对象"><a href="#简单对象与复杂对象" class="headerlink" title="简单对象与复杂对象"></a>简单对象与复杂对象</h1><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</p>
<ul>
<li><p>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型。</p>
<p>string ，number，boolean，undefined，null</p>
</li>
<li><p>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p>
<p>通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p>
</li>
</ul>
<p><strong>堆栈空间分配区别：</strong></p>
<p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p>
<p><em>简单数据类型存放到栈里面</em></p>
<p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p>
<p><em>复杂数据类型存放到堆里面</em></p>
<p><strong>注意：</strong><code>JavaScript</code>中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行方式，便于将来学习其他语言。</p>
<p><strong>简单对象内存分配</strong></p>
<ul>
<li>值类型（简单数据类型）： string ，number，boolean，undefined，null</li>
<li>值类型变量的数据直接存放在变量（栈空间）中</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/I7tC4Tk3pjO8VWr.png" alt=""></p>
<p><strong>复杂对象内存分配</strong></p>
<ul>
<li>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</li>
<li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/FZMg8OEDvKPioIr.png" alt=""></p>
<p><strong>简单对象传参</strong></p>
<p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">//11</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="built_in">console</span>.log(x)；  <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p><strong>复杂对象传参</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="built_in">console</span>.log(x.name); <span class="comment">// 2. 这个输出什么 ?   刘德华 </span></span><br><span class="line">    x.name = <span class="string">"张学友"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x.name); <span class="comment">// 3. 这个输出什么 ?   张学友</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"刘德华"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);    <span class="comment">// 1. 这个输出什么 ?   刘德华</span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);    <span class="comment">// 4. 这个输出什么 ?   张学友</span></span><br></pre></td></tr></table></figure>



<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(2)-JavaScript入门与提高1</title>
    <url>/2019/08/19/2019-08-19-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(2)-JavaScript%E5%85%A5%E9%97%A8%E4%B8%8E%E6%8F%90%E9%AB%981/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。<br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 2：JavaScript，此部分涉及许多计算机及编程基础知识，这里略过不做记录，只记录之前用的比较少的部分。</p>
</blockquote>
<h1 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h1><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p>
<p><strong>断点调试可以帮我们观察程序的运行过程</strong></p>
<p>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点</p>
<p>Watch: 监视，通过watch可以监视变量的值的变化。</p>
<p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</p>
<h1 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h1><p>do… while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。</p>
<p>do… while 语句的语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    // 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><br><span class="line">&#125; while(条件表达式);</span><br></pre></td></tr></table></figure>

<p>执行顺序：</p>
<p>①先执行一次循环体代码 </p>
<p>②再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p>
<p><strong>注意：</strong>先再执行循环体，再判断，我们会发现 do…while<br>循环语句<strong>至少</strong>会执行一次循环体代码。</p>
<h1 id="continue和-break"><a href="#continue和-break" class="headerlink" title="continue和 break"></a>continue和 break</h1><p><strong>continue 关键字</strong></p>
<p>continue 关键字用于立即跳出本次循环<strong>，</strong>继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p>
<p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个。</p>
<p><strong>break关键字</strong></p>
<p>break关键字用于立即跳出整个循环（循环结束）。</p>
<p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><p><strong>利用数组字面量创建数组</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = [<span class="string">'小白'</span>,<span class="string">'小黑'</span>,<span class="string">'大黄'</span>,<span class="string">'瑞奇'</span>];</span><br></pre></td></tr></table></figure>

<h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。  </p>
<p>筛选数组案例</p>
<p>要求：将数组 [2, 0,<br>6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 索引号直接用newArr.length</span></span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<h1 id="函数形参和实参个数匹配"><a href="#函数形参和实参个数匹配" class="headerlink" title="函数形参和实参个数匹配"></a>函数形参和实参个数匹配</h1><p><img src="https://i.loli.net/2019/08/22/tP4MwfpA2yhcxio.png" alt=""></p>
<h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><ol>
<li><p>return 语句之后的代码不被执行。、</p>
</li>
<li><p><strong>return</strong> <strong>只能返回一个值</strong>。如果用逗号隔开多个值，以最后一个为准。</p>
</li>
<li><p>return若要返回多个值，采取数组等方法。</p>
</li>
<li><p>函数都是有返回值的</p>
<p>1）如果有return 则返回 return 后面的值；</p>
<p>2）如果没有return 则返回 undefined ；</p>
</li>
<li><ul>
<li><p>break ：结束当前的循环体（如 for、while）</p>
</li>
<li><p>continue ：跳出本次循环，继续执行下次循环（如 for、while）</p>
</li>
<li><p>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</p>
</li>
</ul>
</li>
</ol>
<h1 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h1><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</p>
<p>arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li>具有 length 属性</li>
<li>按索引方式储存数据</li>
<li>不具有数组的 push , pop 等方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">                    max = <span class="built_in">arguments</span>[i];</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure>

<h1 id="函数两种声明方式"><a href="#函数两种声明方式" class="headerlink" title="函数两种声明方式"></a>函数两种声明方式</h1><ol>
<li><p>自定义函数方式（命名函数）</p>
<p>利用函数关键字 function 自定义函数方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数表达式方式 （匿名函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h1><p>在JavaScript中，根据作用域的不同，变量可以分为两种：</p>
<ol>
<li><p>全局变量</p>
<p>全局变量在代码的任何位置都可以使用。只有在浏览器关闭时才会被销毁，因此比较占内存。</p>
<ul>
<li>在全局作用域下 var 声明的变量，是全局变量</li>
<li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li>
</ul>
</li>
<li><p>局部变量</p>
<p>局部变量只能在该函数内部使用。当代码块运行结束后，就会被销毁，因此更节省内存空间。</p>
<ul>
<li>在函数内部 var 声明的变量是局部变量</li>
<li>函数的形参实际上就是局部变量</li>
</ul>
</li>
</ol>
<p>预解析</p>
<p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。</p>
<p><strong>预解析：</strong>在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p>
<p><strong>代码执行：</strong> 从上到下执行JS语句。</p>
<p>预解析只会发生在通过 var 定义的变量和 function 上。</p>
<h2 id="变量预解析（变量提升）"><a href="#变量预解析（变量提升）" class="headerlink" title="变量预解析（变量提升）"></a>变量预解析（变量提升）</h2><p>变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p>
<h2 id="函数预解析（函数提升）"><a href="#函数预解析（函数提升）" class="headerlink" title="函数预解析（函数提升）"></a>函数预解析（函数提升）</h2><p>函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经典案例，下面结果是什么？</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照预解析规则解析以及按照作用域规则执行后，相当于执行以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// 相当于 var  a  = 9; b = 9; c = 9; b 和 c 直接赋值 没有var声明 当全局变量看，只有a进行了声明，为局部变量。</span></span><br><span class="line">    <span class="comment">// 集体声明  var a = 9, b = 9, c = 9;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先执行函数内的三个console.log，输出9，9，9，再执行函数外的三个console.log，输出9，9，报错（a为局部变量，全局未定义）。</span><br></pre></td></tr></table></figure>



<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高12</title>
    <url>/2019/08/16/2019-08-16-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%9812/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h1><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p>
<p>语法格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transition: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br><span class="line">如果有多组属性变化，还是用逗号隔开。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>CSS</th>
</tr>
</thead>
<tbody><tr>
<td>transition</td>
<td>简写属性，用于在一个属性中设置四个过渡属性。</td>
<td>3</td>
</tr>
<tr>
<td>transition-property</td>
<td>规定应用过渡的 CSS 属性的名称。</td>
<td>3</td>
</tr>
<tr>
<td>transition-duration</td>
<td>定义过渡效果花费的时间。默认是 0。</td>
<td>3</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>规定过渡效果的时间曲线。默认是 “ease”。</td>
<td>3</td>
</tr>
<tr>
<td>transition-delay</td>
<td>规定过渡效果何时开始。默认是 0。</td>
<td>3</td>
</tr>
</tbody></table>
<p>如果多个属性都要效果，用逗号隔开即可；如果想要所有的属性都变化过渡， 写一个all 就可以。</p>
<p>运动曲线示意图：</p>
<p><img src="https://i.loli.net/2019/08/16/nW2VBGMACaYmeSR.png" alt=""></p>
<h1 id="2D变形-CSS3-transform"><a href="#2D变形-CSS3-transform" class="headerlink" title="2D变形(CSS3) transform"></a>2D变形(CSS3) transform</h1><p>transform是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p>
<h2 id="移动-translate-x-y"><a href="#移动-translate-x-y" class="headerlink" title="移动 translate(x, y)"></a>移动 translate(x, y)</h2><p><img src="https://i.loli.net/2019/08/18/M3Xa4CQWFiKwoOJ.png" alt=""></p>
<p>可以改变元素的位置，x、y可为负值；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</span><br><span class="line">translateX(x)仅水平方向移动（X轴移动）</span><br><span class="line">translateY(Y)仅垂直方向移动（Y轴移动）</span><br></pre></td></tr></table></figure>

<h2 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 scale(x, y)"></a>缩放 scale(x, y)</h2><p><img src="https://i.loli.net/2019/08/18/ZFJwyPhBe6a1WAG.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</span><br><span class="line">scaleX(x)元素仅水平方向缩放（X轴缩放）</span><br><span class="line">scaleY(y)元素仅垂直方向缩放（Y轴缩放）</span><br></pre></td></tr></table></figure>

<p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大。</p>
<h2 id="旋转-rotate-deg"><a href="#旋转-rotate-deg" class="headerlink" title="旋转 rotate(deg)"></a>旋转 rotate(deg)</h2><p><img src="https://i.loli.net/2019/08/18/3PV4dGBDxnF9Mk2.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(45deg)</span>;</span><br></pre></td></tr></table></figure>

<p> 注意单位是 deg 度数      </p>
<p>transform-origin可以调整元素转换变形的原点。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: left top;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg); &#125;  <span class="comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span></span><br></pre></td></tr></table></figure>

<p> 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: <span class="number">10px</span> <span class="number">10px</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg); &#125;  <span class="comment">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/18/5oLbuKF3Iq6TpXV.png" alt=""></p>
<h2 id="倾斜-skew-deg-deg"><a href="#倾斜-skew-deg-deg" class="headerlink" title="倾斜 skew(deg, deg)"></a>倾斜 skew(deg, deg)</h2><p><img src="https://i.loli.net/2019/08/18/Y3yMilbtRao6BKs.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skew(30deg</span>,0<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure>

<p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p>
<p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p>
<h1 id="3D变形-CSS3-transform"><a href="#3D变形-CSS3-transform" class="headerlink" title="3D变形(CSS3) transform"></a>3D变形(CSS3) transform</h1><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 沿着 x 立体旋转。</p>
<h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转。</p>
<h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转。</p>
<h2 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h2><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p>
<p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p>
<ul>
<li>透视原理： 近大远小 。</li>
<li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li>
<li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li>
</ul>
<p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p>
<p>perspective 一般作为一个属性，设置给父元素，作用于所有3D转换的子元素</p>
<p>理解透视距离原理：</p>
<p><img src="https://i.loli.net/2019/08/18/OKtFYf8Az1xhJWw.png" alt=""></p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p>
<p><img src="https://i.loli.net/2019/08/18/45YPNsmgDZCR2WX.png" alt=""></p>
<p>主要目的实现移动效果。</p>
<h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p>
<p><img src="https://i.loli.net/2019/08/18/UcuZoiNAwq5nEhR.png" alt=""></p>
<h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p>
<h3 id="translate3d-x-y-z"><a href="#translate3d-x-y-z" class="headerlink" title="translate3d(x,y,z)"></a>translate3d(x,y,z)</h3><p>[注意]其中，x和y可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值</p>
<h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p>
<h1 id="动画-CSS3-animation"><a href="#动画-CSS3-animation" class="headerlink" title="动画(CSS3) animation"></a>动画(CSS3) animation</h1><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>
<p>动画调用语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/18/jHQsoxCn5ulKfLh.png" alt=""></p>
<p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animation-iteration-count:infinite;  无限循环播放animation-play-state:paused;   暂停动画</span><br></pre></td></tr></table></figure>

<p>动画定义语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> 动画名称 &#123;</span><br><span class="line">  from&#123; 开始位置 &#125;  0%</span><br><span class="line">  to&#123;  结束  &#125;  100%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h1><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p>
<p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p>
<p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p>
<p>方向：默认主轴从左向右，侧轴默认从上到下</p>
<p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p>
<p><img src="https://i.loli.net/2019/08/18/CXqchO6JIu8sSwa.png" alt=""></p>
<p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p>
<h2 id="各属性详解"><a href="#各属性详解" class="headerlink" title="各属性详解"></a>各属性详解</h2><p>1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p>
<p>min-width  最小值      min-width: 280px  最小宽度  不能小于 280</p>
<p>max-width: 1280px  最大宽度  不能大于 1280</p>
<p>2.flex-direction调整主轴方向（默认为水平方向）</p>
<p>flex-direction: column 垂直排列</p>
<p>flex-direction: row  水平排列</p>
<p>3、justify-content调整主轴对齐（水平对齐）</p>
<p>子盒子如何在父盒子里面水平对齐</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>白话文</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值。项目位于容器的开头。</td>
<td>让子元素从父容器的开头开始排序但是盒子顺序不变</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
<td>让子元素从父容器的后面开始排序但是盒子顺序不变</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
<td>让子元素在父容器中间显示</td>
</tr>
<tr>
<td>space-between</td>
<td>项目位于各行之间留有空白的容器内。</td>
<td>左右的盒子贴近父盒子，中间的平均分布空白间距</td>
</tr>
<tr>
<td>space-around</td>
<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>
<td>相当于给每个盒子添加了左右margin外边距</td>
</tr>
</tbody></table>
<p>4、align-items调整侧轴对齐（垂直对齐）</p>
<p>子盒子如何在父盒子里面垂直对齐（单行）</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>白话文</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>默认值。项目被拉伸以适应容器。</td>
<td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
<td>垂直居中</td>
</tr>
<tr>
<td>flex-start</td>
<td>项目位于容器的开头。</td>
<td>垂直对齐开始位置 上对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
<td>垂直对齐结束位置 底对齐</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>5、flex-wrap控制是否换行</p>
<p>当我们子盒子内容宽度多于父盒子的时候如何处理</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示</td>
</tr>
<tr>
<td>wrap</td>
<td>规定灵活的项目在必要的时候拆行或拆列。</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>6、flex-flow是flex-direction、flex-wrap的简写形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">flex-direction</span>  <span class="selector-tag">flex-wrap</span>;</span><br></pre></td></tr></table></figure>



<p>白话记：    flex-flow: 排列方向   换不换行; </p>
<p>两个中间用空格</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="comment">/* flex-direction: row;</span></span><br><span class="line"><span class="comment">flex-wrap: wrap;   这两句话等价于下面的这句话*/</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">wrap</span>;  <span class="comment">/* 两者的综合 */</span></span><br></pre></td></tr></table></figure>



<p>7、align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐</p>
<p>align-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。</p>
<p>必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>测试</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>默认值。项目被拉伸以适应容器。</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
<td></td>
</tr>
<tr>
<td>flex-start</td>
<td>项目位于容器的开头。</td>
<td></td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
<td></td>
</tr>
<tr>
<td>space-between</td>
<td>项目位于各行之间留有空白的容器内。</td>
<td></td>
</tr>
<tr>
<td>space-around</td>
<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>
<td></td>
</tr>
</tbody></table>
<p>8、order控制子项目的排列顺序，正序方式排序，从小到大</p>
<p>用css 来控制盒子的前后顺序。  用order 就可以</p>
<p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">order</span>: 1;</span><br></pre></td></tr></table></figure>



<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高11</title>
    <url>/2019/08/15/2019-08-15-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%9811/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p>
<p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p>
<h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p>
<p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p>
<p>特点： 隐藏之后，不再保留位置。</p>
<h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p>
<p>visible : 　对象可视</p>
<p>hidden : 　对象隐藏</p>
<p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p>
<h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p>
<p>visible : 　不剪切内容也不添加滚动条。</p>
<p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p>
<p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p>
<p>scroll : 　不管超出内容否，总是显示滚动条</p>
<h1 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h1><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p>
<h2 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h2><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure>

<p> 鼠标放我身上查看效果哦：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:default"</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:pointer"</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:move"</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:text"</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p>
<h2 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h2><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure>

<p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p>
<p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">style</span>=<span class="string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h2><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p>
<p>右下角可以拖拽： </p>
<p><textarea></textarea></p>
<p>右下角不可以拖拽：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">"resize: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p><img src="https://i.loli.net/2019/08/16/dr6YyzX5aJ9L2Ee.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure>

<p>设置或检索对象内容的垂直对其方式。 </p>
<p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p>
<h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p>
<h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙(较低版本浏览器中常见)。</p>
<p>解决的方法就是：  </p>
<ol>
<li>给img vertical-align:middle | top等等。  让图片不要和基线对齐。</li>
<li>给img 添加 display：block; 转换为块级元素就不会存在问题了。</li>
</ol>
<h2 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h2><h3 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h3><p>normal   使用浏览器默认的换行规则。</p>
<p>break-all   允许在单词内换行。</p>
<p>keep-all    只能在半角空格或连字符处换行。</p>
<p>主要处理英文单词</p>
<h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p>
<p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p>
<p>可以处理中文</p>
<h3 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h3><p>text-overflow : clip | ellipsis</p>
<p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>
<p>clip : 　不显示省略标记（…），而是简单的裁切 </p>
<p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p>
<p>注意一定要首先强制一行内显示，再次和overflow属性  搭配使用</p>
<h1 id="CSS精灵技术（sprite）"><a href="#CSS精灵技术（sprite）" class="headerlink" title="CSS精灵技术（sprite）"></a>CSS精灵技术（sprite）</h1><h3 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h3><p><img src="https://i.loli.net/2019/08/16/4oGBlehRxiXnQLD.png" alt="网页请求原理"></p>
<p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p>
<p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p>
<h3 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h3><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图）。</p>
<h3 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p>
<h3 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p>
<p>大部分情况下，精灵图都是网页美工做。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们精灵图的宽度取决于最宽的那个背景。 </span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure>

<p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p>
<h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时就需要字体图标（iconfont)。</p>
<h2 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..</span><br><span class="line">但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...</span><br><span class="line">本身体积更小，但携带的信息并没有削减。</span><br><span class="line">几乎支持所有的浏览器</span><br><span class="line">移动端设备必备良药...</span><br></pre></td></tr></table></figure>

<h2 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h2><p>总体来说，字体图标按照如下流程：</p>
<p><img src="https://i.loli.net/2019/08/16/mSHQIoza7FkWXqj.png" alt=""></p>
<hr>
<h3 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h3><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标，之后保存为svg格式，然后给我们前端人员就好了。 </p>
<p>其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p>
<h3 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h3><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p>
<p>​    推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a></p>
<p><strong>icomoon字库</strong></p>
<p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<p>   推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p>
<p><strong>阿里icon font字库</strong></p>
<p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p>
<p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p>
<p><strong>fontello</strong></p>
<p><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a></p>
<p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p>
<p><strong>Font-Awesome</strong></p>
<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a></p>
<p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p>
<p><strong>Glyphicon Halflings</strong></p>
<p><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a></p>
<p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p>
<p><strong>Icons8</strong></p>
<p><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a></p>
<p>提供PNG免费下载，像素大能到500PX</p>
<h3 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h3><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p>
<p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p>
<h2 id="以icomoon使用为例"><a href="#以icomoon使用为例" class="headerlink" title="以icomoon使用为例"></a>以icomoon使用为例</h2><h3 id="选择下载压缩包"><a href="#选择下载压缩包" class="headerlink" title="选择下载压缩包"></a>选择下载压缩包</h3><p><img src="https://i.loli.net/2019/08/16/nPy6cmKClGzjR2Z.png" alt=""></p>
<p><img src="https://i.loli.net/2019/08/16/uEHpce4mNfSL2dr.png" alt=""></p>
<h3 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h3><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p>
<p>首先把 以下4个文件放入到工程的 fonts文件夹里面。 </p>
<p><img src="https://i.loli.net/2019/08/16/pfcHDkzsRumAGeB.png" alt=""></p>
<p><strong>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'icomoon'</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2'</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.ttf?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.woff?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.svg?7kkyc2#icomoon'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步：给盒子使用字体</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">		<span class="attribute">font-family</span>: <span class="string">"icomoon"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：盒子里面添加结构</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">		 <span class="attribute">content</span>: <span class="string">"\e900"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">或者  </span><br><span class="line">&lt;span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p>
<p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p>
<p><img src="https://i.loli.net/2019/08/16/bTckN37JHQMzaol.png" alt=""></p>
<h1 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h1><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如各种网站导航栏，最大的问题是里面的字数不一样多。</p>
<p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p>
<h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p>
<p>一般的经典布局都是这样的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">		<span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">		<span class="attribute">display</span>: inline-block;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">		<span class="comment">/* 千万不能给宽度 写死宽度是不对滴，我们要推拉门 自由缩放*/</span></span><br><span class="line">		<span class="attribute">background</span>: <span class="built_in">url</span>(images/ao.png) no-repeat;</span><br><span class="line">		<span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">		<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">		<span class="attribute">text-decoration</span>: none;</span><br><span class="line">		<span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">		<span class="attribute">display</span>: inline-block;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">		<span class="attribute">background</span>: <span class="built_in">url</span>(images/ao.png) no-repeat right; </span><br><span class="line">		<span class="comment">/* span 不能给宽度 利用padding挤开  要我要span 右边的圆角  所以 背景位置 右对齐 */</span></span><br><span class="line">		<span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结： </p>
<ol>
<li>a 设置 背景左侧，padding撑开合适宽度。    </li>
<li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li>
<li>之所以a包含span就是因为 整个导航都是可以点击的。</li>
</ol>
<h1 id="before和after伪元素详解"><a href="#before和after伪元素详解" class="headerlink" title="before和after伪元素详解"></a>before和after伪元素详解</h1><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查。</p>
<p><strong>注意</strong></p>
<p>伪元素:before和:after添加的内容默认是inline元素，设置宽高需要转换；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before和:after时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p>
<p><strong>注</strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高10</title>
    <url>/2019/08/14/2019-08-14-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%9810/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h1><p>元素的定位属性主要包括定位模式和边偏移两部分。</p>
<p>1、边偏移</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>top</td>
<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>
</tr>
<tr>
<td>bottom</td>
<td>底部偏移量，定义元素相对于其父元素下边线的距离</td>
</tr>
<tr>
<td>left</td>
<td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>
</tr>
<tr>
<td>right</td>
<td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>
</tr>
</tbody></table>
<p>也就说，定位要和边偏移搭配使用， 比如 top: 100px;  left: 30px; 等等</p>
<p>2、定位模式(定位的分类)</p>
<p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p>
<p>选择器{position:属性值;}</p>
<p>position属性的常用值</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>自动定位（默认定位方式）</td>
</tr>
<tr>
<td>relative</td>
<td>相对定位，相对于其原文档流的位置进行定位</td>
</tr>
<tr>
<td>absolute</td>
<td>绝对定位，相对于其上一个已经定位的父元素进行定位</td>
</tr>
<tr>
<td>fixed</td>
<td>固定定位，相对于浏览器窗口进行定位</td>
</tr>
</tbody></table>
<h1 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h1><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p>
<p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位！ 其实就是标准流的特性。</p>
<p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p>
<h1 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h1><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p>
<p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。</p>
<p>注意：   </p>
<ol>
<li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li>
<li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li>
</ol>
<p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p>
<h1 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h1><p>注意：绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p>
<h2 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h2><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p>
<p><img src="https://i.loli.net/2019/08/15/eWuCXg2hxtaBwoE.png" alt=""></p>
<h2 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h2><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p>
<p><img src="https://i.loli.net/2019/08/15/RSyV8PcbkQUaHmL.png" alt=""></p>
<h2 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h2><p>这个“子绝父相”很重要，是我们学习定位的口诀，时时刻刻记住的。</p>
<p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p>
<p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p>
<p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。但是因为子级是绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方。父盒子布局时，需要占有位置，因此父亲只能是相对定位. 所以子绝父相使用最多。</p>
<h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p>
<p>定位的盒子也可以水平或者垂直居中，有一个算法。</p>
<ol>
<li>首先left 50%   父盒子的一半大小</li>
<li>然后走自己外边距负的一半值就可以了 margin-left。</li>
</ol>
<h1 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位(fixed)"></a>固定定位(fixed)</h1><p>固定定位是绝对定位的一种特殊形式。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p>
<p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p>
<p>固定定位有两点：</p>
<ol>
<li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li>
<li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li>
</ol>
<p>ie6等低版本浏览器不支持固定定位。</p>
<h1 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h1><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p>
<p><img src="https://i.loli.net/2019/08/15/zUBLnr9a34bFgC8.png" alt=""></p>
<p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p>
<p>比如：  z-index: 2;</p>
<p>注意：</p>
<ol>
<li>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</li>
<li>如果取值相同，则根据书写顺序，后来居上。</li>
<li>后面数字一定不能加单位。</li>
<li>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</li>
</ol>
<h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><table>
<thead>
<tr>
<th>定位模式</th>
<th>是否脱标占有位置</th>
<th>是否可以使用边偏移</th>
<th>移动位置基准</th>
</tr>
</thead>
<tbody><tr>
<td>静态static</td>
<td>不脱标，正常模式</td>
<td>不可以</td>
<td>正常模式</td>
</tr>
<tr>
<td>相对定位relative</td>
<td>不脱标，占有位置</td>
<td>可以</td>
<td>相对自身位置移动（自恋型）</td>
</tr>
<tr>
<td>绝对定位absolute</td>
<td>完全脱标，不占有位置</td>
<td>可以</td>
<td>相对于定位父级移动位置（拼爹型）</td>
</tr>
<tr>
<td>固定定位fixed</td>
<td>完全脱标，不占有位置</td>
<td>可以</td>
<td>相对于浏览器移动位置（认死理型）</td>
</tr>
</tbody></table>
<h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p>
<p>** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。 **</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高9</title>
    <url>/2019/08/10/2019-08-10-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%989/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h1><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p>
<p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p>
<p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p>
<p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p>
<h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。</p>
<h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p>
<p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动</td>
</tr>
<tr>
<td>none</td>
<td>元素不浮动（默认值）</td>
</tr>
</tbody></table>
<h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找离它最近的父级元素对齐。但是不会超出内边距的范围。</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/11/pechtG5ruKLln8g.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/11/eSr5vFVp8h4ltxn.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</span><br></pre></td></tr></table></figure>

<p>总结：  浮动 —&gt;    </p>
<p>浮动的目的就是为了让多个块级元素同一行上显示。</p>
<p>float      浮 漏 特   </p>
<p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p>
<h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p>
<h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p>
<p>1、确定页面的版心（可视区）。</p>
<p>2、分析页面中的行模块，以及每个行模块中的列模块。</p>
<p>3、制作HTML结构 。</p>
<p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p>
<h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><p><img src="https://i.loli.net/2019/08/12/oqdWEUfi62Z7Dlx.jpg" alt=""></p>
<p>最普通的，最为常用的结构。</p>
<h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><p><img src="https://i.loli.net/2019/08/12/NKBJgVjr72OEdtU.jpg" alt=""></p>
<h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><p><img src="https://i.loli.net/2019/08/12/8S4KYVewypaZzd2.jpg" alt=""></p>
<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。<br><img src="https://i.loli.net/2019/08/12/jpB6Kd4xltQL1YO.jpg" alt=""></p>
<p><img src="https://i.loli.net/2019/08/12/rSNzU9H4KushGxo.jpg" alt=""></p>
<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p>
<p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure>

<p>优点： 通俗易懂，书写方便</p>
<p>缺点： 添加许多无意义的标签，结构化较差。  不推荐。</p>
<h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure>
<p>优点：  代码简洁</p>
<p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>
<h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p>
<p>使用方法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">"."</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure>

<p>优点： 符合闭合浮动思想  结构语义化正确</p>
<p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p>
<p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p>
<h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：  代码更简洁</p>
<p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高8</title>
    <url>/2019/08/05/2019-08-05-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%988/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>​<br><img src="https://i.loli.net/2019/08/05/7ofCclWuArpPJ6t.png" alt="盒子模型示意图"></p>
<h1 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h1><p>语法： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure>

<p>边框属性—设置边框样式（border-style）</p>
<p>边框样式用于定义页面中边框的风格，常用属性值如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">none：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure>

<h2 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h2><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>设置内容</td>
<td>样式属性</td>
<td>常用属性值</td>
</tr>
<tr>
<td>上边框</td>
<td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>下边框</td>
<td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>左边框</td>
<td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>右边框</td>
<td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>样式综合设置</td>
<td>border-style:上边 [右边 下边 左边];</td>
<td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td>
</tr>
<tr>
<td>宽度综合设置</td>
<td>border-width:上边 [右边 下边 左边];</td>
<td>像素值</td>
</tr>
<tr>
<td>颜色综合设置</td>
<td>border-color:上边 [右边 下边 左边];</td>
<td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td>
</tr>
<tr>
<td>边框综合设置</td>
<td>border:四边宽度 四边样式 四边颜色;</td>
<td></td>
</tr>
</tbody></table>
<h2 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h2><p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p>
<p>border-collapse:collapse; 表示边框合并在一起。 </p>
<h2 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h2><p>radius 半径（距离）</p>
<p>语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 左上角  右上角  右下角  左下角;</span><br></pre></td></tr></table></figure>

<h1 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h1><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p>
<p>padding-top:上内边距</p>
<p>padding-right:右内边距</p>
<p>padding-bottom:下内边距</p>
<p>padding-left:左内边距</p>
<p>注意：  后面跟几个数值表示的意思是不一样的。</p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1个值</td>
<td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td>
</tr>
<tr>
<td>4个值</td>
<td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td>
</tr>
</tbody></table>
<h1 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h1><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p>
<p>margin-top:上外边距</p>
<p>margin-right:右外边距</p>
<p>margin-bottom:下外边距</p>
<p>margin-left:左外边距</p>
<p>margin:上外边距 右外边距  下外边距  左外边</p>
<p>取值顺序跟内边距相同。</p>
<h2 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h2><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p>
<ol>
<li>必须是块级元素。     </li>
<li>盒子必须指定了宽度（width）</li>
</ol>
<p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h2><ol>
<li>文字水平居中是  text-align: center</li>
<li>盒子水平居中  左右margin 改为 auto </li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>插入图片 我们用的最多 比如产品展示类</li>
<li>背景图片我们一般用于小图标背景 或者 超大背景图片</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line">		<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">		<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">		<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">		<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">		<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line">	</span><br><span class="line">		<span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line">		<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h1><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p>
<p>我们尽量不要给行内元素指定上下的内外边距就好了。</p>
<h1 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h1><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<h2 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h2><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>
<p><img src="https://i.loli.net/2019/08/07/2CKvWhbYl5nMJyU.png" alt=""></p>
<p>解决方案：  避免就好了。</p>
<h2 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h2><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p>
<p><img src="https://i.loli.net/2019/08/07/EgDNQFL9w6l5zy4.png" alt=""></p>
<p>解决方案：</p>
<ol>
<li>可以为父元素定义1像素的上边框或上内边距。</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
<h1 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h1><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p>
<p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p>
<p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素实际大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p>
<p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p>
<p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小</strong>。</p>
<h1 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h1><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p>
<p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p>
<p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p>
<p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<ol>
<li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p>
</li>
<li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p>
</li>
<li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p>
</li>
</ol>
<h1 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h1><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p>
<p>可以分成两种情况：</p>
<p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p>
<p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p>
<p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  默认的设置 如果我们添加了 border属性 该容器的大小会发生改变</span></span><br><span class="line"><span class="comment">  因为他要优先保证内部的内容所占区域 不变</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  </span></span><br><span class="line"><span class="comment">  box-sizing  如果不设置 默认的值 就是 </span></span><br><span class="line"><span class="comment">  content-box: 优先保证内容的大小 对盒子进行缩放;</span></span><br><span class="line"><span class="comment">  border-box: 让 盒子 优先保证自己所占区域的大小,对内容进行压缩;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h1><p>语法格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/07/FlXYd7mz6NVstyU.png" alt=""></p>
<ol>
<li>前两个属性是必须写的。其余的可以省略。</li>
<li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset </li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">10px</span> solid orange;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">3px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(0,0,0,1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高7</title>
    <url>/2019/08/05/2019-08-05-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%987/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h1><p>所谓层叠性是指多种CSS样式的叠加。</p>
<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉。</p>
<p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p>
<p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p>
<ol>
<li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li>
<li>样式不冲突，不会层叠</li>
</ol>
<h1 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h1><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</span><br></pre></td></tr></table></figure>

<h1 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h1><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p>
<h2 id="CSS特殊性"><a href="#CSS特殊性" class="headerlink" title="CSS特殊性"></a>CSS特殊性</h2><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p>
<p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p>
<table>
<thead>
<tr>
<th>继承或者* 的贡献值</th>
<th>0,0,0,0</th>
</tr>
</thead>
<tbody><tr>
<td>每个元素（标签）贡献值为</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类贡献值为</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID贡献值为</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式贡献值</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important贡献值</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<p>权重是可以叠加的</p>
<p> 比如的例子：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line"></span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line"></span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line"></span><br><span class="line">.nav a       ------&gt;      0,0,1,1   </span><br><span class="line"></span><br><span class="line">#nav p       -----&gt;       0,1,0,1</span><br></pre></td></tr></table></figure>

<p>注意： </p>
<p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p>
<ol start="2">
<li>继承的 权重是 0</li>
</ol>
<p>总结优先级：</p>
<ol>
<li>使用了 !important声明的规则。</li>
<li>内嵌在 HTML 元素的 style属性里面的声明。</li>
<li>使用了 ID 选择器的规则。</li>
<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>
<li>使用了元素选择器的规则。</li>
<li>只包含一个通用选择器的规则。</li>
<li>同一类选择器则遵循就近原则。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总结：权重是优先级的算法，层叠是优先级的表现</span><br></pre></td></tr></table></figure>
<p>​ </p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高6</title>
    <url>/2019/08/01/2019-08-01-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%986/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p>
<h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p>
<p>示例： .selector { }</p>
<p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p>
<p>示例：</p>
<p>font-size: 12px;</p>
<h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">#username input &#123;&#125;</span><br><span class="line">.comment .avatar &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.page .header .login #username input &#123;&#125;</span><br><span class="line">.comment div * &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure>

<p>【强制】 属性定义后必须以分号结尾。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p>
<table>
<thead>
<tr>
<th>background-color</th>
<th>背景颜色</th>
</tr>
</thead>
<tbody><tr>
<td>background-image</td>
<td>背景图片地址</td>
</tr>
<tr>
<td>background-repeat</td>
<td>是否平铺</td>
</tr>
<tr>
<td>background-position</td>
<td>背景位置</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景固定还是滚动</td>
</tr>
<tr>
<td>背景的合写（复合属性）</td>
<td></td>
</tr>
<tr>
<td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>
<td></td>
</tr>
</tbody></table>
<h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure>

<p>参数： </p>
<p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p>
<p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p>
<p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p>
<h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure>

<p>参数： </p>
<p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p>
<p>no-repeat : 　背景图像不平铺</p>
<p>repeat-x : 　背景图像在横向上平铺</p>
<p>repeat-y : 　背景图像在纵向平铺 </p>
<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>
<h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure>

<p>参数： </p>
<p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p>
<p>说明： </p>
<p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p>
<p>注意：</p>
<ol>
<li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li>
<li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li>
</ol>
<p>实际工作用的最多的，就是背景图片居中对齐了。</p>
<h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>语法： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure>

<p>参数： </p>
<p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p>
<p>说明： </p>
<p>设置或检索背景图像是随对象内容滚动还是固定的。</p>
<h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p>
<p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>) <span class="selector-tag">repeat-y</span>  <span class="selector-tag">scroll</span> 50% 0 ;</span><br></pre></td></tr></table></figure>

<h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure>

<p>最后一个参数是alpha 透明度  取值范围 0~1之间</p>
<p>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p>
<h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p>
<p>其参数设置如下：</p>
<p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p>
<p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p>
<p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">background-image: url('images/gyt.jpg');</span><br><span class="line">			<span class="selector-tag">background-size</span>: 300<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line">			<span class="comment">/* background-size: contain; */</span></span><br><span class="line">			<span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure>

<h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p>
<ul>
<li>一个元素可以设置多重背景图像。 </li>
<li>每组属性间使用逗号分隔。 </li>
<li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li>
<li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,</span><br><span class="line">	   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,</span><br><span class="line">	   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;</span><br></pre></td></tr></table></figure>

<h2 id="凹凸文字案例"><a href="#凹凸文字案例" class="headerlink" title="凹凸文字案例"></a>凹凸文字案例</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">        &lt;meta charset="utf-8"&gt;</span><br><span class="line">        &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">        	<span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">			<span class="attribute">font</span>: <span class="number">700</span> <span class="number">80px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">			<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">			<span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">			<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">			<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div&gt;我是凸起的文字&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;我是凹下的文字&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><h3 id="文本的装饰"><a href="#文本的装饰" class="headerlink" title="文本的装饰"></a>文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">		body &#123;</span><br><span class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">		a &#123;</span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 50px;</span><br><span class="line"><span class="css">			<span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;  <span class="comment">/* 把a 行内元素转换为行内块元素 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;  <span class="comment">/* 文字水平居中 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">			font-size: 22px;</span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;  <span class="comment">/* 取消下划线 文本装饰 */</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过 给我们的链接添加背景图片*/</span></span></span><br><span class="line">			background: url(images/h.png) no-repeat; </span><br><span class="line">		&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>专区说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>申请资格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>兑换奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下载游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高5</title>
    <url>/2019/07/27/2019-07-27-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%985/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<hr />
>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。

<h1 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h1><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格。</p>
<p><img src="https://i.loli.net/2019/07/29/5d3e59fa6a64082735.png" alt="交集选择器"></p>
<h1 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h1><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p>
<p><img src="https://i.loli.net/2019/07/29/5d3e66318a79e75196.png" alt="并集选择器"></p>
<h1 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h1><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>
<p><img src="https://i.loli.net/2019/07/29/5d3e6ccf64f3135737.png" alt="后代选择器"></p>
<h1 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h1><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p>
<p><img src="https://i.loli.net/2019/08/01/5d424f8c23e0c54263.png" alt="子元素选择器"></p>
<h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取到 拥有 该属性的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=font]</span> &#123; <span class="comment">/*  class^=font 表示 font 开始位置就行了 */</span></span><br><span class="line">			<span class="attribute">color</span>: pink;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=footer]</span> &#123; <span class="comment">/*  class$=footer 表示 footer 结束位置就行了 */</span></span><br><span class="line">			<span class="attribute">color</span>: skyblue;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=tao]</span> &#123; <span class="comment">/* class*=tao 表示tao 在任意位置都可以 */</span></span><br><span class="line">			<span class="attribute">color</span>: green;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"24font"</span>&gt;</span>属性选择器123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-nav"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h1><ol>
<li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li>
<li>E::first-line 文本第一行；</li>
<li>E::selection 可改变选中文本的样式；</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首行特殊样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="comment">/* font-size: 50px; */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、E::before和E::after</p>
<p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::befor</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"开始"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"结束"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p>
<p>E:after、E:before后面的练习中会反复用到，目前只需要有个大致了解</p>
<p>“:” 与 “::” 区别在于区分伪类和伪元素</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高4</title>
    <url>/2019/07/21/2019-07-21-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%984/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p>
<h2 id="内部样式表（内嵌式）"><a href="#内部样式表（内嵌式）" class="headerlink" title="内部样式表（内嵌式）"></a>内部样式表（内嵌式）</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span>&gt;</span></span><br><span class="line">    选择器 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p>
<h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; 内容 &lt;/标签名&gt;</span><br></pre></td></tr></table></figure>

<p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p>
<h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：  link 是个单标签哦!!!</p>
<p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</span><br><span class="line">type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</span><br><span class="line">rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span><br></pre></td></tr></table></figure>

<h2 id="三种样式表总结"><a href="#三种样式表总结" class="headerlink" title="三种样式表总结"></a>三种样式表总结</h2><table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody><tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>没有实现样式和结构相分离</td>
<td>较少</td>
<td>控制一个标签（少）</td>
</tr>
<tr>
<td>内嵌样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面（中）</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，强烈推荐</td>
<td>控制整个站点（多）</td>
</tr>
</tbody></table>
<h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p>
<h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure>

<p>块级元素的特点：</p>
<p>（1）总是从新行开始</p>
<p>（2）高度，行高、外边距以及内边距都可以控制。</p>
<p>（3）宽度默认是容器的100%</p>
<p>（4）可以容纳内联元素和其他块元素。</p>
<h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure>

<p>行内元素的特点：</p>
<p>（1）和相邻行内元素在一行上。</p>
<p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p>
<p>（3）默认宽度就是它本身内容的宽度。</p>
<p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p>
<p>注意：</p>
<ol>
<li>只有文字才能组成段落，因此p里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
<li>链接里面不能再放链接。</li>
</ol>
<h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">块级元素的特点：</span><br><span class="line">（1）总是从新行开始</span><br><span class="line">（2）高度，行高、外边距以及内边距都可以控制。</span><br><span class="line">（3）宽度默认是容器的100%</span><br><span class="line">（4）可以容纳内联元素和其他块元素。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行内元素的特点：</span><br><span class="line">（1）和相邻行内元素在一行上。</span><br><span class="line">（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</span><br><span class="line">（3）默认宽度就是它本身内容的宽度。</span><br><span class="line">（4）行内元素只能容纳文本或则其他行内元素。</span><br></pre></td></tr></table></figure>

<h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点：</span><br><span class="line">（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</span><br><span class="line">（2）默认宽度就是它本身内容的宽度。</span><br><span class="line">（3）高度，行高、外边距以及内边距都可以控制。</span><br></pre></td></tr></table></figure>

<h2 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h2><p>块转行内：display：inline；</p>
<p>行内转块：display:block；</p>
<p>块、行内转行内块：display:inline-block；</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高3</title>
    <url>/2019/07/20/2019-07-20-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%983/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h1><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p>
<p>1.预定义的颜色值，如red，green，blue等。</p>
<p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p>
<p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p>
<p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p>
<h1 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h1><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p>
<p>一般情况下，行距比字号大7.8像素左右就可以了。</p>
<h1 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</span><br></pre></td></tr></table></figure>

<p>left：左对齐（默认值）</p>
<p>right：右对齐</p>
<p>center：居中对齐</p>
<h1 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h1><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p>
<p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p>
<h1 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h1><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p>
<h1 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h1><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p>
<p>word-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p>
<h1 id="颜色半透明-css3"><a href="#颜色半透明-css3" class="headerlink" title="颜色半透明(css3)"></a>颜色半透明(css3)</h1><p>文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(<span class="selector-tag">r</span>,<span class="selector-tag">g</span>,<span class="selector-tag">b</span>,<span class="selector-tag">a</span>)  <span class="selector-tag">a</span> 是<span class="selector-tag">alpha</span>  透明的意思  取值范围 0~1之间    <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>)</span><br></pre></td></tr></table></figure>

<h1 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h1><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/07/20/5d32fe6890f2d89601.png" alt="文字阴影参数"></p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高2</title>
    <url>/2019/07/19/2019-07-19-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%982/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h1><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  或者</span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p>
<h1 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h1><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签调用的时候用 class=“类名”  即可。</span><br></pre></td></tr></table></figure>

<p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line">2.不建议使用“_”下划线来命名CSS选择器。</span><br><span class="line">  输入的时候少按一个shift键;</span><br><span class="line">　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)</span><br><span class="line">　能良好区分JavaScript变量命名(JS变量命名是用“_”)</span><br><span class="line">3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</span><br></pre></td></tr></table></figure>

<h1 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h1><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</span><br><span class="line">2. 各个类名中间用空格隔开。</span><br></pre></td></tr></table></figure>

<p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p>
<h1 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h1><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p>
<p>用法基本和类选择器相同。</p>
<h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p>
<p>类选择器（class） 好比人的名字，是可以多次重复使用的；</p>
<p>id选择器好比人的身份证号码，全中国是唯一的，不得重复。只能使用一次。</p>
<p><strong><em>id选择器和类选择器最大的不同在于使用次数上。</em></strong></p>
<h1 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h1><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>这个通配符选择器，作用范围太广，所以一般也不用。</p>
<h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><p>伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">为了和我们刚才学的类选择器相区别，类选择器是一个点，比如 <span class="selector-class">.demo</span> &#123;&#125;   而我们的伪类用2个点，就是冒号 ，比如<span class="selector-pseudo">:link</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h2><ul>
<li>:link      /* 未访问的链接 */</li>
<li>:visited   /* 已访问的链接 */</li>
<li>:hover     /* 鼠标移动到链接上 */</li>
<li>:active    /* 选定的链接 */</li>
</ul>
<p>注意写的时候，他们的顺序尽量不要颠倒。按照 lvha的顺序。    </p>
<h2 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h2><ul>
<li>:first-child :选取属于其父元素的首个子元素的指定选择器</li>
<li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li>
<li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li>
<li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式，如odd、even、2n、3n等；</li>
</ul>
<h2 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h2><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">		<span class="attribute">color</span>: red;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-CSS入门及提高1</title>
    <url>/2019/07/19/2019-07-19-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-CSS%E5%85%A5%E9%97%A8%E5%8F%8A%E6%8F%90%E9%AB%981/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第二部分：CSS入门及提高；</p>
</blockquote>
<h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p>
<h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><p>CSS的最大贡献就是：实现了网页结构和样式的相分离。拯救了混乱的HTML，让我们的网页更加丰富多彩，当然更加拯救了我们web开发者。 </p>
<h1 id="CSS定义"><a href="#CSS定义" class="headerlink" title="CSS定义"></a>CSS定义</h1><p>CSS(Cascading Style Sheets)</p>
<p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>
<p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>
<h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p>
<p><img src="https://i.loli.net/2019/07/19/5d3110402ed4e50465.png" alt="CSS样式规则"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在上面的样式规则中:</span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line">4.属性和属性值之间用英文“:”连接。</span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure>

<h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</p>
<h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p>
<p>p{ font-family:”微软雅黑”;}</p>
<p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p>
<blockquote>
<p><img src="media/good.png" />常用技巧：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 现在网页中普遍使用14px+。</span><br><span class="line">2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</span><br><span class="line">3. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure>

<h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p>
<p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p>
<p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p>
<p>可以通过escape()  来测试属于什么字体。</p>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody></table>
<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体。</p>
<h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用b和strong标签之外，可以使用CSS来实现，但是CSS是没有语义的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">数字 400 等价于 <span class="selector-tag">normal</span>，而 700 等价于 <span class="selector-tag">bold</span>。  但是我们更喜欢用数字来表示。</span><br></pre></td></tr></table></figure>

<h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用i和em标签之外，可以使用CSS来实现，但是CSS       是没有语     义的。</p>
<p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>
<p>normal：默认值，浏览器会显示标准的字体样式。</p>
<p>italic：浏览器会显示斜体的字体样式。</p>
<h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line"></span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br></pre></td></tr></table></figure>

<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-HTML入门与实践4</title>
    <url>/2019/07/18/2019-07-18-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-HTML%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B54/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第一部分：HTML入门与实践；</p>
</blockquote>
<h1 id="HTML5新标签"><a href="#HTML5新标签" class="headerlink" title="HTML5新标签"></a>HTML5新标签</h1><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><p> w3c  手册中文官网     :   <a href="http://w3school.com.cn/" target="_blank" rel="noopener">http://w3school.com.cn/</a></p>
<ul>
<li><p>header：定义文档的页眉 头部</p>
</li>
<li><p>nav：定义导航链接的部分</p>
</li>
<li><p>footer：定义文档或节的页脚 底部</p>
</li>
<li><p>article：定义文章。</p>
</li>
<li><p>section：定义文档中的节（section、区段）</p>
</li>
<li><p>aside：定义其所处内容之外的内容 侧边</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span> 语义 :定义页面的头部  页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>  语义 :定义导航栏 <span class="tag">&lt;/<span class="name">nav</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> 语义: 定义 页面底部 页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> 语义:  定义文章<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> 语义： 定义区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 语义： 定义其所处内容之外的内容 侧边<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>datalist   标签定义选项列表。请与 input 元素配合使用该元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"输入明星"</span> <span class="attr">list</span>=<span class="string">"star"</span>/&gt;</span> <span class="comment">&lt;!--  input里面用 list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span>   <span class="comment">&lt;!-- datalist 里面用 id  来实现和 input 链接 --&gt;</span>  </span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘若英<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>郭郭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>fieldset 元素可将表单内的相关元素分组，打包      legend 搭配使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">    		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    		密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="新增的input-type属性值："><a href="#新增的input-type属性值：" class="headerlink" title="新增的input type属性值："></a>新增的input type属性值：</h2><table>
<thead>
<tr>
<th><strong>类型****</strong></th>
<th><strong>使用示例****</strong></th>
<th><strong>含义****</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>email****</strong></td>
<td><input type="email"></td>
<td>输入邮箱格式</td>
</tr>
<tr>
<td><strong>tel****</strong></td>
<td><input type="tel"></td>
<td>输入手机号码格式</td>
</tr>
<tr>
<td><strong>url****</strong></td>
<td><input type="url"></td>
<td>输入url格式</td>
</tr>
<tr>
<td><strong>number****</strong></td>
<td><input type="number"></td>
<td>输入数字格式</td>
</tr>
<tr>
<td><strong>search****</strong></td>
<td><input type="search"></td>
<td>搜索框（体现语义化）</td>
</tr>
<tr>
<td><strong>range****</strong></td>
<td><input type="range"></td>
<td>自由拖动滑块</td>
</tr>
<tr>
<td><strong>time****</strong></td>
<td><input type="time"></td>
<td>小时分钟</td>
</tr>
<tr>
<td><strong>date****</strong></td>
<td><input type="date"></td>
<td>年月日</td>
</tr>
<tr>
<td><strong>datetime****</strong></td>
<td><input type="datetime"></td>
<td>时间</td>
</tr>
<tr>
<td><strong>month****</strong></td>
<td><input type="month"></td>
<td>月年</td>
</tr>
<tr>
<td><strong>week****</strong></td>
<td><input type="week"></td>
<td>星期 年</td>
</tr>
</tbody></table>
<h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table>
<thead>
<tr>
<th><strong>属性****</strong></th>
<th><strong>用法****</strong></th>
<th><strong>含义****</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>placeholder****</strong></td>
<td><input type="text" placeholder="请输入用户名"></td>
<td>占位符  当用户输入的时候 里面的文字消失  删除所有文字，自动返回</td>
</tr>
<tr>
<td><strong>autofocus****</strong></td>
<td><input type="text" autofocus></td>
<td>规定当页面加载时 input 元素应该自动获得焦点</td>
</tr>
<tr>
<td><strong>multiple****</strong></td>
<td><input type="file" multiple></td>
<td>多文件上传</td>
</tr>
<tr>
<td><strong>autocomplete****</strong></td>
<td><input type="text" autocomplete="off"></td>
<td>规定表单是否应该启用自动完成功能  有2个值，一个是on 一个是off      on 代表记录已经输入的值  1.autocomplete 首先需要提交按钮 <br/>2.这个表单您必须给他名字</td>
</tr>
<tr>
<td><strong>required****</strong></td>
<td><input type="text" required></td>
<td>必填项  内容不能为空</td>
</tr>
<tr>
<td><strong>accesskey****</strong></td>
<td><input type="text" accesskey="s"></td>
<td>规定激活（使元素获得焦点）元素的快捷键   采用 alt + s的形式</td>
</tr>
</tbody></table>
<h1 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h1><ul>
<li><p>embed：标签定义嵌入的内容</p>
</li>
<li><p>audio：播放音频</p>
</li>
<li><p>video：播放视频</p>
</li>
</ul>
<h2 id="多媒体-embed"><a href="#多媒体-embed" class="headerlink" title="多媒体 embed"></a>多媒体 embed</h2><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p>
<p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p>
<h2 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h2><p>HTML5通过<audio>标签来解决音频播放的问题。可以通过附加属性可以更友好控制音频的播放，如：<br>autoplay 自动播放</p>
<p>controls 是否显不默认播放控件</p>
<p>loop 循环播放   loop = 2 就是循环2次   loop  或者  loop = “-1”   无限循环</p>
<h2 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h2><p>HTML5通过<video>标签来解决视频播放的问题。</p>
<p>同样，通过附加属性可以更友好的控制视频的播放</p>
<p>autoplay 自动播放</p>
<p>controls 是否显示默认播放控件</p>
<p>loop 循环播放</p>
<p>width 设置播放窗口宽度</p>
<p>height 设置播放窗口的高度</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-HTML入门与实践3</title>
    <url>/2019/07/17/2019-07-17-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-HTML%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B53/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。此部分视频网页没有。具体查看这里：<a href="https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。" target="_blank" rel="noopener">https://pan.baidu.com/s/1exZQc9bXadphQfd3k_vYJQ（提取码：7sk1）。</a><br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第一部分：HTML入门与实践；</p>
</blockquote>
<h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>创建表格的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.table用于定义一个表格。</span><br><span class="line"></span><br><span class="line">2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</span><br><span class="line"></span><br><span class="line">3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</span><br></pre></td></tr></table></figure>

<h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p><img src="https://i.loli.net/2019/07/17/5d2e7ac7dccd934808.png" alt="表格属性"></p>
<h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，即为设置了表头的表格。需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p>
<h2 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。</span><br><span class="line">必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。</span><br><span class="line">位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure>
<h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><p><strong>表格的标题： caption</strong></p>
<p><strong>定义和用法</strong></p>
<p>caption 元素定义表格标题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>caption 标签必须紧随 table 标签之后。只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p>
<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并：rowspan    跨列合并：colspan</p>
<p>合并的顺序：跨行合并从上到下合并，跨列合并从左到右合并。 </p>
<h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol>
<li><p>表格提供了HTML 中定义表格式数据的方法。</p>
</li>
<li><p>表格中由行中的单元格组成。</p>
</li>
<li><p>表格中没有列元素，列的个数取决于行的单元格个数。</p>
</li>
<li><p>表格不要纠结于外观，那是CSS 的作用。</p>
</li>
</ol>
<h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p>
<ol>
<li>表单控件：<br>包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</li>
<li>提示信息：<br>一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</li>
<li>表单域：<br>相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</li>
</ol>
<h2 id="input-控件"><a href="#input-控件" class="headerlink" title="input 控件"></a>input 控件</h2><p>&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。<br><img src="https://i.loli.net/2019/07/17/5d2e915f6dcf539772.png" alt="input 控件属性"></p>
<h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>label标签为input元素定义标注(标签)。</p>
<p>作用：用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p>
<h2 id="textarea控件"><a href="#textarea控件" class="headerlink" title="textarea控件"></a>textarea控件</h2><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li>
<li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li>
</ol>
<h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常用属性：</p>
<ol>
<li>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li>
<li>method<br>用于设置表单数据的提交方式，其取值为get或post。</li>
<li>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</li>
</ol>
<p>注意：每个表单都应该有自己表单域。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-HTML入门与实践2</title>
    <url>/2019/07/16/2019-07-16-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-HTML%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B52/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。<br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第一部分：HTML入门与实践；</p>
</blockquote>
<h1 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h1><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><p>单词缩写：  head 头部<br>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</span><br></pre></td></tr></table></figure>
<p>标题标签语义：作为标题使用，并且依据重要性递减</p>
<blockquote>
<p>注意：h1标签因为重要，尽量少用。 一般h1都是给logo使用。</p>
</blockquote>
<h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><p>单词缩写：paragraph  段落<br>在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
<h2 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h2><p>单词缩写：horizontal 横线<br>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，&#60; hr /&#62;就是创建横跨网页水平线的标签。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>   是单标签</span><br></pre></td></tr></table></figure>

<p>在网页中显示默认样式的水平线。</p>
<h2 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h2><p>单词缩写：break   打断 ,换行</p>
<p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="div-span标签"><a href="#div-span标签" class="headerlink" title="div span标签"></a>div span标签</h2><p>div  span是没有语义的，是我们网页布局主要的2个盒子。</p>
<p>div 就是division的缩写，分割，分区的意思。其实有很多div来组合网页。</p>
<p>span, 跨度，跨距；范围    </p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。<br><img src="https://i.loli.net/2019/07/16/5d2d912790ee149390.png" alt="文本格式化标签"></p>
<h1 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h1><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的语法中，</p>
<ol>
<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>
<li>任何标签的属性都有默认值，省略该属性则取默认值。</li>
</ol>
<h1 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h1><p>单词缩写：image  图像</p>
<p>其基本语法格式如下：</p>
<p>该语法中src属性用于指定图像文件的路径和文件名，它是img标签的必需属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/07/16/5d2db8a5aa0ae94843.png" alt="/img标记属性"></p>
<h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><h2 id="锚点标签"><a href="#锚点标签" class="headerlink" title="锚点标签"></a>锚点标签</h2><p>单词缩写：anchor 的缩写 。基本解释 锚, 铁锚 的</p>
<p>在HTML中创建超链接只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用。</p>
<p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p>
<p>注意：</p>
<ol>
<li>外部链接 需要添加 http:// </li>
<li>内部链接 直接链接内部页面名称即可 比如 &#60; a href=”index.html”&#62; 首页  &#60;/a  &#62;</li>
<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li>
<li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li>
</ol>
<h3 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span> "链接文本" <span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本。</span><br><span class="line"></span><br><span class="line">2.使用相应的“id=id名”标注跳转目标的位置。</span><br></pre></td></tr></table></figure>

<h2 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h2><p>base 可以设置整体链接的打开状态。<br>base 写到 &#60; head &#62;   &#60; /head &#62; 之间。</p>
<h1 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h1><p><img src="https://i.loli.net/2019/07/16/5d2dc2d50ddaf51377.png" alt="特殊字符标签"></p>
<h1 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h1><p>基本语法格式如下：      </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>路径可以分为： 相对路径和绝对路径</p>
<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><ol>
<li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li>
<li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li>
<li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li>
</ol>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p>
<h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>容器里面装载着文字或图表的一种形式，叫列表。</p>
<p>列表最大的特点就是整齐 、整洁、 有序</p>
<h2 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的几点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure>
<h2 id="有序列表ol"><a href="#有序列表ol" class="headerlink" title="有序列表ol"></a>有序列表ol</h2><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://i.loli.net/2019/07/16/5d2ddadf1f0e569351.png" alt="总结"></p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发(1)-HTML入门与实践1</title>
    <url>/2019/07/16/2019-07-16-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91(1)-HTML%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B51/</url>
    <content><![CDATA[<blockquote>
<p>系列课程地址：<a href="https://edu.aliyun.com/roadmap/frontend?spm=5176.8764702.aliyun-edu-index-001.6.324e4679APt7uq" target="_blank" rel="noopener">戳这里</a>。<br>系列课程共分为三部分：阶段 1：HTML+CSS；阶段 2：JavaScript；阶段 3：开发工具；阶段 4：前端框架；阶段 5：移动及服务端开发。<br>这里介绍阶段 1：HTML+CSS中的第一部分：HTML入门与实践；</p>
</blockquote>
<h1 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h1><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><ol>
<li><p>Trident(IE内核)<br>国内许多双核浏览器其中一核便是Trident，美名其曰“兼容模式”。代表：IE、傲游、世界之窗、猎豹、360极速、百度……Windows10发布之后，IE将其内置浏览器命名为Edge，最显著特点就是其新内核EdgeHTML。</p>
</li>
<li><p>Gecko(firefox)<br>火狐浏览器采用该内核，特点是代码完全公开，因此开发程序较高，可惜遇到了猪一样的队友flash，神一样的对手chrome，故这几年已经没落。</p>
</li>
<li><p>Webkit(safari)<br>代表：safari、傲游3、Android4.4之前默认浏览器。</p>
</li>
<li><p>Chromium/Bink(chrome)<br>内置于chrome浏览器中，大部分国产浏览器最新版都采用Bink内核，以及Android4.4之后默认浏览器。</p>
</li>
</ol>
<h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><p>Web标准是由W3C和其他标准化组织制定的一系列标准的集合，主要包括结构、表现和行为三个方面。</p>
<ol>
<li>结构标准：用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分；</li>
<li>样式标准：用于设置网页元素的版式、大小、颜色等外观形式，主要指CSS；</li>
<li>行为标准：指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分。</li>
</ol>
<p>理想状态的源码：.html .css .js</p>
<h1 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h1><h2 id="html骨架"><a href="#html骨架" class="headerlink" title="html骨架"></a>html骨架</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;title&gt;&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="标签及分类"><a href="#标签及分类" class="headerlink" title="标签及分类"></a>标签及分类</h2><p>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素。</p>
<p>1.双标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>2.单标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="开发工具sublime"><a href="#开发工具sublime" class="headerlink" title="开发工具sublime"></a>开发工具sublime</h2><p>在页面中输入 以下2个单词</p>
<ol>
<li>html: 5   </li>
<li>!</li>
</ol>
<p>在sublime里面然后按下tab键盘即可生成HTML骨架。<br>注意：我这里在官网下载安装sublime text3之后，上述功能并不能使用，解决办法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.Preference ==&gt; Browser Packages，打开文件夹，发现只有一个User文件夹；</span><br><span class="line">2.下载emmet-sublime-master.zip，解压，下载地址：https://github.com/sergeche/emmet-sublime/archive/master.zip</span><br><span class="line">，将解压好的文件夹——复制到第一步所提到的文件夹中；</span><br><span class="line">3.重启sublime，PyV8文件夹自动加载；</span><br><span class="line">4.打开sublime，用command + shift + p调出命令窗口，输入install,选中package control：install package，等待1-2秒，下拉选中emmet回车，等待2-3秒，重启sublime。</span><br></pre></td></tr></table></figure>

<h2 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>

<p>这句话就是告知我们使用的是 html 5 的版本。html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p>
<!DOCTYPE><p> 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><meta charset="UTF-8">

<p>utf-8是目前最常用的字符集编码方式，使用utf-8这样就避免出现字符集不统一而引起乱码的情况了。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkDevelop阿里云物联网应用开发方案</title>
    <url>/2019/07/15/2019-07-15-%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%89%A9%E8%81%94%E7%BD%91%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>关于阿里云物联网平台的介绍前边已涉及，在这里不再做太多介绍；<br>学习视频地址：<a href="https://edu.aliyun.com/course/1693?spm=5176.10731542.0.0.55e61b3anm2b7N" target="_blank" rel="noopener">戳这里</a>。</p>
</blockquote>
<h1 id="STM32节点设备接入阿里云物联网平台"><a href="#STM32节点设备接入阿里云物联网平台" class="headerlink" title="STM32节点设备接入阿里云物联网平台"></a>STM32节点设备接入阿里云物联网平台</h1><h1 id="服务端应用开发"><a href="#服务端应用开发" class="headerlink" title="服务端应用开发"></a>服务端应用开发</h1><h2 id="服务端软件架构介绍"><a href="#服务端软件架构介绍" class="headerlink" title="服务端软件架构介绍"></a>服务端软件架构介绍</h2><p>这一节的内容主要基于物联网架构中的应用层。<br><img src="https://i.loli.net/2019/07/15/5d2c446c3325c85531.png" alt="应用层在系统中定位"></p>
<p><img src="https://i.loli.net/2019/07/15/5d2c54875389695455.png" alt="应用层系统技术体系"></p>
<h2 id="后端服务开发"><a href="#后端服务开发" class="headerlink" title="后端服务开发"></a>后端服务开发</h2><h3 id="认识后端框架"><a href="#认识后端框架" class="headerlink" title="认识后端框架"></a>认识后端框架</h3><p>-前端是软件系统中直接和用户交互的部分，后端控制着软件的输出。前端的JavaScript代码通过ajsx等技术向后端进行网络请求，后端收到请求后对数据库进行操作，返回给前端JSON数据，前端把相应数据战士在页面上；</p>
<p>-后端常用语言包括Java、MySQL、XML等；</p>
<p>-本例程基于以下框架进行开发：MySQL、Mybatis、SpringBoot；<br><img src="https://i.loli.net/2019/07/15/5d2c57ff4536991340.png" alt="后端框架"></p>
<h3 id="应用系统开发"><a href="#应用系统开发" class="headerlink" title="应用系统开发"></a>应用系统开发</h3><p><img src="https://i.loli.net/2019/07/15/5d2c6d8d14c9879064.png" alt=""></p>
<h3 id="应用调试与部署"><a href="#应用调试与部署" class="headerlink" title="应用调试与部署"></a>应用调试与部署</h3><h2 id="前端服务开发"><a href="#前端服务开发" class="headerlink" title="前端服务开发"></a>前端服务开发</h2><h3 id="认识前端框架"><a href="#认识前端框架" class="headerlink" title="认识前端框架"></a>认识前端框架</h3><p>-前端的开发语言：HTML、JavaScript、CSS；</p>
<ol>
<li>HTML即超文本标记语言，用来描述网页的一种语言，与编程语言不同，它用来记录信息而非执行逻辑处理，HTML语言的内容被各类标签所包裹；</li>
<li>JavaScript是一种直译试的脚本语言，是一种动态的解释形语言，它不需要经过编辑为机器码再运行，而是直接可以由解释器（称为JavaScript引擎，内置再各类浏览器中）运行；</li>
<li>CSS是指层叠样式表，定义如何显示HTML元素，一般存储在.css后缀的文件中，通过HTML标签中的className以及id属性来进行绑定；</li>
</ol>
<p>-前端框架：React框架、Umi.js框架、Ant Design UI组件、Dva.js数据流方案；</p>
<ol>
<li>React框架提供底层技术支撑，是一个为数据提供渲染为HTML视图的开源JavaScript库，React技术方案-虚拟DOM，React核心思想-组件；</li>
<li>Umi.js框架集成了页面路由、项目打包等工具，简化开发者配置和繁杂的操作；</li>
<li>Ant Design UI组件提供丰富的页面UI组件库，Umi在初始化时选择antd插件即可集成，也可以通过命令行执行npm install -g antd进行安装；</li>
<li>Dva.js数据流方案，将UI和数据解耦，提高前端的开发效率，Umi在初始化时选择dva插件即可集成，也可以通过命令行执行npm install -g dva进行安装；</li>
</ol>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>ECS</tag>
        <tag>IOT</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkDevelop阿里云物联网应用开发方案</title>
    <url>/2019/07/15/2019-07-15-LinkDevelop%E9%98%BF%E9%87%8C%E4%BA%91%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>阿里云的物联网应用开发，即<a href="https://iot.aliyun.com/products/iotstudio" target="_blank" rel="noopener">Link Develop</a>。虽然现在已经不存在，被IoT Studio所取代，但基本框架并没有改变，所以在此仍然简单了解学习一下。<br>学习视频地址：<a href="https://edu.aliyun.com/course/1392/learn?spm=5176.8764728.aliyun-edu-course-header.15.6926319aoN2rnZ#lesson/11620" target="_blank" rel="noopener">戳这里</a>。</p>
</blockquote>
<h1 id="设备开发"><a href="#设备开发" class="headerlink" title="设备开发"></a>设备开发</h1><p>-将设备模型抽象成三类：属性、服务、事件；<br>-实时查看设备上报的数据并进行在线调试；</p>
<h1 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h1><p>-直接使用官方根据物联网需求建好的服务；<br>-做服务的二次开发；</p>
<h1 id="Bone开发框架"><a href="#Bone开发框架" class="headerlink" title="Bone开发框架"></a>Bone开发框架</h1><p><a href="https://bone.aliyun.com/" target="_blank" rel="noopener">Bone开发框架</a>分为两部分：Bone Moblie和Bone Web。<br>Bone Web是一个基于react+redux封装的Web开发框架，在使用上进行了简化并且提供了一些常用的UI组件。<br>可以在此下载模板进行三元组的修改之后打包上传，进行构建，实现简单功能的实现。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>ECS</tag>
        <tag>IOT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_9</title>
    <url>/2019/06/26/2019-06-26-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_9/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="从数据处理到人工智能"><a href="#从数据处理到人工智能" class="headerlink" title="从数据处理到人工智能"></a>从数据处理到人工智能</h1><p>数据表示 ==&gt; 数据清洗 ==&gt; 数据统计 ==&gt; 数据可视化 ==&gt; 数据挖掘 ==&gt; 人工智能 </p>
<h2 id="Python库之数据分析"><a href="#Python库之数据分析" class="headerlink" title="Python库之数据分析"></a>Python库之数据分析</h2><p>Numpy:表达N维数组的最基本库；<br>Pandas:Python数据分析高层次应用；<br>SciPy：数学、科学和工程计算功能库；</p>
<h2 id="Python库之数据可视化"><a href="#Python库之数据可视化" class="headerlink" title="Python库之数据可视化"></a>Python库之数据可视化</h2><p>Matpoltlib:高质量的二维数据可视化库；<br>Seaborn:统计类数据可视化功能库；<br>Mayavi：三维科学数据可视化功能库；</p>
<h2 id="Python库之文本处理"><a href="#Python库之文本处理" class="headerlink" title="Python库之文本处理"></a>Python库之文本处理</h2><p>PyPDF2:用来处理PDF文件的工具集；<br>NLTK:自然语言处理第三方库；<br>Python-docx：创建或更新Microsoft Word文件的第三方库；</p>
<h2 id="Python库之机器学习"><a href="#Python库之机器学习" class="headerlink" title="Python库之机器学习"></a>Python库之机器学习</h2><p>Scikit-learn:机器学习方法工具集；<br>TensorFlow:AlphaGO背后的机器学习计算框架；<br>MXNet：基于神经网络的深度学习计算框架；</p>
<h1 id="实例：霍兰德人格分析雷达图"><a href="#实例：霍兰德人格分析雷达图" class="headerlink" title="实例：霍兰德人格分析雷达图"></a>实例：霍兰德人格分析雷达图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#HollandRadarDraw</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib</span><br><span class="line">matplotlib.rcParams[&apos;font.family&apos;]=&apos;SimHei&apos;</span><br><span class="line">radar_labels = np.array([&apos;研究型(I)&apos;,&apos;艺术型(A)&apos;,&apos;社会型(S)&apos;,\</span><br><span class="line">                         &apos;企业型(E)&apos;,&apos;常规型(C)&apos;,&apos;现实型(R)&apos;]) #雷达标签</span><br><span class="line">nAttr = 6</span><br><span class="line">data = np.array([[0.40, 0.32, 0.35, 0.30, 0.30, 0.88],</span><br><span class="line">                 [0.85, 0.35, 0.30, 0.40, 0.40, 0.30],</span><br><span class="line">                 [0.43, 0.89, 0.30, 0.28, 0.22, 0.30],</span><br><span class="line">                 [0.30, 0.25, 0.48, 0.85, 0.45, 0.40],</span><br><span class="line">                 [0.20, 0.38, 0.87, 0.45, 0.32, 0.28],</span><br><span class="line">                 [0.34, 0.31, 0.38, 0.40, 0.92, 0.28]]) #数据值</span><br><span class="line">data_labels = (&apos;艺术家&apos;, &apos;实验员&apos;, &apos;工程师&apos;, &apos;推销员&apos;, &apos;社会工作者&apos;,&apos;记事员&apos;)</span><br><span class="line">angles = np.linspace(0, 2*np.pi, nAttr, endpoint=False)</span><br><span class="line">data = np.concatenate((data, [data[0]]))</span><br><span class="line">angles = np.concatenate((angles, [angles[0]]))</span><br><span class="line">fig = plt.figure(facecolor=&quot;white&quot;)</span><br><span class="line">plt.subplot(111, polar=True)</span><br><span class="line">plt.plot(angles,data,&apos;o-&apos;, linewidth=1, alpha=0.2)</span><br><span class="line">plt.fill(angles,data, alpha=0.25)</span><br><span class="line">plt.thetagrids(angles*180/np.pi, radar_labels,frac = 1.2)</span><br><span class="line">plt.figtext(0.52, 0.95, &apos;霍兰德人格分析&apos;, ha=&apos;center&apos;, size=20)</span><br><span class="line">legend = plt.legend(data_labels, loc=(0.94, 0.80), labelspacing=0.1)</span><br><span class="line">plt.setp(legend.get_texts(), fontsize=&apos;large&apos;)</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.savefig(&apos;holland_radar.jpg&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>运行程序会发现，所有中文字体都变成了方框，网上找到了不少方法，在此记录自己成功的方案，总体来讲就是为系统安装需要的SimHei字体并增加到matplotlib中。</p>
<p>(1)下载一个ttf中文字体，并在系统中安装。可在此下载 <a href="https://github.com/dolbydu/font" target="_blank" rel="noopener">https://github.com/dolbydu/font</a>, 我这里下载好后放在了桌面。</p>
<p>(2)在 /usr/share/fonts 路径下创建存放此字体的文件夹myfonts，并下载的ttf文件复制到此文件夹中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/share/fonts</span><br><span class="line">sudo mkdir myfonts</span><br><span class="line">cd myfonts/</span><br><span class="line">sudo cp /home/hpf/桌面/SimHei.ttf  /usr/share/fonts/myfonts/</span><br></pre></td></tr></table></figure>

<p>(3)给系统安装这个字体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#生成字体索引信息. 会显示字体的font-family</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">#更新字体缓存：</span><br><span class="line">fc-cache</span><br></pre></td></tr></table></figure>
<p>此时在终端运行:fc-list :lang=zh，会发现系统已经安装。</p>
<p>(4)修改matplotlibrc文件<br>找到路径/home/hpf/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 去掉这一行注释</span><br><span class="line">font.family         : sans-serif        </span><br><span class="line"># 去掉这一行注释，并新增我们刚下载的中文字体　</span><br><span class="line">font.sans-serif     : DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif,SimHei</span><br></pre></td></tr></table></figure>
<p>下面这句注释要去掉，不然中文减号也显示方块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axes.unicode_minus  : False</span><br></pre></td></tr></table></figure>

<p>(5)为matplotlib增加中文字体<br>将下载的字体文件复制一份到步骤4找到的配置文件的同级文件夹fonts/ttf中。</p>
<p>(6) 清除本地matplotlib中的缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.cache/matplotlib</span><br></pre></td></tr></table></figure>


<h1 id="从Web解析到网络空间"><a href="#从Web解析到网络空间" class="headerlink" title="从Web解析到网络空间"></a>从Web解析到网络空间</h1><h2 id="Python库之网络爬虫"><a href="#Python库之网络爬虫" class="headerlink" title="Python库之网络爬虫"></a>Python库之网络爬虫</h2><p>Requests:最友好的网络爬虫功能库；<br>Scrapy:优秀的网络爬虫框架；<br>pyspider：强大的Web页面爬取系统；</p>
<h2 id="Python库之Web信息提取"><a href="#Python库之Web信息提取" class="headerlink" title="Python库之Web信息提取"></a>Python库之Web信息提取</h2><p>Beautiful Soup:HTML和XL的解析库；<br>Re:正则表达式解析和处理功能库；<br>Python-Goose：提取文章类型Web页面的功能库；</p>
<h2 id="Python库之Web网站开发"><a href="#Python库之Web网站开发" class="headerlink" title="Python库之Web网站开发"></a>Python库之Web网站开发</h2><p>Django:最流行的Web应用框架；<br>Pyramid:规模适中的Web应用框架；<br>Flask：Web应用开发微框架；</p>
<h2 id="Python库之网络应用开发"><a href="#Python库之网络应用开发" class="headerlink" title="Python库之网络应用开发"></a>Python库之网络应用开发</h2><p>WeRoBot:微信公众号开发框架；<br>aip:百度AI开放平台接口；<br>MyQR：二维码生成第三方库；</p>
<h1 id="从人机交互到艺术设计"><a href="#从人机交互到艺术设计" class="headerlink" title="从人机交互到艺术设计"></a>从人机交互到艺术设计</h1><h2 id="Python库之图形用户界面"><a href="#Python库之图形用户界面" class="headerlink" title="Python库之图形用户界面"></a>Python库之图形用户界面</h2><p>PyQt5:Qt开发框架的Python接口；<br>wxPython:跨平台GUI开发框架；<br>PyGObject：使用GTK+开发GUI的功能库；</p>
<h2 id="Python库之游戏开发"><a href="#Python库之游戏开发" class="headerlink" title="Python库之游戏开发"></a>Python库之游戏开发</h2><p>PyGame:简单的游戏开发功能库；<br>Panda3D:开源、跨平台的3D渲染和游戏开发库；<br>cocos2D：构建2D游戏和图形界面交互式应用的框架；</p>
<h2 id="Python库之虚拟现实"><a href="#Python库之虚拟现实" class="headerlink" title="Python库之虚拟现实"></a>Python库之虚拟现实</h2><p>VR Zero:在树莓派上开发VR应用的Python库；<br>pyvor:Oculus Rift的Python开发接口；<br>Vizard：基于Python的通用VR开发引擎；</p>
<h2 id="Python库之图形艺术"><a href="#Python库之图形艺术" class="headerlink" title="Python库之图形艺术"></a>Python库之图形艺术</h2><p>Quads：迭代的艺术；<br>ascii_art:ASCII艺术库；<br>turtle：海龟绘图体系；</p>
<h1 id="实例：玫瑰花绘制"><a href="#实例：玫瑰花绘制" class="headerlink" title="实例：玫瑰花绘制"></a>实例：玫瑰花绘制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#RoseDraw.py</span><br><span class="line">import turtle as t</span><br><span class="line"># 定义一个曲线绘制函数</span><br><span class="line">def DegreeCurve(n, r, d=1):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        t.left(d)</span><br><span class="line">        t.circle(r, abs(d))</span><br><span class="line"># 初始位置设定</span><br><span class="line">s = 0.2 # size</span><br><span class="line">t.setup(450*5*s, 750*5*s)</span><br><span class="line">t.pencolor(&quot;black&quot;)</span><br><span class="line">t.fillcolor(&quot;red&quot;)</span><br><span class="line">t.speed(100)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(0, 900*s)</span><br><span class="line">t.pendown()</span><br><span class="line"># 绘制花朵形状</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(200*s,30)</span><br><span class="line">DegreeCurve(60, 50*s)</span><br><span class="line">t.circle(200*s,30)</span><br><span class="line">DegreeCurve(4, 100*s)</span><br><span class="line">t.circle(200*s,50)</span><br><span class="line">DegreeCurve(50, 50*s)</span><br><span class="line">t.circle(350*s,65)</span><br><span class="line">DegreeCurve(40, 70*s)</span><br><span class="line">t.circle(150*s,50)</span><br><span class="line">DegreeCurve(20, 50*s, -1)</span><br><span class="line">t.circle(400*s,60)</span><br><span class="line">DegreeCurve(18, 50*s)</span><br><span class="line">t.fd(250*s)</span><br><span class="line">t.right(150)</span><br><span class="line">t.circle(-500*s,12)</span><br><span class="line">t.left(140)</span><br><span class="line">t.circle(550*s,110)</span><br><span class="line">t.left(27)</span><br><span class="line">t.circle(650*s,100)</span><br><span class="line">t.left(130)</span><br><span class="line">t.circle(-300*s,20)</span><br><span class="line">t.right(123)</span><br><span class="line">t.circle(220*s,57)</span><br><span class="line">t.end_fill()</span><br><span class="line"># 绘制花枝形状</span><br><span class="line">t.left(120)</span><br><span class="line">t.fd(280*s)</span><br><span class="line">t.left(115)</span><br><span class="line">t.circle(300*s,33)</span><br><span class="line">t.left(180)</span><br><span class="line">t.circle(-300*s,33)</span><br><span class="line">DegreeCurve(70, 225*s, -1)</span><br><span class="line">t.circle(350*s,104)</span><br><span class="line">t.left(90)</span><br><span class="line">t.circle(200*s,105)</span><br><span class="line">t.circle(-500*s,63)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(170*s,-30*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.left(160)</span><br><span class="line">DegreeCurve(20, 2500*s)</span><br><span class="line">DegreeCurve(220, 250*s, -1)</span><br><span class="line"># 绘制一个绿色叶子</span><br><span class="line">t.fillcolor(&apos;green&apos;)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(670*s,-180*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(140)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(300*s,120)</span><br><span class="line">t.left(60)</span><br><span class="line">t.circle(300*s,120)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(180*s,-550*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(85)</span><br><span class="line">t.circle(600*s,40)</span><br><span class="line"># 绘制另一个绿色叶子</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-150*s,-1000*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.rt(120)</span><br><span class="line">t.circle(300*s,115)</span><br><span class="line">t.left(75)</span><br><span class="line">t.circle(300*s,100)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(430*s,-1070*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(30)</span><br><span class="line">t.circle(-600*s,35)</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>


<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_8</title>
    <url>/2019/06/25/2019-06-25-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_8/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="实例：体育竞技分析"><a href="#实例：体育竞技分析" class="headerlink" title="实例：体育竞技分析"></a>实例：体育竞技分析</h1><p>程序框架及步骤：<br>-步骤一pirntInfo()：打印程序的介绍性信息式；<br>-步骤二getInputs()：获得程序运行参数：proA，proB，n；<br>-步骤三simNGames()：获得球员A和球员B的能力值，模拟n局比赛；<br>-步骤四printSummary()：输出球员A和B获胜比赛的场次及概率；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#MatchAnalysis.py</span><br><span class="line">from random import random</span><br><span class="line">def printIntro():</span><br><span class="line">    print(&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;)</span><br><span class="line">    print(&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;)</span><br><span class="line">def getInputs():</span><br><span class="line">    a = eval(input(&quot;请输入选手A的能力值(0-1): &quot;))</span><br><span class="line">    b = eval(input(&quot;请输入选手B的能力值(0-1): &quot;))</span><br><span class="line">    n = eval(input(&quot;模拟比赛的场次: &quot;))</span><br><span class="line">    return a, b, n</span><br><span class="line">def simNGames(n, probA, probB):</span><br><span class="line">    winsA, winsB = 0, 0</span><br><span class="line">    for i in range(n):</span><br><span class="line">        scoreA, scoreB = simOneGame(probA, probB)</span><br><span class="line">        if scoreA &gt; scoreB:</span><br><span class="line">            winsA += 1</span><br><span class="line">        else:</span><br><span class="line">            winsB += 1</span><br><span class="line">    return winsA, winsB</span><br><span class="line">def gameOver(a,b):</span><br><span class="line">    return a==15 or b==15</span><br><span class="line">def simOneGame(probA, probB):</span><br><span class="line">    scoreA, scoreB = 0, 0</span><br><span class="line">    serving = &quot;A&quot;</span><br><span class="line">    while not gameOver(scoreA, scoreB):</span><br><span class="line">        if serving == &quot;A&quot;:</span><br><span class="line">            if random() &lt; probA:</span><br><span class="line">                scoreA += 1</span><br><span class="line">            else:</span><br><span class="line">                serving=&quot;B&quot;</span><br><span class="line">        else:</span><br><span class="line">            if random() &lt; probB:</span><br><span class="line">                scoreB += 1</span><br><span class="line">            else:</span><br><span class="line">                serving=&quot;A&quot;</span><br><span class="line">    return scoreA, scoreB</span><br><span class="line">def printSummary(winsA, winsB):</span><br><span class="line">    n = winsA + winsB</span><br><span class="line">    print(&quot;竞技分析开始，共模拟&#123;&#125;场比赛&quot;.format(n))</span><br><span class="line">    print(&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;.format(winsA, winsA/n))</span><br><span class="line">    print(&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;.format(winsB, winsB/n))</span><br><span class="line">def main():</span><br><span class="line">    printIntro()</span><br><span class="line">    probA, probB, n = getInputs()</span><br><span class="line">    winsA, winsB = simNGames(n, probA, probB)</span><br><span class="line">    printSummary(winsA, winsB)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h1 id="Python程序设计思维"><a href="#Python程序设计思维" class="headerlink" title="Python程序设计思维"></a>Python程序设计思维</h1><h2 id="计算思维和程序设计"><a href="#计算思维和程序设计" class="headerlink" title="计算思维和程序设计"></a>计算思维和程序设计</h2><p>计算思维（抽象+自动化）：以设计和构造为特点，计算机为代表，基于计算机强大的算力及海量数据；</p>
<h2 id="计算生态和Python语言"><a href="#计算生态和Python语言" class="headerlink" title="计算生态和Python语言"></a>计算生态和Python语言</h2><p>计算生态以开源项目为组织形式，充分利用“共识原则”和“社会利他”组织人员，在竞争发展、相互依存和迅速更迭中完成信息技术的更新换代，形成了技术的自我演化之路。</p>
<p>Python:以开源项目为代表的大量第三方库；社区庞大，技术更新很快。</p>
<h2 id="用户体验和软件产品"><a href="#用户体验和软件产品" class="headerlink" title="用户体验和软件产品"></a>用户体验和软件产品</h2><p>-用户体验指用户对产品建立的主观感受和认识。</p>
<p>-编程只是手段，不是目的，程序最终为人类服务。</p>
<h2 id="基本的程序设计模式"><a href="#基本的程序设计模式" class="headerlink" title="基本的程序设计模式"></a>基本的程序设计模式</h2><p>IPO、自顶向下设计、模块化设计、配置化设计</p>
<h1 id="Python第三方库安装"><a href="#Python第三方库安装" class="headerlink" title="Python第三方库安装"></a>Python第三方库安装</h1><h2 id="看见更大的Python世界"><a href="#看见更大的Python世界" class="headerlink" title="看见更大的Python世界"></a>看见更大的Python世界</h2><p>Python全球社区: <a href="https://pypi.org" target="_blank" rel="noopener">https://pypi.org</a></p>
<h2 id="第三方库的pip安装方法"><a href="#第三方库的pip安装方法" class="headerlink" title="第三方库的pip安装方法"></a>第三方库的pip安装方法</h2><p>使用pip安装工具： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装</span><br><span class="line">pip install &lt;第三方库名&gt;</span><br><span class="line">#更新</span><br><span class="line">pip install -U &lt;第三方库名&gt;</span><br><span class="line">#卸载</span><br><span class="line">pip uninstall &lt;第三方库名&gt;</span><br><span class="line">#列出目前系统已安装的第三方库</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure>

<h2 id="第三方库的集成安装方法"><a href="#第三方库的集成安装方法" class="headerlink" title="第三方库的集成安装方法"></a>第三方库的集成安装方法</h2><p>Anaconda（主要用于数据分析） : <a href="https://www.continuum.io" target="_blank" rel="noopener">https://www.continuum.io</a></p>
<h2 id="第三方库的文件安装方法"><a href="#第三方库的文件安装方法" class="headerlink" title="第三方库的文件安装方法"></a>第三方库的文件安装方法</h2><p>windows下UCI页面的“补丁”安装方法。</p>
<h1 id="OS库的基本使用"><a href="#OS库的基本使用" class="headerlink" title="OS库的基本使用"></a>OS库的基本使用</h1><p>os库提供了通用的、基本的操作系统交互功能，包括路径操作、进程管理、环境参数等几大功能。</p>
<h2 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h2><p>os.path子库以path为入口，用于操作和处理文件路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os.path</span><br><span class="line">import os.path as op</span><br></pre></td></tr></table></figure>
<p>os.path.abspath(path):返回path在当前系统中的绝对路径；<br>os.path.relpath(path):返回path与当前程序之间的相对路径；<br>os.path.exists(path):判断path对应文件或目录是否存在，返回True或False;<br>…………</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>os.system（command）</p>
<h1 id="实例：第三方库自动安装脚本"><a href="#实例：第三方库自动安装脚本" class="headerlink" title="实例：第三方库自动安装脚本"></a>实例：第三方库自动安装脚本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#BatchInstall.py</span><br><span class="line">import os</span><br><span class="line">libs = &#123;&quot;numpy&quot;,&quot;matplotlib&quot;,&quot;pillow&quot;,&quot;sklearn&quot;,&quot;requests&quot;,\</span><br><span class="line">        &quot;jieba&quot;,&quot;beautifulsoup4&quot;,&quot;wheel&quot;,&quot;networkx&quot;,&quot;sympy&quot;,\</span><br><span class="line">        &quot;pyinstaller&quot;,&quot;django&quot;,&quot;flask&quot;,&quot;werobot&quot;,&quot;pyqt5&quot;,\</span><br><span class="line">        &quot;pandas&quot;,&quot;pyopengl&quot;,&quot;pypdf2&quot;,&quot;docopt&quot;,&quot;pygame&quot;&#125;</span><br><span class="line">try:</span><br><span class="line">    for lib in libs:</span><br><span class="line">        os.system(&quot;pip3 install &quot;+lib)</span><br><span class="line">    print(&quot;Successful&quot;)        </span><br><span class="line">except:</span><br><span class="line">    print(&quot;Failed Somehow&quot;)</span><br></pre></td></tr></table></figure>


<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_7</title>
    <url>/2019/06/23/2019-06-23-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_7/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h1><h2 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h2><p>-文件是存储在辅助存储器上的数据序列，是数据存储的一种形式。<br>-文件展现形态：文本文件、二进制文件（本质上，所有文件都是以二进制形式存储）</p>
<h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><p>-由单一特定编码组成的文件，如UTF-8编码；<br>-由于存在编码，也被看作是存储着的长字符串；<br>-适用于例如：.txt文件、.py文件；</p>
<h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p>-直接由比特0和1组成，没有统一编码；<br>-一般存在二进制0和1的组织结构，即文件格式；<br>-适用于例如：.png文件、.avi文件；</p>
<h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><p>文件处理步骤：打开-操作-关闭；</p>
<h3 id="文件的打开"><a href="#文件的打开" class="headerlink" title="文件的打开"></a>文件的打开</h3><p>&lt; 变量名 &gt; = open(&lt;文件名&gt;，&lt;打开模式&gt;)</p>
<p>1.”r”:只读模式，默认值，文件不存在返回ERROR；<br>2.”w”:覆盖写模式，文件不存在则创建，存在则完全覆盖；<br>3.”x”:创建写模式，文件不存在则创建，存在则返回ERROR；<br>4.”a”:追加写模式，文件不存在则创建，存在则在文件最后追加内容；<br>5.”b”:以二进制形式打开文件；<br>6.”t”:以文本形式打开文件，默认值；<br>7.”+”:与r/w/x/a一同使用，在原功能基础上增加同时读写功能；</p>
<h3 id="文件的关闭"><a href="#文件的关闭" class="headerlink" title="文件的关闭"></a>文件的关闭</h3><p>&lt; 变量名 &gt;.close()</p>
<h2 id="文件内容的读取"><a href="#文件内容的读取" class="headerlink" title="文件内容的读取"></a>文件内容的读取</h2><p>&lt; f &gt;.read(size=-1):读入全部内容，如果给出参数，读入前size长度；<br>&lt; f &gt;.readline(size=-1):读入一行内容，如果给出参数，读入该行前size长度；<br>&lt; f &gt;.readlines(hint=-1):读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行；</p>
<h2 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h2><p>&lt; f &gt;.write(s):向文件写入一个字符串或者字节流；<br>&lt; f &gt;.writelines(lines):将一个元素全为字符串的列表写入文件；<br>&lt; f &gt;.seek(offset):改变当前文件操作指针的位置，offse含义如下：0-文件开头，1-当前位置，2-文件结尾；</p>
<h1 id="实例：自动轨迹绘制"><a href="#实例：自动轨迹绘制" class="headerlink" title="实例：自动轨迹绘制"></a>实例：自动轨迹绘制</h1><p>根据脚本来绘制图形，不是写代码而是写数据绘制轨迹。<br>-步骤1：定义数据文件格式（接口）；<br>-步骤2：编写程序，根据文件接口解析参数绘制图形；<br>-步骤3：编制数据文件；</p>
<p><img src="https://i.loli.net/2019/06/23/5d0f97280320c94185.jpg" alt="data.txt"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#AutoTraceDraw.py</span><br><span class="line">import turtle as t</span><br><span class="line">t.title(&apos;自动轨迹绘制&apos;)</span><br><span class="line">t.setup(800, 600, 0, 0)</span><br><span class="line">t.pencolor(&quot;red&quot;)</span><br><span class="line">t.pensize(5)</span><br><span class="line">#数据读取</span><br><span class="line">datals = []</span><br><span class="line">f = open(&quot;data.txt&quot;)</span><br><span class="line">for line in f:</span><br><span class="line">    line = line.replace(&quot;\n&quot;,&quot;&quot;)</span><br><span class="line">    datals.append(list(map(eval, line.split(&quot;,&quot;))))</span><br><span class="line">f.close()</span><br><span class="line">#自动绘制</span><br><span class="line">for i in range(len(datals)):</span><br><span class="line">    t.pencolor(datals[i][3],datals[i][4],datals[i][5])</span><br><span class="line">    t.fd(datals[i][0])</span><br><span class="line">    if datals[i][1]:</span><br><span class="line">        t.rt(datals[i][2])</span><br><span class="line">    else:</span><br><span class="line">        t.lt(datals[i][2])</span><br></pre></td></tr></table></figure>

<h1 id="一维数据的格式化和处理"><a href="#一维数据的格式化和处理" class="headerlink" title="一维数据的格式化和处理"></a>一维数据的格式化和处理</h1><h2 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h2><p>一维数据：由对等关系的有序或无序数据组成，采用线性方式组织，对应列表、数组、集合等概念；<br>二维数据：由多个一维数据组成，是一维数据 的组合形式，对应表格等；<br>多维数据、高维数据……</p>
<h2 id="一维数据的表示"><a href="#一维数据的表示" class="headerlink" title="一维数据的表示"></a>一维数据的表示</h2><p>如果数据间有序：使用列表类型；<br>如果数据间无序：使用集合类型；</p>
<h2 id="一维数据的存储"><a href="#一维数据的存储" class="headerlink" title="一维数据的存储"></a>一维数据的存储</h2><p>方式一：空格分隔；<br>方式二：逗号分隔；<br>方式三：其他特殊符号分隔；</p>
<h2 id="一维数据的处理"><a href="#一维数据的处理" class="headerlink" title="一维数据的处理"></a>一维数据的处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从特殊符号分隔的文件中读入数据</span><br><span class="line">#中国$美国$日本$德国$法国</span><br><span class="line">txt = open(fname).read()</span><br><span class="line">ls = txt.split(&quot;$&quot;)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;ls</span><br><span class="line">[&apos;中国&apos;,&apos;美国&apos;,&apos;日本&apos;,&apos;德国&apos;,&apos;法国&apos;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#采用特殊符号分隔将数据写入文件中</span><br><span class="line">ls = [&apos;中国&apos;,&apos;美国&apos;,&apos;日本&apos;,&apos;德国&apos;,&apos;法国&apos;]</span><br><span class="line">f = open(fname,&apos;w&apos;)</span><br><span class="line">f.write(&quot;$&quot;.join(ls))</span><br><span class="line">f.close</span><br><span class="line"></span><br><span class="line">中国$美国$日本$德国$法国</span><br></pre></td></tr></table></figure>

<h1 id="二维数据的格式化和处理"><a href="#二维数据的格式化和处理" class="headerlink" title="二维数据的格式化和处理"></a>二维数据的格式化和处理</h1><h2 id="二维数据的表示"><a href="#二维数据的表示" class="headerlink" title="二维数据的表示"></a>二维数据的表示</h2><p>使用二维列表表示。<br>使用两层for循环遍历每个元素，第一层遍历每个列表，第二层遍历列表中每个元素。</p>
<h2 id="CSV数据存储格式"><a href="#CSV数据存储格式" class="headerlink" title="CSV数据存储格式"></a>CSV数据存储格式</h2><p>CSV:Comma-Separated Values逗号分隔的值</p>
<p><img src="https://i.loli.net/2019/06/24/5d101bea17e7229812.png" alt="CSV数据格式存储"></p>
<h2 id="二维数据的存储"><a href="#二维数据的存储" class="headerlink" title="二维数据的存储"></a>二维数据的存储</h2><p>一般索引习惯：ls[row][column]，先行后列。所以一般按行存储，外层列表每个元素是一行。</p>
<h2 id="二维数据的处理"><a href="#二维数据的处理" class="headerlink" title="二维数据的处理"></a>二维数据的处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从CSV文件中读入数据</span><br><span class="line">fo = open(fname)</span><br><span class="line">ls = []</span><br><span class="line">for line in fo:</span><br><span class="line">	line = line.replace(&quot;\n&quot;,&quot;&quot;)</span><br><span class="line">	ls.append(line.split(&quot;,&quot;))</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从数据写入CSV文件中</span><br><span class="line">ls = [[],[],[]] #二维列表</span><br><span class="line">f = open(fname，&apos;w&apos;)</span><br><span class="line">for item in ls:</span><br><span class="line">	f.write(&apos;,&apos;.join(item)+&apos;\n&apos;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#遍历每一个元素</span><br><span class="line">ls = [[1,2],[3,4],[5,6]]</span><br><span class="line">for row in ls:</span><br><span class="line">	for column in row:</span><br><span class="line">		print(column)</span><br></pre></td></tr></table></figure>

<h1 id="wordcloud库的使用"><a href="#wordcloud库的使用" class="headerlink" title="wordcloud库的使用"></a>wordcloud库的使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>-wordcloud库是优秀的词云展示第三方库;<br>-pip install wordcloud;<br>-wordcloud库把词云当作一个WordCloud对象，wordcloud.WordCloud()代表一个文本对应的词云;</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>w.generate(txt):向WordCloud对象w中加载文件txt;<br>w.to_file(filename):将词云输出为图像文件，.png或.jpg格式;<br>这里介绍一个有意思的参数mask:<br><img src="https://i.loli.net/2019/06/24/5d1022aa9a8d692217.png" alt="参数mask"></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>-步骤一：配置对象参数；<br>-步骤二：加载词云文本；<br>-步骤三：输出词云文件；</p>
<h1 id="实例：政府工作报告词云"><a href="#实例：政府工作报告词云" class="headerlink" title="实例：政府工作报告词云"></a>实例：政府工作报告词云</h1><p>资源：<a href="https://python123.io/resources/pye/新时代中国特色社会主义.txt" target="_blank" rel="noopener">https://python123.io/resources/pye/新时代中国特色社会主义.txt</a><br>资源：<a href="https://python123.io/resources/pye/关于实施乡村振兴战略的意见.txt" target="_blank" rel="noopener">https://python123.io/resources/pye/关于实施乡村振兴战略的意见.txt</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#常见矩形词云</span><br><span class="line">   #GovRptWordCloudv1.py</span><br><span class="line">   import jieba</span><br><span class="line">   import wordcloud</span><br><span class="line">   f = open(&quot;新时代中国特色社会主义.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">    </span><br><span class="line">   t = f.read()</span><br><span class="line">   f.close()</span><br><span class="line">   ls = jieba.lcut(t)</span><br><span class="line">    </span><br><span class="line">   txt = &quot; &quot;.join(ls)</span><br><span class="line">   w = wordcloud.WordCloud( \</span><br><span class="line">       width = 1000, height = 700,\</span><br><span class="line">       background_color = &quot;white&quot;,</span><br><span class="line">       font_path = &quot;msyh.ttc&quot;    </span><br><span class="line">       )</span><br><span class="line">   w.generate(txt)</span><br><span class="line">   w.to_file(&quot;grwordcloud.png&quot;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#不规则图形词云</span><br><span class="line">   #GovRptWordCloudv2.py</span><br><span class="line">   import jieba</span><br><span class="line">   import wordcloud</span><br><span class="line">   from scipy.misc import imread</span><br><span class="line">   mask = imread(&quot;chinamap.jpg&quot;)</span><br><span class="line">   excludes = &#123; &#125;</span><br><span class="line">   f = open(&quot;新时代中国特色社会主义.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">   t = f.read()</span><br><span class="line">   f.close()</span><br><span class="line">   ls = jieba.lcut(t)</span><br><span class="line">   txt = &quot; &quot;.join(ls)</span><br><span class="line">   w = wordcloud.WordCloud(\</span><br><span class="line">       width = 1000, height = 700,\</span><br><span class="line">       background_color = &quot;white&quot;,</span><br><span class="line">       font_path = &quot;msyh.ttc&quot;, mask = mask</span><br><span class="line">       )</span><br><span class="line">   w.generate(txt)</span><br><span class="line">   w.to_file(&quot;grwordcloudm.png&quot;)</span><br></pre></td></tr></table></figure>

<p>注意几个问题：<br>1、当使用电脑中不存在的字体时，运行程序会报错OSError: cannot open resourse；<br>2、当不定义参数font_path时，制作中文词云会出现乱码；</p>
<p><img src="https://i.loli.net/2019/06/24/5d10a4b0b15df77889.png" alt="字体乱码"></p>
<p>3、Linux系统在终端运行:fc-list :lang=zh查看电脑系统所带字体；</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云物联网平台</title>
    <url>/2019/06/19/2019-06-19-%E9%98%BF%E9%87%8C%E4%BA%91%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<blockquote>
<p>对于电磁加热系统，从硬件模块调试到入网、数据上传云端再到调用分析，整个工程比较庞大，而且考虑瞬时流量可能比较大，服务器带宽要求较大，价格较高，所以考虑利用阿里云或者百度云的物联网IOT平台，其实基本都差不多，在此记录。<br>本篇基于阿里云官方的阿里云大学教学视频以及IOT平台参考文档。<br>比较详细的一篇<a href="https://www.yuque.com/cloud-dev/iot-tech/gvttbm" target="_blank" rel="noopener">教程</a>可以参考。</p>
</blockquote>
<p><img src="https://i.loli.net/2019/06/21/5d0c50535b70d13308.png" alt="物联网开发体系"></p>
<h1 id="IoT开发步骤"><a href="#IoT开发步骤" class="headerlink" title="IoT开发步骤"></a>IoT开发步骤</h1><p>IoT云端开发（产品创建、设备注册）==&gt; 设备端开发（安装mqtt库、应用程序编码）==&gt; 联机运行（设备上线、数据查看处理）</p>
<h1 id="云端开发"><a href="#云端开发" class="headerlink" title="云端开发"></a>云端开发</h1><p>简单来讲，在阿里云IoT平台操作相对简单，首先创建产品（可选高级版或者基础版），然后定义物模型-属性，然后在产品下注册一个或多个设备。</p>
<h2 id="产品与设备"><a href="#产品与设备" class="headerlink" title="产品与设备"></a>产品与设备</h2><p>产品是设备的集合，指一组具有相同功能的设备。物联网平台为每个产品颁发全局唯一的productKey。设备是归属于某个产品下的具体设备，物联网平台为每个设备颁发产品内唯一的devlceName。</p>
<h1 id="设备基于MQTT协议接入阿里云IOT平台"><a href="#设备基于MQTT协议接入阿里云IOT平台" class="headerlink" title="设备基于MQTT协议接入阿里云IOT平台"></a>设备基于MQTT协议接入阿里云IOT平台</h1><h2 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h2><p>订阅者：某些设备对特定信息感兴趣，并希望订阅它，这些设备叫做订阅者；<br>发布者：负责为其他设备生成数据的叫做发布者；<br>代理：负责将来自发布者的消息进行存储处理，并将这些消息发送到正确的订阅者中去。<br>发布者和订阅者通过Topic来进行信息传输，Topic是相对于设备的概念，设备可以往Topic中发布信息，也可以在Topic中订阅信息。Topic类是相对于产品的概念，产品定义Topic类，其下设备会自动生成对应的Topic。</p>
<h2 id="物模型"><a href="#物模型" class="headerlink" title="物模型"></a>物模型</h2><p>物模型指将物理空间中的实体数字化，并在云端构建该物体的数据模型。在物联网平台，定义物模型即定义功能，完成下述三类功能定义后，将自动生成该产品的物模型。物模型描述产品是什么、能做什么、能对外提供哪些服务。<br><img src="https://i.loli.net/2019/06/21/5d0c57408477030408.png" alt="定义物模型"></p>
<h2 id="连接域名"><a href="#连接域名" class="headerlink" title="连接域名"></a>连接域名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(productKey).iot-as-mqtt.$(regionID).aliyuncs.com:1883</span><br></pre></td></tr></table></figure>
<h2 id="MQTT的Connect报文"><a href="#MQTT的Connect报文" class="headerlink" title="MQTT的Connect报文"></a>MQTT的Connect报文</h2><p>设备端与阿里云IOT平台建立MQTT通道的Connect报文有三个关键参数：客户端标识符（ClientID）、用户名（UserName）、密码（Password），这三个参数由设备三元组（productKey、devlceName、deviceSecret）按照阿里云IOT签名规则生成。</p>
<h2 id="设备端开发"><a href="#设备端开发" class="headerlink" title="设备端开发"></a>设备端开发</h2><p>简单来讲，在利用npm安装好mqtt库之后，需要进行的操作包括修改设备身份三元组、建立连接、上报数据到指定topic、接受云端订阅topic的指令。</p>
<h1 id="数据通过规则引擎流转到OTS"><a href="#数据通过规则引擎流转到OTS" class="headerlink" title="数据通过规则引擎流转到OTS"></a>数据通过规则引擎流转到OTS</h1><p>数据根据Topic的不同有不同的处理方式：自定义Topic直接推到规则引擎；物模型Topic会流转进行物模型解析再推到规则引擎；<br>规则引擎的作用就是将数据转储到自己的数据库、消息队列、实时云计算等中，方便下一步处理。这里以流转到表格存储OTS为例。</p>
<p>阿里云规则引擎的数据处理采用SQL方式,处理之后得到一个规则化的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT contextData,payLoadData FROM TOPIC WHERE FILTER</span><br></pre></td></tr></table></figure>

<h1 id="数据通过规则引擎流转到函数计算FC"><a href="#数据通过规则引擎流转到函数计算FC" class="headerlink" title="数据通过规则引擎流转到函数计算FC"></a>数据通过规则引擎流转到函数计算FC</h1><p>首先在平台选择编程语言，创建函数，然后在规则引擎中添加流转到函数计算FC，选择刚才创建的函数，在函数计算中可以选择将数据通过钉钉、短信等方式推送到运营人员。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>ECS</tag>
        <tag>IOT</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云建站初试</title>
    <url>/2019/06/18/2019-06-18-%E9%98%BF%E9%87%8C%E4%BA%91%E5%BB%BA%E7%AB%99%E5%88%9D%E8%AF%95/</url>
    <content><![CDATA[<blockquote>
<p>电磁加热系统前端后端的工作也拖了许久，之前开始了前端网页的尝试，后来考试复习等等也暂停了下来，建站工作更是一拖再拖，现在着手开始一步步工作，在此记录。</p>
<p>需要用到SSH工具<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">putty</a>、FTP文件传输工具<a href="https://www.netsarang.com/zh/xftp/" target="_blank" rel="noopener">xftp</a>，去相应官网下载即可。</p>
</blockquote>
<h1 id="云服务器及域名"><a href="#云服务器及域名" class="headerlink" title="云服务器及域名"></a>云服务器及域名</h1><p>就云服务器来说，AWS一家独大，但在国内而言，还是<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a>的天下。可以自己先买一个服务器搭着试试，在本科时候进行过学生认证但是过期了，导致这次认证时出现失败，所以申请了一个工单，进行人工认证，传学信网-手持身份证-手持学生证照片一系列操作，终于成功，可以享受云翼计划的9.5/月，1核2Git1Mbps带宽对于入门来说已经够了。</p>
<p>关于<a href="https://wanwang.aliyun.com/domain/1yuan?spm=5176.8075371.850118.top1yuan.3b6166d2Lve7Vw" target="_blank" rel="noopener">域名注册</a> ，这里注册了.top，新用户首年只需要1元，你值得拥有。<br>关于域名解析，需要在域名实名认证通过之后再进行解析，解析按照阿里云解析页面右上角“新手引导”，添加记录值，也就是IP即可。</p>
<p>关于备案，阿里云提供<a href="https://beian.aliyun.com/" target="_blank" rel="noopener">代备案</a>，整个过程用时较长。</p>
<h1 id="搭建lnmp集成开发环境"><a href="#搭建lnmp集成开发环境" class="headerlink" title="搭建lnmp集成开发环境"></a>搭建lnmp集成开发环境</h1><p>关于LNMP介绍及下载，在<a href="https://lnmp.org/" target="_blank" rel="noopener">官网</a>比较具体，可以查看。<br>在这里阐述一下具体步骤：</p>
<ol>
<li>粘贴服务器公网IP，用putty进行连接，输入账号密码之后出现Welcome to Alibaba Cloud Elastic Compute Service !字样，说明连接服务器成功；</li>
<li>命令行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure>
随着版本号更新，命令会有不同。</li>
<li>选择MYSQL版本及设置密码，版本选默认即可；</li>
<li>选择PHP版本，这里选择了最新版；</li>
<li>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启；</li>
<li>选择是否安装内存的三个优化，选择默认不优化即可；</li>
<li>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin等软件及相关的组件，用时大概半个小时。</li>
<li>如果显示Nginx: OK，MySQL: OK，PHP: OK。并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.6 completed! enjoy it.的话，说明已经安装成功。<br>某些系统可能会一直卡在Install lnmp V1.5 completed! enjoy it.不自动退出，可以按Ctrl+c退出。</li>
<li>此时浏览器访问公网IP地址，就发现可以成功（安全组打开了80端口）；</li>
<li>在命令行 cd /home/wwwroot会发现有一个default文件夹，上述网页的全部内容都在这个文件夹中；</li>
</ol>
<h1 id="利用宝塔搭建集成开发环境"><a href="#利用宝塔搭建集成开发环境" class="headerlink" title="利用宝塔搭建集成开发环境"></a>利用宝塔搭建集成开发环境</h1><p>除了上述外，还有一种利用宝塔搭建集成开发环境的方法，具体步骤为：</p>
<ol>
<li><p>登陆<a href="http://www.bt.cn/download/linux.html" target="_blank" rel="noopener">官网</a>，可以找到下载linux免费版的脚本，这里服务器为Centos，所以脚本为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器输入公网IP:8888，第一次进入会出现安装LNMP集成环境的提示，按照提示选择配置开始安装即可，安装较快；</p>
</li>
<li><p>安装完成之后进入面板，在“面板设置”菜单修改安全入口、面板用户、面板密码，绑定宝塔官网密码等；</p>
</li>
<li><p>在面板“网站”菜单中，添加站点，即绑定域名并进行管理；</p>
</li>
<li><p>在面板“FTP”、“数据库”菜单中可进行管理；</p>
</li>
<li><p>此刻浏览器输入服务器IP，发现会是宝塔的欢迎界面；</p>
</li>
<li><p>之后再进入，IP:8888/baota，账号密码为之前设定的；</p>
</li>
</ol>
<h1 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h1><p>建站初始就用wordpress为例：</p>
<ol>
<li>首先进入<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">中文官网</a>，下载zi安装包，注意最新版可能没有中文解析包，如用中文可下载之前版本；</li>
<li>解压之后将文件夹下全部文件都通过xftp上传到/www/wwwroot目录下已自己域名命名的文件夹下（注意提前删掉index.php）；</li>
<li>此刻浏览器输入服务器IP，按照步骤往下即可，服务器和FTP账号密码即为刚才在宝塔设置的；</li>
<li>登陆进去发现有更新，需要ftp账号密码等，所以需要跳过这步，具体操作为：<br>1）修改wordpress安装目录的权限：chmod -R 777 wordpress；<br>2）在wordpress的根目录下找到wp-config.php文件，在wp-config.php中添加以下代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/** 更新需要ftp地址的解决方法 */</span><br><span class="line">define(&quot;FS_METHOD&quot;,&quot;direct&quot;);</span><br><span class="line">define(&quot;FS_CHMOD_DIR&quot;, 0777);</span><br><span class="line">define(&quot;FS_CHMOD_FILE&quot;, 0777);</span><br></pre></td></tr></table></figure>
保存文件，并刷新wordpress后台。</li>
<li>以后在浏览器输入域名/wp-admin或者IP/wp-admin即可进入wordpress控制台；</li>
</ol>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>ECS</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_6</title>
    <url>/2019/06/13/2019-06-13-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_6/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="集合类型及操作"><a href="#集合类型及操作" class="headerlink" title="集合类型及操作"></a>集合类型及操作</h1><h2 id="集合类型定义"><a href="#集合类型定义" class="headerlink" title="集合类型定义"></a>集合类型定义</h2><p>-与数学中的集合概念一致，是多个元素的无序组合，每个元素唯一，不存在相同元素。<br>-集合用大括号{}表示，元素间用逗号分隔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; A = &#123;&quot;python&quot;, 123, (&quot;python&quot;, 123)&#125;</span><br><span class="line">&gt;&gt;&gt; B = set(&quot;pypy123&quot;)</span><br><span class="line">&#123;&apos;1&apos;, &apos;p&apos;, &apos;2&apos;, &apos;3&apos;, &apos;y&apos;&#125;</span><br></pre></td></tr></table></figure>
<p>-建立集合类型用{}或set()；建立空集合类型必须使用 set()。</p>
<h2 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h2><p>S|T:包含集合S和T中的所有元素；<br>S-T:包含在集合S但不在T中的元素；<br>S&amp;T:包含同时在集合S和T中的元素；<br>S^T:包含集合S和T中的非相同元素；<br>S &lt;= T/S &lt; T:返回True/False，判断S和T的子集关系；<br>S &gt;= T/S &gt; T:返回True/False，判断S和T的包含关系；</p>
<h2 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h2><p>S.add(x):如果x不在集合S中，将x增加到S<br>S.discard(x)：移除S中元素x，如果x不在集合S中，不报错<br>S.remove(x):同上，如不在，产生keyerror异常<br>S.clear():移除S中所有元素<br>S.pop():随机返回S的一个元素，更新S<br>len(S)：返回集合S的元素个数</p>
<h2 id="集合类型应用场景"><a href="#集合类型应用场景" class="headerlink" title="集合类型应用场景"></a>集合类型应用场景</h2><p>数据去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;ls = [&quot;p&quot;, &quot;p&quot;, &quot;y&quot;, &quot;y&quot;, &quot;&quot;,123]</span><br><span class="line">&gt;&gt;&gt;s = set(ls)</span><br><span class="line">&#123;&apos;p&apos;, &apos;y&apos;, 123&#125;</span><br><span class="line">&gt;&gt;&gt;ls = list(s)</span><br><span class="line">[&apos;p&apos;, &apos;y&apos;, 123]</span><br></pre></td></tr></table></figure>
<h1 id="序列类型及操作"><a href="#序列类型及操作" class="headerlink" title="序列类型及操作"></a>序列类型及操作</h1><h2 id="序列类型定义"><a href="#序列类型定义" class="headerlink" title="序列类型定义"></a>序列类型定义</h2><p>序列是具有先后关系的一组一维元素向量，元素类型可以不同。<br>序列：字符串类型、元组类型、列表类型</p>
<h2 id="序列处理函数及方法"><a href="#序列处理函数及方法" class="headerlink" title="序列处理函数及方法"></a>序列处理函数及方法</h2><p>s+t:连接两个序列s和t；<br>s*n:将序列s复制n次；</p>
<h2 id="元组类型及操作"><a href="#元组类型及操作" class="headerlink" title="元组类型及操作"></a>元组类型及操作</h2><p>元组是序列类型的一种扩展，一旦创建就不能被修改。使用小括号（）或tuple()创建，元素间用逗号分隔。</p>
<h2 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h2><p>元组是序列类型的一种扩展，创建后可以被随意修改。使用方括号[]或list()创建，元素间用逗号分隔。注意使用=赋值并不是真正的创建，只是将同一个列表贴了另一个标签。<br>ls[i]=x:替换列表ls的第i个元素为x；<br>ls[i: j :k]=lt:用列表lt替换ls切片后所对应的元素子列表；<br>del ls[i]:删除列表ls中第i个元素；<br>ls+=lt:更新列表ls，将列表lt元素增加到列表ls中；<br>ls.insert(i,x):在列表ls的第i个位置增加元素x;<br>ls.pop(i):在列表ls中第i个位置元素取出并删除；<br>ls.remove(x):将列表ls中出现的第一个元素x删除；<br>ls.reverse():将列表ls中的元素反转；</p>
<h2 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h2><p>数据表示：表示一组有序数据，进而操作它们；<br>数据保护，不希望数据被程序修改，转换为元组类型；</p>
<h1 id="实例：基本统计值计算"><a href="#实例：基本统计值计算" class="headerlink" title="实例：基本统计值计算"></a>实例：基本统计值计算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalStatisticsV1.py</span><br><span class="line">def getNum():       #获取用户不定长度的输入</span><br><span class="line">    nums = []</span><br><span class="line">    iNumStr = input(&quot;请输入数字(回车退出): &quot;)</span><br><span class="line">    while iNumStr != &quot;&quot;:</span><br><span class="line">        nums.append(eval(iNumStr))</span><br><span class="line">        iNumStr = input(&quot;请输入数字(回车退出): &quot;)</span><br><span class="line">    return nums</span><br><span class="line"> </span><br><span class="line">def mean(numbers):  #计算平均值</span><br><span class="line">    s = 0.0</span><br><span class="line">    for num in numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    return s / len(numbers)</span><br><span class="line"> </span><br><span class="line">def dev(numbers, mean): #计算方差</span><br><span class="line">    sdev = 0.0</span><br><span class="line">    for num in numbers:</span><br><span class="line">        sdev = sdev + (num - mean)**2</span><br><span class="line">    return pow(sdev / (len(numbers)-1), 0.5)</span><br><span class="line"> </span><br><span class="line">def median(numbers):    #计算中位数</span><br><span class="line">    sorted(numbers)</span><br><span class="line">    size = len(numbers)</span><br><span class="line">    if size % 2 == 0:</span><br><span class="line">        med = (numbers[size//2-1] + numbers[size//2])/2</span><br><span class="line">    else:</span><br><span class="line">        med = numbers[size//2]</span><br><span class="line">    return med</span><br><span class="line"> </span><br><span class="line">n =  getNum() #主体函数</span><br><span class="line">m =  mean(n)</span><br><span class="line">print(&quot;平均值:&#123;&#125;,方差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;.format(m, dev(n,m),median(n)))</span><br></pre></td></tr></table></figure>
<h1 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h1><h2 id="字典类型定义"><a href="#字典类型定义" class="headerlink" title="字典类型定义"></a>字典类型定义</h2><p>字典中的映射是一种键（用户自定义索引）和值（数据）的对应。字典是键值对的集合，键值对之间无序，采用大括号{}或者dict()创建，键值对用冒号：表示。</p>
<h2 id="字典处理函数及方法"><a href="#字典处理函数及方法" class="headerlink" title="字典处理函数及方法"></a>字典处理函数及方法</h2><p>del d[k]:删除字典d中键k对应的数据值；<br>d.keys():返回字典d中所有的键信息；<br>d.values():返回字典d中所有的值信息；<br>d.items():返回字典d中所有的键值对信息；<br>d.get(k,<default>)：键k存在，返回相应值，不存在则返回<default>值；<br>d.pop(k,<default>)：键k存在，取出相应值，不存在则返回<default>值；</p>
<h1 id="jieba库的使用"><a href="#jieba库的使用" class="headerlink" title="jieba库的使用"></a>jieba库的使用</h1><p>-jieba是优秀的中文分词第三方库。<br>-利用一个中文词库，确定汉字之间的关联概率，概率大的组成词组，形成分词结果。</p>
<h2 id="jieba分词三种模式"><a href="#jieba分词三种模式" class="headerlink" title="jieba分词三种模式"></a>jieba分词三种模式</h2><h3 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h3><p>把文本精确的切分开，不存在冗余单词。<br>jieba.lcut(s):精确模式，返回一个列表类型的分词结果。</p>
<h3 id="全模式"><a href="#全模式" class="headerlink" title="全模式"></a>全模式</h3><p>把文本中所有可能的词语都扫描出来，有冗余。</p>
<h3 id="搜索引擎模式"><a href="#搜索引擎模式" class="headerlink" title="搜索引擎模式"></a>搜索引擎模式</h3><p>在精确模式基础上，对长词在此切分。</p>
<h1 id="实例：文本字频统计"><a href="#实例：文本字频统计" class="headerlink" title="实例：文本字频统计"></a>实例：文本字频统计</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalHamletV1.py</span><br><span class="line">def getText():</span><br><span class="line">    txt = open(&quot;hamlet.txt&quot;, &quot;r&quot;).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    for ch in &apos;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘&#123;|&#125;~&apos;:</span><br><span class="line">        txt = txt.replace(ch, &quot; &quot;)   #将文本中特殊字符替换为空格</span><br><span class="line">    return txt</span><br><span class="line"> </span><br><span class="line">hamletTxt = getText()</span><br><span class="line">words  = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line">for word in words:           </span><br><span class="line">    counts[word] = counts.get(word,0) + 1</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=lambda x:x[1], reverse=True) </span><br><span class="line">for i in range(10):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    print (&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;.format(word, count))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalThreeKingdomsV1.py</span><br><span class="line">import jieba</span><br><span class="line">txt = open(&quot;threekingdoms.txt&quot;, &quot;r&quot;, encoding=&apos;utf-8&apos;).read()</span><br><span class="line">words  = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line">for word in words:</span><br><span class="line">    if len(word) == 1:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        counts[word] = counts.get(word,0) + 1</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=lambda x:x[1], reverse=True) </span><br><span class="line">for i in range(15):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    print (&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;.format(word, count))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalThreeKingdomsV2.py</span><br><span class="line">import jieba</span><br><span class="line">excludes = &#123;&quot;将军&quot;,&quot;却说&quot;,&quot;荆州&quot;,&quot;二人&quot;,&quot;不可&quot;,&quot;不能&quot;,&quot;如此&quot;&#125;</span><br><span class="line">txt = open(&quot;threekingdoms.txt&quot;, &quot;r&quot;, encoding=&apos;utf-8&apos;).read()</span><br><span class="line">words  = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line">for word in words:</span><br><span class="line">    if len(word) == 1:</span><br><span class="line">        continue</span><br><span class="line">    elif word == &quot;诸葛亮&quot; or word == &quot;孔明曰&quot;:</span><br><span class="line">        rword = &quot;孔明&quot;</span><br><span class="line">    elif word == &quot;关公&quot; or word == &quot;云长&quot;:</span><br><span class="line">        rword = &quot;关羽&quot;</span><br><span class="line">    elif word == &quot;玄德&quot; or word == &quot;玄德曰&quot;:</span><br><span class="line">        rword = &quot;刘备&quot;</span><br><span class="line">    elif word == &quot;孟德&quot; or word == &quot;丞相&quot;:</span><br><span class="line">        rword = &quot;曹操&quot;</span><br><span class="line">    else:</span><br><span class="line">        rword = word</span><br><span class="line">    counts[rword] = counts.get(rword,0) + 1</span><br><span class="line">for word in excludes:</span><br><span class="line">    del counts[word]</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=lambda x:x[1], reverse=True) </span><br><span class="line">for i in range(10):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    print (&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;.format(word, count))</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_5</title>
    <url>/2019/06/09/2019-06-09-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_5/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h1><h2 id="函数的理解与定义"><a href="#函数的理解与定义" class="headerlink" title="函数的理解与定义"></a>函数的理解与定义</h2><p>两个作用：<br>-降低编码难度；<br>-代码复用；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;参数(0个或多个)&gt;):</span><br><span class="line">	&lt;函数体&gt;</span><br><span class="line">	return &lt;返回值&gt;</span><br></pre></td></tr></table></figure>
<h2 id="函数的使用及调用过程"><a href="#函数的使用及调用过程" class="headerlink" title="函数的使用及调用过程"></a>函数的使用及调用过程</h2><p>-调用时要给出实际参数；<br>-实际参数替换定义中的参数；<br>-函数调用后得到返回值；</p>
<h2 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h2><p>-参数可有可无，但必须保留括号；<br>-非可选参数（必选参数）要放在可选参数前边；<br>-函数参数可以为可变数量参数，即不确定参数总数量；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;参数&gt;，*b):</span><br></pre></td></tr></table></figure>

<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>-return保留字用来传递返回值；<br>-函数可以有返回值，也可以没有，即可以有return，也可以没有；<br>-return可以返回一个，也可以返回多个；</p>
<h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><p>-函数外部定义的为全局变量，函数内部定义的为局部变量，在函数内部可以使用保留字global定义全局变量。<br>-对于组合数据类型，如列表等，如果局部变量为真实创建，且函数内变量名与全局定义的变量相同，则它就是全局变量（原因：组合数据类型定义的是指针，在函数内部操作的也是指针）；</p>
<h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>-lambda函数使用lambda保留字定义，是一种匿名函数，即没有名字的函数，返回函数名作为结果；<br>-用于定义简单的、能够在一行内表示的函数；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;函数名&gt; = lambda&lt;参数&gt;:&lt;表达式&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f = lambda x,y:x+y</span><br><span class="line">&gt;&gt;&gt; f(10,15)</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; f = lambda:&quot;lambda函数&quot;</span><br><span class="line">&gt;&gt;&gt; print(f())</span><br><span class="line">lambda函数</span><br></pre></td></tr></table></figure>

<h1 id="实例：-七段数码管绘制"><a href="#实例：-七段数码管绘制" class="headerlink" title="实例： 七段数码管绘制"></a>实例： 七段数码管绘制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#SevenDigitsDrawV1.py</span><br><span class="line">import turtle</span><br><span class="line">def drawLine(draw):   #绘制单段数码管</span><br><span class="line">    turtle.pendown() if draw else turtle.penup()</span><br><span class="line">    turtle.fd(40)</span><br><span class="line">    turtle.right(90)</span><br><span class="line">def drawDigit(digit): #根据数字绘制七段数码管</span><br><span class="line">    drawLine(True) if digit in [2,3,4,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0,1,3,4,5,6,7,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0,2,3,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0,2,6,8] else drawLine(False)</span><br><span class="line">    turtle.left(90)</span><br><span class="line">    drawLine(True) if digit in [0,4,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0,2,3,5,6,7,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0,1,2,3,4,7,8,9] else drawLine(False)</span><br><span class="line">    turtle.left(180)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(20) </span><br><span class="line">def drawDate(date):  #获得要输出的数字</span><br><span class="line">    for i in date:</span><br><span class="line">        drawDigit(eval(i))  #通过eval()函数将数字变为整数</span><br><span class="line">def main():</span><br><span class="line">    turtle.setup(800, 350, 200, 200)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-300)</span><br><span class="line">    turtle.pensize(5)</span><br><span class="line">    drawDate(&apos;20181010&apos;)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#SevenDigitsDrawV2.py</span><br><span class="line">import turtle, time</span><br><span class="line">def drawGap(): #绘制数码管间隔</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(5)</span><br><span class="line">def drawLine(draw):   #绘制单段数码管</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() if draw else turtle.penup()</span><br><span class="line">    turtle.fd(40)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">def drawDigit(d): #根据数字绘制七段数码管</span><br><span class="line">    drawLine(True) if d in [2,3,4,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if d in [0,1,3,4,5,6,7,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if d in [0,2,3,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if d in [0,2,6,8] else drawLine(False)</span><br><span class="line">    turtle.left(90)</span><br><span class="line">    drawLine(True) if d in [0,4,5,6,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if d in [0,2,3,5,6,7,8,9] else drawLine(False)</span><br><span class="line">    drawLine(True) if d in [0,1,2,3,4,7,8,9] else drawLine(False)</span><br><span class="line">    turtle.left(180)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(20)</span><br><span class="line">def drawDate(date):</span><br><span class="line">    turtle.pencolor(&quot;red&quot;)</span><br><span class="line">    for i in date:</span><br><span class="line">        if i == &apos;-&apos;:</span><br><span class="line">            turtle.write(&apos;年&apos;,font=(&quot;Arial&quot;, 18, &quot;normal&quot;))</span><br><span class="line">            turtle.pencolor(&quot;green&quot;)</span><br><span class="line">            turtle.fd(40)</span><br><span class="line">        elif i == &apos;=&apos;:</span><br><span class="line">            turtle.write(&apos;月&apos;,font=(&quot;Arial&quot;, 18, &quot;normal&quot;))</span><br><span class="line">            turtle.pencolor(&quot;blue&quot;)</span><br><span class="line">            turtle.fd(40)</span><br><span class="line">        elif i == &apos;+&apos;:</span><br><span class="line">            turtle.write(&apos;日&apos;,font=(&quot;Arial&quot;, 18, &quot;normal&quot;))</span><br><span class="line">        else:</span><br><span class="line">            drawDigit(eval(i))</span><br><span class="line">def main():</span><br><span class="line">    turtle.setup(800, 350, 200, 200)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-350)</span><br><span class="line">    turtle.pensize(5)</span><br><span class="line">#    drawDate(&apos;2018-10=10+&apos;)</span><br><span class="line">    drawDate(time.strftime(&apos;%Y-%m=%d+&apos;,time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h1 id="代码复用和函数递归"><a href="#代码复用和函数递归" class="headerlink" title="代码复用和函数递归"></a>代码复用和函数递归</h1><h2 id="代码复用与模块化设计"><a href="#代码复用与模块化设计" class="headerlink" title="代码复用与模块化设计"></a>代码复用与模块化设计</h2><p>-函数和对象是代码复用的两种主要形式。<br>-模块化设计：分而治之。具体包括主程序、子程序和子程序之间的关系。</p>
<h2 id="函数递归的理解"><a href="#函数递归的理解" class="headerlink" title="函数递归的理解"></a>函数递归的理解</h2><p>-函数定义中调用函数自身的形式。</p>
<h2 id="函数递归的调用过程"><a href="#函数递归的调用过程" class="headerlink" title="函数递归的调用过程"></a>函数递归的调用过程</h2><p>函数+分支语句<br>-递归本身是一个函数，需要函数定义方式描述；<br>-函数内部，采用分支语句对输入参数进行判断；<br>-基例和链条，分别编写对应代码；</p>
<h2 id="函数递归实例解析"><a href="#函数递归实例解析" class="headerlink" title="函数递归实例解析"></a>函数递归实例解析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#字符串反转</span><br><span class="line">def rvs(s):</span><br><span class="line">	if s==&quot;&quot;:</span><br><span class="line">		return s</span><br><span class="line">	else:</span><br><span class="line">		return rvs(s[1:]+s[0])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#斐波那契数列</span><br><span class="line">def f(n):</span><br><span class="line">	if n==1 or n==2</span><br><span class="line">		return 1</span><br><span class="line">	else:</span><br><span class="line">		return f(n-1)+f(n-2)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#汉诺塔</span><br><span class="line">count = 0</span><br><span class="line">#n号小圆盘从src到dst,mid作为过渡</span><br><span class="line">def hanoi(n,src,dst,mid):</span><br><span class="line">	global count</span><br><span class="line">	if n==1:</span><br><span class="line">		print(&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;.format(1,src,dst))</span><br><span class="line">		countt +=1</span><br><span class="line">	else:</span><br><span class="line">		hanoi(n-1,src,mid,dst)</span><br><span class="line">		print(&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;.format(n,src,dst))</span><br><span class="line">		count +=1</span><br><span class="line">		hanoi(n-1,mid,dst,src)</span><br></pre></td></tr></table></figure>
<h1 id="PyInstall库使用"><a href="#PyInstall库使用" class="headerlink" title="PyInstall库使用"></a>PyInstall库使用</h1><h2 id="PyInstall库概述"><a href="#PyInstall库概述" class="headerlink" title="PyInstall库概述"></a>PyInstall库概述</h2><p>将 .py源代码转换成无需源代码的可执行文件，是一个第三方库。</p>
<h2 id="PyInstall库使用-1"><a href="#PyInstall库使用-1" class="headerlink" title="PyInstall库使用"></a>PyInstall库使用</h2><p>在文件目录下进入命令行： pyinstaller -F &lt;文件名.py&gt;</p>
<h1 id="实例：科赫雪花小包裹"><a href="#实例：科赫雪花小包裹" class="headerlink" title="实例：科赫雪花小包裹"></a>实例：科赫雪花小包裹</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#科赫曲线绘制</span><br><span class="line">    #KochDrawV1.py</span><br><span class="line">    import turtle</span><br><span class="line">    def koch(size, n):</span><br><span class="line">        if n == 0:</span><br><span class="line">            turtle.fd(size)</span><br><span class="line">        else:</span><br><span class="line">            for angle in [0, 60, -120, 60]:</span><br><span class="line">               turtle.left(angle)</span><br><span class="line">               koch(size/3, n-1)</span><br><span class="line">    def main():</span><br><span class="line">        turtle.setup(800,400)</span><br><span class="line">        turtle.penup()</span><br><span class="line">        turtle.goto(-300, -50)</span><br><span class="line">        turtle.pendown()</span><br><span class="line">        turtle.pensize(2)</span><br><span class="line">        koch(600,3)     # 0阶科赫曲线长度，阶数</span><br><span class="line">        turtle.hideturtle()</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#科赫雪花绘制</span><br><span class="line">    #KochDrawV2.py</span><br><span class="line">    import turtle</span><br><span class="line">    def koch(size, n):</span><br><span class="line">        if n == 0:</span><br><span class="line">            turtle.fd(size)</span><br><span class="line">        else:</span><br><span class="line">            for angle in [0, 60, -120, 60]:</span><br><span class="line">               turtle.left(angle)</span><br><span class="line">               koch(size/3, n-1)</span><br><span class="line">    def main():</span><br><span class="line">        turtle.setup(600,600)</span><br><span class="line">        turtle.penup()</span><br><span class="line">        turtle.goto(-200, 100)</span><br><span class="line">        turtle.pendown()</span><br><span class="line">        turtle.pensize(2)</span><br><span class="line">        level = 3      # 3阶科赫雪花，阶数</span><br><span class="line">        koch(400,level)     </span><br><span class="line">        turtle.right(120)</span><br><span class="line">        koch(400,level)</span><br><span class="line">        turtle.right(120)</span><br><span class="line">        koch(400,level)</span><br><span class="line">        turtle.hideturtle()</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_4</title>
    <url>/2019/06/06/2019-06-06-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_4/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="程序的分支结构"><a href="#程序的分支结构" class="headerlink" title="程序的分支结构"></a>程序的分支结构</h1><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h2><p>根据判断条件结果而选择不同向前路径的运行方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;条件&gt;：</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure>
<h2 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h2><p>根据判断条件结果而选择不同向前路径的运行方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;条件&gt;：</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure>
<p>紧凑形式：适用于简单表达式的二分支结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</span><br></pre></td></tr></table></figure>
<h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;条件&gt;：</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">elif:</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line">    ……</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块n&gt;</span><br></pre></td></tr></table></figure>
<h2 id="条件判断及组合"><a href="#条件判断及组合" class="headerlink" title="条件判断及组合"></a>条件判断及组合</h2><p>用于条件组合的三个保留字：and、or、not</p>
<h2 id="程序的异常处理"><a href="#程序的异常处理" class="headerlink" title="程序的异常处理"></a>程序的异常处理</h2><p>异常处理的基本使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure>
<p>高级使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except:</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line">#不发生异常时执行语句块3</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块3&gt;</span><br><span class="line">#语句块4一定会执行</span><br><span class="line">finally：</span><br><span class="line">    &lt;语句块4&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实例：-身体质量指数BMI"><a href="#实例：-身体质量指数BMI" class="headerlink" title="实例： 身体质量指数BMI#"></a>实例： 身体质量指数BMI#</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalBMIv1.py</span><br><span class="line">height, weight = eval(input(&quot;请输入身高(米)和体重(公斤)[逗号隔开]: &quot;))</span><br><span class="line">bmi = weight / pow(height, 2)</span><br><span class="line">print(&quot;BMI 数值为：&#123;:.2f&#125;&quot;.format(bmi))</span><br><span class="line">who = &quot;&quot;</span><br><span class="line">if bmi &lt; 18.5:</span><br><span class="line">    who = &quot;偏瘦&quot;</span><br><span class="line">elif 18.5 &lt;= bmi &lt; 25:</span><br><span class="line">    who = &quot;正常&quot;</span><br><span class="line">elif 25 &lt;= bmi &lt; 30:</span><br><span class="line">    who = &quot;偏胖&quot;</span><br><span class="line">else:</span><br><span class="line">    who = &quot;肥胖&quot;</span><br><span class="line">print(&quot;BMI 指标为:国际&apos;&#123;0&#125;&apos;&quot;.format(who))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalBMIv2.py</span><br><span class="line">height, weight = eval(input(&quot;请输入身高(米)和体重\(公斤)[逗号隔开]: &quot;))</span><br><span class="line">bmi = weight / pow(height, 2)</span><br><span class="line">print(&quot;BMI 数值为：&#123;:.2f&#125;&quot;.format(bmi))</span><br><span class="line">nat = &quot;&quot;</span><br><span class="line">if bmi &lt; 18.5:</span><br><span class="line">    nat = &quot;偏瘦&quot;</span><br><span class="line">elif 18.5 &lt;= bmi &lt; 24:</span><br><span class="line">    nat = &quot;正常&quot;</span><br><span class="line">elif 24 &lt;= bmi &lt; 28:</span><br><span class="line">    nat = &quot;偏胖&quot;</span><br><span class="line">else:</span><br><span class="line">    nat = &quot;肥胖&quot;</span><br><span class="line">print(&quot;BMI 指标为:国内&apos;&#123;0&#125;&apos;&quot;.format(nat))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalBMIv3.py</span><br><span class="line">height, weight = eval(input(&quot;请输入身高(米)和体重(公斤)[逗号隔开]: &quot;))</span><br><span class="line">bmi = weight / pow(height, 2)</span><br><span class="line">print(&quot;BMI 数值为：&#123;:.2f&#125;&quot;.format(bmi))</span><br><span class="line">who, nat = &quot;&quot;, &quot;&quot;</span><br><span class="line">if bmi &lt; 18.5:</span><br><span class="line">    who, nat = &quot;偏瘦&quot;, &quot;偏瘦&quot;</span><br><span class="line">elif 18.5 &lt;= bmi &lt; 24:</span><br><span class="line">    who, nat = &quot;正常&quot;, &quot;正常&quot;</span><br><span class="line">elif 24 &lt;= bmi &lt; 25:</span><br><span class="line">    who, nat = &quot;正常&quot;, &quot;偏胖&quot;</span><br><span class="line">elif 25 &lt;= bmi &lt; 28:</span><br><span class="line">    who, nat = &quot;偏胖&quot;, &quot;偏胖&quot;</span><br><span class="line">elif 28 &lt;= bmi &lt; 30:</span><br><span class="line">    who, nat = &quot;偏胖&quot;, &quot;肥胖&quot;</span><br><span class="line">else:</span><br><span class="line">    who, nat = &quot;肥胖&quot;, &quot;肥胖&quot;</span><br><span class="line">print(&quot;BMI 指标为:国际&apos;&#123;0&#125;&apos;, 国内&apos;&#123;1&#125;&apos;&quot;.format(who, nat))</span><br></pre></td></tr></table></figure>
<h1 id="程序的循环结构"><a href="#程序的循环结构" class="headerlink" title="程序的循环结构"></a>程序的循环结构</h1><h2 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for&lt;循环变量&gt; in &lt;遍历结构&gt;：</span><br><span class="line">	&lt;语句块&gt;</span><br></pre></td></tr></table></figure>
<p>-计数循环<br>-字符串遍历循环<br>-列表遍历循环<br>-文件遍历循环<br>-………………</p>
<h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while &lt;条件&gt;：</span><br><span class="line">	&lt;语句块&gt;</span><br></pre></td></tr></table></figure>
<h2 id="循环控制保留字"><a href="#循环控制保留字" class="headerlink" title="循环控制保留字"></a>循环控制保留字</h2><p>-break:跳出并结束当前（最内层）整个循环，执行循环后的语句；<br>-continue:结束当此循环，继续执行后续次数循环；</p>
<h2 id="循环高级用法"><a href="#循环高级用法" class="headerlink" title="循环高级用法"></a>循环高级用法</h2><p>循环与else搭配，当循环没有被break语句退出时，执行else语句块，可以看作是作为”正常”完成循环的奖励。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for&lt;循环变量&gt; in &lt;遍历结构&gt;：</span><br><span class="line">	&lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">	&lt;语句块2&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while &lt;条件&gt;：</span><br><span class="line">	&lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">	&lt;语句块2&gt;</span><br></pre></td></tr></table></figure>

<h1 id="random库使用"><a href="#random库使用" class="headerlink" title="random库使用"></a>random库使用</h1><h2 id="random库概述"><a href="#random库概述" class="headerlink" title="random库概述"></a>random库概述</h2><p>-random库是使用随机数的python标准库。<br>-import random</p>
<h2 id="基本随机函数"><a href="#基本随机函数" class="headerlink" title="基本随机函数"></a>基本随机函数</h2><p>-产生过程：随机数种子–&gt;梅森旋转矩阵–&gt;产生随机序列<br>-seed(a):初始化给定随机数种子，默认为当前系统时间，给定种子后，random产生的随机数确定，之后可以再现；<br>-random():生成一个[0.0,1.0]之间的随机小数；</p>
<h2 id="扩展随机函数"><a href="#扩展随机函数" class="headerlink" title="扩展随机函数"></a>扩展随机函数</h2><p>-random.randint(a,b):生成一个[a,b]之间的整数；<br>-random.randrange(m,n[,k]):生成一个[m,n)之间以k为步长的随机整数；<br>-random.getrandbits(k):生成一个k比特长的随机整数；<br>-random.uniform(a,b):生成一个[a，b]之间的随机小数；<br>-random.choice(seq):从序列seq中随机选择一个元素；<br>-random.shuffle(seq):将序列seq中元素随机排列，返回打乱后的序列；</p>
<h1 id="实例：圆周率的计算"><a href="#实例：圆周率的计算" class="headerlink" title="实例：圆周率的计算"></a>实例：圆周率的计算</h1><h2 id="公式近似方法"><a href="#公式近似方法" class="headerlink" title="公式近似方法"></a>公式近似方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalPiV1.py</span><br><span class="line">pi = 0</span><br><span class="line">N = 100</span><br><span class="line">for k in range(N):</span><br><span class="line">    pi += 1/pow(16,k)*( \</span><br><span class="line">              4/(8*k+1) - 2/(8*k+4) - \</span><br><span class="line">              1/(8*k+5) - 1/(8*k+6) ) </span><br><span class="line">print(&quot;圆周率值是: &#123;&#125;&quot;.format(pi))</span><br></pre></td></tr></table></figure>
<h2 id="蒙特卡洛方法"><a href="#蒙特卡洛方法" class="headerlink" title="蒙特卡洛方法"></a>蒙特卡洛方法</h2><p>随机给大量散点，会随机出现在区域中的位置，采用比例，用正方形面积可以估算出圆的面积，进而可以得到圆周率。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CalPiV2.py</span><br><span class="line">from random import random</span><br><span class="line">from time import perf_counter</span><br><span class="line">DARTS = 1000*1000</span><br><span class="line">hits = 0.0</span><br><span class="line">start = perf_counter()</span><br><span class="line">for i in range(1, DARTS+1):</span><br><span class="line">    x, y = random(), random()</span><br><span class="line">    dist = pow(x ** 2 + y ** 2, 0.5)</span><br><span class="line">    if dist &lt;= 1.0:</span><br><span class="line">        hits = hits + 1</span><br><span class="line">pi = 4 * (hits/DARTS)</span><br><span class="line">print(&quot;圆周率值是: &#123;&#125;&quot;.format(pi))</span><br><span class="line">print(&quot;运行时间是: &#123;:.5f&#125;s&quot;.format(perf_counter() - start))</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_3</title>
    <url>/2019/06/05/2019-06-05-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_3/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="数字类型及操作"><a href="#数字类型及操作" class="headerlink" title="数字类型及操作"></a>数字类型及操作</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>-与数学中整数概念一致，可正可负，没有取值范围限制。<br>-pow(x,y)函数:计算x<sup>y</sup>，想算多大就算多大。<br>-4种进制表示形式：</p>
<ol>
<li>十进制；</li>
<li>二进制，以0b或0B开头；</li>
<li>八进制，以0o或0O开头；</li>
<li>十六进制，以0x或0X开头；</li>
</ol>
<h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><p>-与数学中实数概念一致，带有小数点及小数的数字。<br>-浮点数间的运算存在不确定尾数，不是bug（原因：计算机二进制表示小数，可以无限接近，但不完全相同）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#浮点数运算及比较用round函数辅助</span><br><span class="line">&gt;&gt;&gt;0.1+0.2 == 0.3</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;round（0.1+0.2，1）== 0.3</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>-使用字母e或E作为幂的符号，以10为基数，格式如下：<br>&lt; a &gt;e&lt; b &gt;表示a*10<sup>b</sup></p>
<h2 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h2><p>-与数学中复数概念一致。<br>-z.real获得实部；z.imag获得虚部。</p>
<h2 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h2><p>+、-、<em>、/、 //（整数除） 、%、*</em>（幂运算）<br>-类型间可进行混合运算，生成结果为“最宽”类型，整数–&gt;浮点数–&gt;复数。</p>
<h2 id="数字运算函数"><a href="#数字运算函数" class="headerlink" title="数字运算函数"></a>数字运算函数</h2><p>abs(x)、divmod(x,y)同时输出商和余数、pow(x,y[,z])幂余(x**y)%z、round(x[,d])、max()、min()、int(x)、float（x）</p>
<h1 id="实例：天天向上的力量"><a href="#实例：天天向上的力量" class="headerlink" title="实例：天天向上的力量"></a>实例：天天向上的力量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DayDayUpQ1.py</span><br><span class="line">dayup = pow(1.001, 365)</span><br><span class="line">daydown = pow(0.999, 365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;，向下：&#123;:.2f&#125;&quot;.format(dayup, daydown))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DayDayUpQ2.py</span><br><span class="line">dayfactor = 0.005</span><br><span class="line">dayup = pow(1+dayfactor, 365)</span><br><span class="line">daydown = pow(1-dayfactor, 365)</span><br><span class="line">print(&quot;向上：&#123;:.2f&#125;，向下：&#123;:.2f&#125;&quot;.format(dayup, daydown))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DayDayUpQ3.py</span><br><span class="line">dayup = 1.0</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">for i in range(365):</span><br><span class="line">   if i % 7 in [6,0]:</span><br><span class="line">       dayup = dayup*(1-dayfactor)</span><br><span class="line">   else:</span><br><span class="line">       dayup = dayup*(1+dayfactor)</span><br><span class="line">print(&quot;工作日的力量：&#123;:.2f&#125; &quot;.format(dayup))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DayDayUpQ4.py</span><br><span class="line">def dayUP(df):</span><br><span class="line">    dayup = 1</span><br><span class="line">    for i in range(365):</span><br><span class="line">       if i % 7 in [6,0]:</span><br><span class="line">           dayup = dayup*(1 - 0.01)</span><br><span class="line">       else:</span><br><span class="line">           dayup = dayup*(1 + df)</span><br><span class="line">    return dayup</span><br><span class="line">dayfactor = 0.01</span><br><span class="line">while dayUP(dayfactor) &lt; 37.78:</span><br><span class="line">    dayfactor += 0.001</span><br><span class="line">print(&quot;工作日的努力参数是：&#123;:.3f&#125; &quot;.format(dayfactor))</span><br></pre></td></tr></table></figure>
<h1 id="字符串类型及操作"><a href="#字符串类型及操作" class="headerlink" title="字符串类型及操作"></a>字符串类型及操作</h1><h2 id="字符串类型的表示"><a href="#字符串类型的表示" class="headerlink" title="字符串类型的表示"></a>字符串类型的表示</h2><p>-由一对单引号或者双引号表示，仅表示单行字符串。<br>-由一对三单引号或三双引号表示，可表示多行字符串。<br>-转义符\，表达特定字符的本意。</p>
<h2 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h2><p>x+y;n*x;x in s</p>
<h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><p>len(x)、str(x)、hen(x)或oct(x)转换为十六进制和八进制、chr(u)u为Unicode编码、ord(x)与前一相反</p>
<h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><p>“方法”特指&lt; a &gt;.&lt; b &gt;()风格中的函数&lt; b &gt;()，方法本身也是函数，但与&lt; a &gt;有关。<br>-str.lower()或str.upper()：字符串字符全部大写或者小写；<br>-str.split()：返回一个列表，由str根据sep被分割的部分组成；<br>-str.count(sub)：sub在str中出现的次数；<br>-str.replace(old,new)：所有old子串被替换为new；<br>-str.center(width[，fillchar]):字符串str根据宽度width居中，fillchar可选；<br>-str.strip(chars):从str中去掉在其左侧和右侧chars中列出的字符；<br>-str.join(iter):在iter变量除最后元素外每个元素后增加一个str “,”；</p>
<h2 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h2><p>-字符串格式化使用.format()方法，用法为：&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)<br>-模板字符串中只用槽{}来占位，与后边format()中参数的顺序一一对应。<br>-槽内部对格式化的配置方式：{&lt;参数序号&gt;：&lt;格式控制标记&gt;}</p>
<p>：| &lt;填充&gt; | &lt;对齐&gt; | &lt;宽度&gt; | &lt;，&gt; |&lt;.精度&gt; | &lt;类型&gt;<br>-|-|-<br>引导符号 | 用于填充的单个字符 | &lt;左对齐 &gt;右对齐 ^居中对齐 | 槽设定的输出宽度 | 数字的千位分隔符 | 浮点数小数精度 或 字符串最大输出长度 | 整数类型 b、c、d、o、x、X 浮点数类型e、E、f、%</p>
<h1 id="模块2：time库的使用"><a href="#模块2：time库的使用" class="headerlink" title="模块2：time库的使用"></a>模块2：time库的使用</h1><h2 id="time库基本情况"><a href="#time库基本情况" class="headerlink" title="time库基本情况"></a>time库基本情况</h2><p>-python中处理时间的标准库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">time.&lt;b&gt;()</span><br></pre></td></tr></table></figure>
<p>-time库包含三类函数：</p>
<ol>
<li>时间获取：time()、ctime()、gmtime()</li>
<li>时间格式化：strtime()、strptime()</li>
<li>程序计时：sleep()、perf_counter()</li>
</ol>
<h2 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h2><p>-time()：获取当前时间戳，及计算机内部时间值，浮点数；<br>-ctime()：获取当前时间并以易读方式表示，字符串；<br>-gmtime():获取当前时间，表示为计算机可处理的时间格式；</p>
<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><p>将时间以合理的方式展示出来。<br>-strtime(tpl,ts):tpl是格式化模板字符串，用来定义输出效果；ts是计算机内部时间类型变量；<br>-strptime(str,tpl):与上互补，将时间字符串处理成计算机内部可操作的；</p>
<h2 id="程序计时应用"><a href="#程序计时应用" class="headerlink" title="程序计时应用"></a>程序计时应用</h2><p>-sleep(s):s是休眠时间，单位为秒，可以是浮点数；<br>-perf_counter():返回一个CPU级别的精确时间计数值，单位为秒，由于这个计数值起点不确定，连续调用计算差值才有意义；</p>
<h1 id="实例：文本进度条"><a href="#实例：文本进度条" class="headerlink" title="实例：文本进度条"></a>实例：文本进度条</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TextProBarV1.py简单的开始</span><br><span class="line">import time</span><br><span class="line">scale = 10</span><br><span class="line">print(&quot;------执行开始------&quot;)</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &apos;*&apos; * i</span><br><span class="line">    b = &apos;.&apos; * (scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b))</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;------执行结束------&quot;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TextProBarV2.py单行动态刷新</span><br><span class="line">import time</span><br><span class="line">for i in range(101):</span><br><span class="line">    print(&quot;\r&#123;:3&#125;%&quot;.format(i), end=&quot;&quot;)</span><br><span class="line">    time.sleep(0.1)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TextProBarV3.py完整实例</span><br><span class="line">import time</span><br><span class="line">scale = 50</span><br><span class="line">print(&quot;执行开始&quot;.center(scale//2, &quot;-&quot;))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &apos;*&apos; * i</span><br><span class="line">    b = &apos;.&apos; * (scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    print(&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&apos;&apos;)</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;\n&quot;+&quot;执行结束&quot;.center(scale//2,&apos;-&apos;))</span><br></pre></td></tr></table></figure>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_1</title>
    <url>/2019/05/16/2019-05-16-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_1/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>将源代码一次性转换为目标代码的过程。类似英文翻译。<br><img src="https://i.loli.net/2019/05/17/5cde554bd813521498.png" alt="编译"></p>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>将源代码逐条转换为目标代码同时逐条运行的过程。类似实时同声传译。<br><img src="https://i.loli.net/2019/05/17/5cde55678fc4c61789.png" alt="解释"></p>
<h1 id="静态语言和脚本语言"><a href="#静态语言和脚本语言" class="headerlink" title="静态语言和脚本语言"></a>静态语言和脚本语言</h1><h2 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h2><p>使用编译执行的编程语言，运行速度更快。C/C++/Java等。</p>
<h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><p>使用解释执行的编程语言，维护更方便。Python/JavaScript/Php等。</p>
<h1 id="温度转换实例"><a href="#温度转换实例" class="headerlink" title="温度转换实例"></a>温度转换实例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值: &quot;)</span><br><span class="line">if TempStr[-1] in [&apos;F&apos;, &apos;f&apos;]:</span><br><span class="line">    C = (eval(TempStr[0:-1]) - 32)/1.8</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&apos;C&apos;, &apos;c&apos;]:</span><br><span class="line">    F = 1.8*eval(TempStr[0:-1]) + 32</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入格式错误&quot;)</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言程序设计_2</title>
    <url>/2019/05/16/2019-05-16-Python%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1_2/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-268001?tid=1206073223#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h1><p>turtle（海龟）是turtle绘图体系的Python实现，是Python的标准库之一，使用RGB色彩模式。</p>
<h2 id="空间坐标系"><a href="#空间坐标系" class="headerlink" title="空间坐标系"></a>空间坐标系</h2><p>画布上以中心为原点的空间坐标系：绝对坐标&amp;海龟坐标。</p>
<h2 id="角度坐标系"><a href="#角度坐标系" class="headerlink" title="角度坐标系"></a>角度坐标系</h2><p>画布上以空间x轴为0度的角度坐标系：绝对角度&amp;海龟角度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#PythonDraw.py，绘制“蟒蛇”</span><br><span class="line">import turtle</span><br><span class="line">turtle.setup(650, 350, 200, 200)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-250)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(25)</span><br><span class="line">turtle.pencolor(&quot;purple&quot;)</span><br><span class="line">turtle.seth(-40)</span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.circle(40, 80)</span><br><span class="line">    turtle.circle(-40, 80)</span><br><span class="line">turtle.circle(40, 80/2)</span><br><span class="line">turtle.fd(40)</span><br><span class="line">turtle.circle(16, 180)</span><br><span class="line">turtle.fd(40 * 2/3)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<h1 id="库引用"><a href="#库引用" class="headerlink" title="库引用"></a>库引用</h1><p>扩充Python程序功能的方式。</p>
<ol>
<li>使用import保留字完成</li>
</ol>
<pre><code>import &lt;库名&gt;
&lt;库名&gt;.&lt;函数名&gt;（&lt;函数参数&gt;）</code></pre><ol start="2">
<li>使用from和import保留字完成</li>
</ol>
<pre><code>from &lt;库名&gt; import &lt;函数名&gt;
from &lt;库名&gt; import *
&lt;函数名&gt;（&lt;函数参数&gt;）</code></pre><ol start="3">
<li>使用as和import保留字完成</li>
</ol>
<pre><code>import &lt;库名&gt; as &lt;库别名&gt;
&lt;库别名&gt;.&lt;函数名&gt;（&lt;函数参数&gt;）</code></pre><p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析与展示_3</title>
    <url>/2019/05/16/2019-05-16-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA_3/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-1001870002?tid=1206192225#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="单元7：Pandas库入门"><a href="#单元7：Pandas库入门" class="headerlink" title="单元7：Pandas库入门"></a>单元7：Pandas库入门</h1><p>Pandas是提供高性能易用数据类型和分析工具的第三方python库，可以说是基于Numpy库。<br>import pandas as pd<br>Pandas提供两个数据类型：Series(一维)、DataFrame(二维及多维)，基于这两种数据类型，可以进行基本操作、运算操作、特征类操作、关联类操作等。</p>
<h2 id="Series数据类型"><a href="#Series数据类型" class="headerlink" title="Series数据类型"></a>Series数据类型</h2><p>Series类型由一组数据及与之相关的数据索引组成，索引与数据一一对应，索引可以自定义。</p>
<h3 id="Series类型的创建"><a href="#Series类型的创建" class="headerlink" title="Series类型的创建"></a>Series类型的创建</h3><ol>
<li>从Python列表创建，index与列表元素个数一致；</li>
<li>从标量值创建，此时不能省略index；</li>
<li>从字典类型创建，将字典直接赋给series；</li>
<li>从adarray类型创建；</li>
</ol>
<h3 id="Series类型的基本操作"><a href="#Series类型的基本操作" class="headerlink" title="Series类型的基本操作"></a>Series类型的基本操作</h3><p>由index和values两部分构成，操作类似于ndarray类型，也类似于Python字典类型。需要注意的是，numpy是基于维度的运算，而series是基于索引的运算。</p>
<h2 id="DataFrame数据类型"><a href="#DataFrame数据类型" class="headerlink" title="DataFrame数据类型"></a>DataFrame数据类型</h2><p>DataFrame类型是由共同相同索引的一组列组成。其实是一个表格型的数据类型，每列值类型可以不同。其中既有行索引（index,axis=0），也有列索引(column,axis=1)。常用来表达二维数据。</p>
<h3 id="DataFrame类型的创建"><a href="#DataFrame类型的创建" class="headerlink" title="DataFrame类型的创建"></a>DataFrame类型的创建</h3><ol>
<li>从二维ndarray创建；</li>
<li>从一维ndarray对象字典创建；</li>
<li>从列表类型的字典创建；</li>
</ol>
<h2 id="Pandas库数据类型操作"><a href="#Pandas库数据类型操作" class="headerlink" title="Pandas库数据类型操作"></a>Pandas库数据类型操作</h2><h3 id="改变Series和DataFrame对象"><a href="#改变Series和DataFrame对象" class="headerlink" title="改变Series和DataFrame对象"></a>改变Series和DataFrame对象</h3><p>增加或者重排：重新索引，通过.reindex()函数实现<br>删除：.drop()</p>
<h2 id="Pandas库数据类型运算"><a href="#Pandas库数据类型运算" class="headerlink" title="Pandas库数据类型运算"></a>Pandas库数据类型运算</h2><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>算术运算根据行列索引，补齐后运算，补齐时缺项填充NaN(空值)，运算默认产生浮点数，采用+-*/符号进行运算的二元运算将会产生新的对象，还可以使用方法形式进行运算，如.add()、.sub()、.mul()、.div()，这些均可以选择参数。<br>不同维度间的运算采用广播运算，默认在1轴。</p>
<h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><p>比较运算只能比较相同索引的元素，不进行补齐，采用&gt;&lt;&gt;=&lt;=!=等符号进行运算的二元运算将会产生布尔对象。<br>不同维度间的运算采用广播运算，默认在1轴。</p>
<h1 id="单元8：Pandas数据特征分析"><a href="#单元8：Pandas数据特征分析" class="headerlink" title="单元8：Pandas数据特征分析"></a>单元8：Pandas数据特征分析</h1><h2 id="数据的排序"><a href="#数据的排序" class="headerlink" title="数据的排序"></a>数据的排序</h2><p>.sort_index(axis=0,ascending=True)方法在指定轴上根据<strong>索引</strong>进行排序，默认升序。<br>.sort_values(axis=0,ascending=True)方法在指定轴上根据<strong>数值</strong>进行排序，默认升序。</p>
<h2 id="数据的基本统计分析"><a href="#数据的基本统计分析" class="headerlink" title="数据的基本统计分析"></a>数据的基本统计分析</h2><p>基本同numpy相同。<br>.describe()方法可以针对0轴（各列）做统计汇总，包括非空计数、均值、方差等。</p>
<h2 id="数据的累计统计分析"><a href="#数据的累计统计分析" class="headerlink" title="数据的累计统计分析"></a>数据的累计统计分析</h2><p>.cumsum()、.cumprod()、.cummax()、.cummin()，分别为依次给出前1、2、……、n个数的和、积、最大值、最小值。</p>
<p>滚动计算（窗口计算）：<br>.rolling(w).sum()、.rolling(w).mean()、.rolling(w).var()、.rolling(w).std()、.rolling(w).min()、.rolling(w).max(),分别为依次给出x相邻w个元素的和、平均值、方差、标准差、最大值、最小值。</p>
<h2 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h2><p>.cov()，计算协方差矩阵；<br>.corr()，计算相关系数矩阵，Pearson、Spearman、Kendall等系数；</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
        <tag>数据分析与展示</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析与展示_2</title>
    <url>/2019/05/15/2019-05-15-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA_2/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-1001870002?tid=1206192225#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="单元4：matplotlib库入门"><a href="#单元4：matplotlib库入门" class="headerlink" title="单元4：matplotlib库入门"></a>单元4：matplotlib库入门</h1><p>matplotlib是python优秀的数据可视化第三方库，想法源于matlab(所以个人感觉用法也很像)。<br>matplotlib.pyplot是绘制各类可视化图像的命令子库，相当于快捷方式。import matplotlib.pyplot as plt。</p>
<h2 id="plot函数"><a href="#plot函数" class="headerlink" title="plot函数"></a>plot函数</h2><p>plt.plot(x,y,format_string,**kwargs)<br>x:X轴数据，列表或数组，可选。<br>y:Y轴数据，列表或数组.<br>format_string:控制曲线的格式化字符串，可选，由颜色字符color、风格字符linestyle、标记字符marker组成。</p>
<p>**kwargs：第二组或者多组(x,y,format_string）</p>
<h2 id="pyplot的中文显示"><a href="#pyplot的中文显示" class="headerlink" title="pyplot的中文显示"></a>pyplot的中文显示</h2><p>pyplot默认并不支持中文显示，</p>
<ol>
<li>改变全局字体，需要rcParams修改字体实现。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib</span><br><span class="line">matplotlib.rcParams[&apos;font.family&apos;]=&apos;SimHei&apos;</span><br><span class="line">matplotlib.rcParams[&apos;font.size&apos;]=20</span><br><span class="line">plt.xlabel(&apos;横轴：时间&apos;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>font.family:字体名称；<br>font.style:字体风格，斜体’italie’;<br>font.size:字体大小，整数字号或者’large’、’x-small’;</p>
<ol start="2">
<li>改变局部字体，在有中文输出的地方，增加一个属性：fontproperties<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.xlabel(&apos;横轴：时间&apos;，fontproperties=&apos;SimHei&apos;,fontsize=20)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="pyplot的文本显示"><a href="#pyplot的文本显示" class="headerlink" title="pyplot的文本显示"></a>pyplot的文本显示</h2><p>plt.xlable/plt.ylable/plt.title/plt.text/plt.annotate(在图形中增加戴箭头的注释)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.annotate(s,xy=arrow_crd,xytext=text_crd,arrowprops=dict)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/15/5cdb7cc11ecc069534.png" alt="annotate"></p>
<h2 id="pyplot的子绘图区域"><a href="#pyplot的子绘图区域" class="headerlink" title="pyplot的子绘图区域"></a>pyplot的子绘图区域</h2><p><img src="https://i.loli.net/2019/05/15/5cdb8182cc74b24680.png" alt="subplot2gird"></p>
<p><img src="https://i.loli.net/2019/05/15/5cdb81c122aee50154.png" alt="girdspec"></p>
<h1 id="单元5：matplotlib库基础绘图函数示例"><a href="#单元5：matplotlib库基础绘图函数示例" class="headerlink" title="单元5：matplotlib库基础绘图函数示例"></a>单元5：matplotlib库基础绘图函数示例</h1><h2 id="pyplot饼图的绘制"><a href="#pyplot饼图的绘制" class="headerlink" title="pyplot饼图的绘制"></a>pyplot饼图的绘制</h2><p>函数：plt.pie<br><img src="https://i.loli.net/2019/05/15/5cdbc2efb6e9181159.png" alt="饼图"></p>
<h2 id="pyplot直方图的绘制"><a href="#pyplot直方图的绘制" class="headerlink" title="pyplot直方图的绘制"></a>pyplot直方图的绘制</h2><p>函数：plt.hist<br><img src="https://i.loli.net/2019/05/15/5cdbc63b4486b28677.png" alt="直方图"></p>
<h2 id="pyplot极坐标图的绘制"><a href="#pyplot极坐标图的绘制" class="headerlink" title="pyplot极坐标图的绘制"></a>pyplot极坐标图的绘制</h2><p><img src="https://i.loli.net/2019/05/15/5cdbc69b4bc6355879.png" alt="极坐标图"></p>
<h2 id="pyplot散点图的绘制"><a href="#pyplot散点图的绘制" class="headerlink" title="pyplot散点图的绘制"></a>pyplot散点图的绘制</h2><p><img src="https://i.loli.net/2019/05/15/5cdbc6e79836f32001.png" alt="散点图"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
        <tag>数据分析与展示</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_10</title>
    <url>/2019/05/14/2019-05-14-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_10/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="散列表（哈希表）"><a href="#散列表（哈希表）" class="headerlink" title="散列表（哈希表）"></a>散列表（哈希表）</h1><p>查找对象时，静态查找可以用二分查找，动态查找可以建树，但是比对的过程是数的话可以，如果是字符串的话就比较费时，那么能否把字符串映射为数字呢？这就是散列表。</p>
<p>查找的本质：已知对象找位置。</p>
<ul>
<li>有序安排对象：全序、半序；</li>
<li>直接”算出”对象位置：散列；</li>
</ul>
<p>散列查找的两项基本工作：</p>
<ul>
<li>计算位置：构造散列函数确定关键词存储位置；</li>
<li>解决冲突：应用某种策略解决多个关键字位置相同的问题；</li>
</ul>
<p>“散列（Hashing）”的基本思想：<br>1）以关键字key为自变量，通过一个确定的函数h计算出对应的函数值h(key)，作为数据对象的存储地址。<br>2）可能不同的关键字会映射到同一个散列地址上，称为”冲突”，需要冲突解决策略。</p>
<h1 id="散列函数构造方法"><a href="#散列函数构造方法" class="headerlink" title="散列函数构造方法"></a>散列函数构造方法</h1><p>考虑因素：</p>
<ol>
<li>计算简单，以便提高转换效率</li>
<li>关键字对应的地址空间分布均匀，以尽量减少冲突</li>
</ol>
<h2 id="数字关键字"><a href="#数字关键字" class="headerlink" title="数字关键字"></a>数字关键字</h2><ol>
<li>直接定制法</li>
<li>除留余数法</li>
<li>数字分析法</li>
<li>折叠法</li>
<li>平方取中法</li>
</ol>
<h2 id="字符关键字"><a href="#字符关键字" class="headerlink" title="字符关键字"></a>字符关键字</h2><ol>
<li>简单方法-ASCII码加和法</li>
<li>简单改进法-前三个字符移位法</li>
<li>好的方法-全部字符移位法</li>
</ol>
<h1 id="冲突处理方法"><a href="#冲突处理方法" class="headerlink" title="冲突处理方法"></a>冲突处理方法</h1><p>常见思路：</p>
<ul>
<li>换个位置：开放地址法</li>
<li>同一位置的冲突对象组织在一起：链地址法</li>
</ul>
<h2 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h2><ol>
<li>线性探测法</li>
<li>平方探测法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define MAXTABLESIZE 100000 /* 允许开辟的最大散列表长度 */</span><br><span class="line">typedef int ElementType;    /* 关键词类型用整型 */</span><br><span class="line">typedef int Index;          /* 散列地址类型 */</span><br><span class="line">typedef Index Position;     /* 数据所在位置与散列地址是同一类型 */</span><br><span class="line">/* 散列单元状态类型，分别对应：有合法元素、空单元、有已删除元素 */</span><br><span class="line">typedef enum &#123; Legitimate, Empty, Deleted &#125; EntryType;</span><br><span class="line"> </span><br><span class="line">typedef struct HashEntry Cell; /* 散列表单元类型 */</span><br><span class="line">struct HashEntry&#123;</span><br><span class="line">    ElementType Data; /* 存放元素 */</span><br><span class="line">    EntryType Info;   /* 单元状态 */</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">typedef struct TblNode *HashTable; /* 散列表类型 */</span><br><span class="line">struct TblNode &#123;   /* 散列表结点定义 */</span><br><span class="line">    int TableSize; /* 表的最大长度 */</span><br><span class="line">    Cell *Cells;   /* 存放散列单元数据的数组 */</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">int NextPrime( int N )</span><br><span class="line">&#123; /* 返回大于N且不超过MAXTABLESIZE的最小素数 */</span><br><span class="line">    int i, p = (N%2)? N+2 : N+1; /*从大于N的下一个奇数开始 */</span><br><span class="line"> </span><br><span class="line">    while( p &lt;= MAXTABLESIZE ) &#123;</span><br><span class="line">        for( i=(int)sqrt(p); i&gt;2; i-- )</span><br><span class="line">            if ( !(p%i) ) break; /* p不是素数 */</span><br><span class="line">        if ( i==2 ) break; /* for正常结束，说明p是素数 */</span><br><span class="line">        else  p += 2; /* 否则试探下一个奇数 */</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">HashTable CreateTable( int TableSize )</span><br><span class="line">&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    int i;</span><br><span class="line"> </span><br><span class="line">    H = (HashTable)malloc(sizeof(struct TblNode));</span><br><span class="line">    /* 保证散列表最大长度是素数 */</span><br><span class="line">    H-&gt;TableSize = NextPrime(TableSize);</span><br><span class="line">    /* 声明单元数组 */</span><br><span class="line">    H-&gt;Cells = (Cell *)malloc(H-&gt;TableSize*sizeof(Cell));</span><br><span class="line">    /* 初始化单元状态为“空单元” */</span><br><span class="line">    for( i=0; i&lt;H-&gt;TableSize; i++ )</span><br><span class="line">        H-&gt;Cells[i].Info = Empty;</span><br><span class="line"> </span><br><span class="line">    return H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Position Find( HashTable H, ElementType Key )</span><br><span class="line">&#123;</span><br><span class="line">    Position CurrentPos, NewPos;</span><br><span class="line">    int CNum = 0; /* 记录冲突次数 */</span><br><span class="line"> </span><br><span class="line">    NewPos = CurrentPos = Hash( Key, H-&gt;TableSize ); /* 初始散列位置 */</span><br><span class="line">    /* 当该位置的单元非空，并且不是要找的元素时，发生冲突 */</span><br><span class="line">    while( H-&gt;Cells[NewPos].Info!=Empty &amp;&amp; H-&gt;Cells[NewPos].Data!=Key ) &#123;</span><br><span class="line">                                           /* 字符串类型的关键词需要 strcmp 函数!! */</span><br><span class="line">        /* 统计1次冲突，并判断奇偶次 */</span><br><span class="line">        if( ++CNum%2 )&#123; /* 奇数次冲突 */</span><br><span class="line">            NewPos = CurrentPos + (CNum+1)*(CNum+1)/4; /* 增量为+[(CNum+1)/2]^2 */</span><br><span class="line">            if ( NewPos &gt;= H-&gt;TableSize )</span><br><span class="line">                NewPos = NewPos % H-&gt;TableSize; /* 调整为合法地址 */</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123; /* 偶数次冲突 */</span><br><span class="line">            NewPos = CurrentPos - CNum*CNum/4; /* 增量为-(CNum/2)^2 */</span><br><span class="line">            while( NewPos &lt; 0 )</span><br><span class="line">                NewPos += H-&gt;TableSize; /* 调整为合法地址 */</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NewPos; /* 此时NewPos或者是Key的位置，或者是一个空单元的位置（表示找不到）*/</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool Insert( HashTable H, ElementType Key )</span><br><span class="line">&#123;</span><br><span class="line">    Position Pos = Find( H, Key ); /* 先检查Key是否已经存在 */</span><br><span class="line"> </span><br><span class="line">    if( H-&gt;Cells[Pos].Info != Legitimate ) &#123; /* 如果这个单元没有被占，说明Key可以插入在此 */</span><br><span class="line">        H-&gt;Cells[Pos].Info = Legitimate;</span><br><span class="line">        H-&gt;Cells[Pos].Data = Key;</span><br><span class="line">        /*字符串类型的关键词需要 strcpy 函数!! */</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;键值已存在&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>双散列探测法</li>
<li>再散列</li>
</ol>
<h2 id="分离链接法"><a href="#分离链接法" class="headerlink" title="分离链接法"></a>分离链接法</h2><p>将相同位置上冲突的所有关键词存储在同一个单链表中。</p>
<h1 id="散列表性能分析"><a href="#散列表性能分析" class="headerlink" title="散列表性能分析"></a>散列表性能分析</h1><p>指标：平均查找长度（ASL）用来衡量散列表的查找效率：成功、不成功<br>关键词的比较次数，取决于产生冲突的多少，影响产生冲突多少有以下三个因素：</p>
<ol>
<li>散列函数是否均匀</li>
<li>处理冲突的方法</li>
<li>散列表的装填因子α，应在0.5-0.85之间</li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_9</title>
    <url>/2019/05/13/2019-05-13-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_9/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。<br>这里只讨论内部排序，即默认内存空间足够大，可以存放下所有需要排序的数据。</p>
</blockquote>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>策略：分而治之<br>步骤：从待排数组中找一个主元pivot，按照比主元大和比主元小将数组分为两个数集再分别递归调用，进行排序。<br>最好情况：每次选的主元都正好是中分，T(N)=O(N logN)<br>选主元：方法很多，例如取头中尾三个数的中位数等<br>适用情况：大规模数据，如果是小规模数据，使用递归可能更费时。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 快速排序 - 直接调用库函数 */</span><br><span class="line"> </span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">/*---------------简单整数排序--------------------*/</span><br><span class="line">int compare(const void *a, const void *b)</span><br><span class="line">&#123; /* 比较两整数。非降序排列 */</span><br><span class="line">    return (*(int*)a - *(int*)b);</span><br><span class="line">&#125;</span><br><span class="line">/* 调用接口 */ </span><br><span class="line">qsort(A, N, sizeof(int), compare);</span><br><span class="line">/*---------------简单整数排序--------------------*/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/*--------------- 一般情况下，对结构体Node中的某键值key排序 ---------------*/</span><br><span class="line">struct Node &#123;</span><br><span class="line">    int key1, key2;</span><br><span class="line">&#125; A[MAXN];</span><br><span class="line">  </span><br><span class="line">int compare2keys(const void *a, const void *b)</span><br><span class="line">&#123; /* 比较两种键值：按key1非升序排列；如果key1相等，则按key2非降序排列 */</span><br><span class="line">    int k;</span><br><span class="line">    if ( ((const struct Node*)a)-&gt;key1 &lt; ((const struct Node*)b)-&gt;key1 )</span><br><span class="line">        k = 1;</span><br><span class="line">    else if ( ((const struct Node*)a)-&gt;key1 &gt; ((const struct Node*)b)-&gt;key1 )</span><br><span class="line">        k = -1;</span><br><span class="line">    else &#123; /* 如果key1相等 */</span><br><span class="line">        if ( ((const struct Node*)a)-&gt;key2 &lt; ((const struct Node*)b)-&gt;key2 )</span><br><span class="line">            k = -1;</span><br><span class="line">        else</span><br><span class="line">            k = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return k;</span><br><span class="line">&#125;</span><br><span class="line">/* 调用接口 */ </span><br><span class="line">qsort(A, N, sizeof(struct Node), compare2keys);</span><br><span class="line">/*--------------- 一般情况下，对结构体Node中的某键值key排序 ---------------*/</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 快速排序 */</span><br><span class="line"> </span><br><span class="line">ElementType Median3( ElementType A[], int Left, int Right )</span><br><span class="line">&#123; </span><br><span class="line">    int Center = (Left+Right) / 2;</span><br><span class="line">    if ( A[Left] &gt; A[Center] )</span><br><span class="line">        Swap( &amp;A[Left], &amp;A[Center] );</span><br><span class="line">    if ( A[Left] &gt; A[Right] )</span><br><span class="line">        Swap( &amp;A[Left], &amp;A[Right] );</span><br><span class="line">    if ( A[Center] &gt; A[Right] )</span><br><span class="line">        Swap( &amp;A[Center], &amp;A[Right] );</span><br><span class="line">    /* 此时A[Left] &lt;= A[Center] &lt;= A[Right] */</span><br><span class="line">    Swap( &amp;A[Center], &amp;A[Right-1] ); /* 将基准Pivot藏到右边*/</span><br><span class="line">    /* 只需要考虑A[Left+1] … A[Right-2] */</span><br><span class="line">    return  A[Right-1];  /* 返回基准Pivot */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Qsort( ElementType A[], int Left, int Right )</span><br><span class="line">&#123; /* 核心递归函数 */ </span><br><span class="line">     int Pivot, Cutoff, Low, High;</span><br><span class="line">       </span><br><span class="line">     if ( Cutoff &lt;= Right-Left ) &#123; /* 如果序列元素充分多，进入快排 */</span><br><span class="line">          Pivot = Median3( A, Left, Right ); /* 选基准 */ </span><br><span class="line">          Low = Left; High = Right-1;</span><br><span class="line">          while (1) &#123; /*将序列中比基准小的移到基准左边，大的移到右边*/</span><br><span class="line">               while ( A[++Low] &lt; Pivot ) ;</span><br><span class="line">               while ( A[--High] &gt; Pivot ) ;</span><br><span class="line">               if ( Low &lt; High ) Swap( &amp;A[Low], &amp;A[High] );</span><br><span class="line">               else break;</span><br><span class="line">          &#125;</span><br><span class="line">          Swap( &amp;A[Low], &amp;A[Right-1] );   /* 将基准换到正确的位置 */ </span><br><span class="line">          Qsort( A, Left, Low-1 );    /* 递归解决左边 */ </span><br><span class="line">          Qsort( A, Low+1, Right );   /* 递归解决右边 */  </span><br><span class="line">     &#125;</span><br><span class="line">     else InsertionSort( A+Left, Right-Left+1 ); /* 元素太少，用简单排序 */ </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void QuickSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 统一接口 */</span><br><span class="line">     Qsort( A, 0, N-1 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="表排序"><a href="#表排序" class="headerlink" title="表排序"></a>表排序</h1><p>表排序是一种间接排序算法，定义一个指针数组作为“表”（table）<br><img src="https://i.loli.net/2019/05/14/5cda2bcef36b512015.png" alt="表排序"></p>
<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p><img src="https://i.loli.net/2019/05/14/5cda2dfbcc17e29869.png" alt="基数排序"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 基数排序 - 次位优先 */</span><br><span class="line"> </span><br><span class="line">/* 假设元素最多有MaxDigit个关键字，基数全是同样的Radix */</span><br><span class="line">#define MaxDigit 4</span><br><span class="line">#define Radix 10</span><br><span class="line"> </span><br><span class="line">/* 桶元素结点 */</span><br><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    int key;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/* 桶头结点 */</span><br><span class="line">struct HeadNode &#123;</span><br><span class="line">    PtrToNode head, tail;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct HeadNode Bucket[Radix];</span><br><span class="line">  </span><br><span class="line">int GetDigit ( int X, int D )</span><br><span class="line">&#123; /* 默认次位D=1, 主位D&lt;=MaxDigit */</span><br><span class="line">    int d, i;</span><br><span class="line">     </span><br><span class="line">    for (i=1; i&lt;=D; i++) &#123;</span><br><span class="line">        d = X % Radix;</span><br><span class="line">        X /= Radix;</span><br><span class="line">    &#125;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void LSDRadixSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 基数排序 - 次位优先 */</span><br><span class="line">     int D, Di, i;</span><br><span class="line">     Bucket B;</span><br><span class="line">     PtrToNode tmp, p, List = NULL; </span><br><span class="line">      </span><br><span class="line">     for (i=0; i&lt;Radix; i++) /* 初始化每个桶为空链表 */</span><br><span class="line">         B[i].head = B[i].tail = NULL;</span><br><span class="line">     for (i=0; i&lt;N; i++) &#123; /* 将原始序列逆序存入初始链表List */</span><br><span class="line">         tmp = (PtrToNode)malloc(sizeof(struct Node));</span><br><span class="line">         tmp-&gt;key = A[i];</span><br><span class="line">         tmp-&gt;next = List;</span><br><span class="line">         List = tmp;</span><br><span class="line">     &#125;</span><br><span class="line">     /* 下面开始排序 */ </span><br><span class="line">     for (D=1; D&lt;=MaxDigit; D++) &#123; /* 对数据的每一位循环处理 */</span><br><span class="line">         /* 下面是分配的过程 */</span><br><span class="line">         p = List;</span><br><span class="line">         while (p) &#123;</span><br><span class="line">             Di = GetDigit(p-&gt;key, D); /* 获得当前元素的当前位数字 */</span><br><span class="line">             /* 从List中摘除 */</span><br><span class="line">             tmp = p; p = p-&gt;next;</span><br><span class="line">             /* 插入B[Di]号桶尾 */</span><br><span class="line">             tmp-&gt;next = NULL;</span><br><span class="line">             if (B[Di].head == NULL)</span><br><span class="line">                 B[Di].head = B[Di].tail = tmp;</span><br><span class="line">             else &#123;</span><br><span class="line">                 B[Di].tail-&gt;next = tmp;</span><br><span class="line">                 B[Di].tail = tmp;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         /* 下面是收集的过程 */</span><br><span class="line">         List = NULL; </span><br><span class="line">         for (Di=Radix-1; Di&gt;=0; Di--) &#123; /* 将每个桶的元素顺序收集入List */</span><br><span class="line">             if (B[Di].head) &#123; /* 如果桶不为空 */</span><br><span class="line">                 /* 整桶插入List表头 */</span><br><span class="line">                 B[Di].tail-&gt;next = List;</span><br><span class="line">                 List = B[Di].head;</span><br><span class="line">                 B[Di].head = B[Di].tail = NULL; /* 清空桶 */</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     /* 将List倒入A[]并释放空间 */</span><br><span class="line">     for (i=0; i&lt;N; i++) &#123;</span><br><span class="line">        tmp = List;</span><br><span class="line">        List = List-&gt;next;</span><br><span class="line">        A[i] = tmp-&gt;key;</span><br><span class="line">        free(tmp);</span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 基数排序 - 主位优先 */</span><br><span class="line"> </span><br><span class="line">/* 假设元素最多有MaxDigit个关键字，基数全是同样的Radix */</span><br><span class="line"> </span><br><span class="line">#define MaxDigit 4</span><br><span class="line">#define Radix 10</span><br><span class="line"> </span><br><span class="line">/* 桶元素结点 */</span><br><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int key;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/* 桶头结点 */</span><br><span class="line">struct HeadNode &#123;</span><br><span class="line">    PtrToNode head, tail;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct HeadNode Bucket[Radix];</span><br><span class="line">  </span><br><span class="line">int GetDigit ( int X, int D )</span><br><span class="line">&#123; /* 默认次位D=1, 主位D&lt;=MaxDigit */</span><br><span class="line">    int d, i;</span><br><span class="line">     </span><br><span class="line">    for (i=1; i&lt;=D; i++) &#123;</span><br><span class="line">        d = X%Radix;</span><br><span class="line">        X /= Radix;</span><br><span class="line">    &#125;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void MSD( ElementType A[], int L, int R, int D )</span><br><span class="line">&#123; /* 核心递归函数: 对A[L]...A[R]的第D位数进行排序 */</span><br><span class="line">     int Di, i, j;</span><br><span class="line">     Bucket B;</span><br><span class="line">     PtrToNode tmp, p, List = NULL; </span><br><span class="line">     if (D==0) return; /* 递归终止条件 */</span><br><span class="line">      </span><br><span class="line">     for (i=0; i&lt;Radix; i++) /* 初始化每个桶为空链表 */</span><br><span class="line">         B[i].head = B[i].tail = NULL;</span><br><span class="line">     for (i=L; i&lt;=R; i++) &#123; /* 将原始序列逆序存入初始链表List */</span><br><span class="line">         tmp = (PtrToNode)malloc(sizeof(struct Node));</span><br><span class="line">         tmp-&gt;key = A[i];</span><br><span class="line">         tmp-&gt;next = List;</span><br><span class="line">         List = tmp;</span><br><span class="line">     &#125;</span><br><span class="line">     /* 下面是分配的过程 */</span><br><span class="line">     p = List;</span><br><span class="line">     while (p) &#123;</span><br><span class="line">         Di = GetDigit(p-&gt;key, D); /* 获得当前元素的当前位数字 */</span><br><span class="line">         /* 从List中摘除 */</span><br><span class="line">         tmp = p; p = p-&gt;next;</span><br><span class="line">         /* 插入B[Di]号桶 */</span><br><span class="line">         if (B[Di].head == NULL) B[Di].tail = tmp;</span><br><span class="line">         tmp-&gt;next = B[Di].head;</span><br><span class="line">         B[Di].head = tmp;</span><br><span class="line">     &#125;</span><br><span class="line">     /* 下面是收集的过程 */</span><br><span class="line">     i = j = L; /* i, j记录当前要处理的A[]的左右端下标 */</span><br><span class="line">     for (Di=0; Di&lt;Radix; Di++) &#123; /* 对于每个桶 */</span><br><span class="line">         if (B[Di].head) &#123; /* 将非空的桶整桶倒入A[], 递归排序 */</span><br><span class="line">             p = B[Di].head;</span><br><span class="line">             while (p) &#123;</span><br><span class="line">                 tmp = p;</span><br><span class="line">                 p = p-&gt;next;</span><br><span class="line">                 A[j++] = tmp-&gt;key;</span><br><span class="line">                 free(tmp);</span><br><span class="line">             &#125;</span><br><span class="line">             /* 递归对该桶数据排序, 位数减1 */</span><br><span class="line">             MSD(A, i, j-1, D-1);</span><br><span class="line">             i = j; /* 为下一个桶对应的A[]左端 */</span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void MSDRadixSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 统一接口 */</span><br><span class="line">    MSD(A, 0, N-1, MaxDigit); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="排序算法比较"><a href="#排序算法比较" class="headerlink" title="排序算法比较"></a>排序算法比较</h1><p><img src="https://i.loli.net/2019/05/14/5cda2f24f15e577385.png" alt="排序算法比较"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>R-CNN系列</title>
    <url>/2019/05/12/2019-05-12-R-CNN%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p>在解析Mask R-CNN之前，不得不告诉大家一个事实，Mask R-CNN是继承于Faster R-CNN (2016)的，Mask R-CNN只是在Faster R-CNN上面加了一个Mask Prediction Branch (Mask 预测分支)，并且改良了ROI Pooling，提出了ROI Align。所以，在解析Mask R-CNN之前，先给大家分析一下Faster R-CNN。<br>在给大家解析Faster R-CNN之前，又要告诉大家，Faster R-CNN是继承于Fast R-CNN (2015)，Fast R-CNN继承于R-CNN (2014)。因此，索性破釜沉舟，在本篇博文中，就按照R-CNN, Fast R-CNN，Faster R-CNN再到Mask R-CNN的发展顺序全部解析。</p>
</blockquote>
<h1 id="1-R-CNN"><a href="#1-R-CNN" class="headerlink" title="1. R-CNN"></a>1. R-CNN</h1><p>简单来说，R-CNN首先模型输入为一张图片，然后在图片上提出了约2000个待检测区域，然后这2000个待检测区域一个一个地(串联方式)通过卷积神经网络提取特征，然后这些被提取的特征通过一个支持向量机(SVM)进行分类，得到物体的类别，并通过一个bounding box regression调整目标包围框的大小。<br>具体步骤分为四步：</p>
<ol>
<li>候选区域提出阶段（Proposal）：采用selective-search方法，从一幅图像生成1K~2K个候选区域；</li>
<li>特征提取：对每个候选区域，使用CNN进行特征提取；</li>
<li>分类：每个候选区域的特征放入分类器SVM，得到该候选区域的分类结果；</li>
<li>回归：候选区域的特征放入回归器，得到bbox的修正量。</li>
</ol>
<h2 id="1-1-候选区域提出阶段所产生的结果尺寸不同？"><a href="#1-1-候选区域提出阶段所产生的结果尺寸不同？" class="headerlink" title="1.1 候选区域提出阶段所产生的结果尺寸不同？"></a>1.1 候选区域提出阶段所产生的结果尺寸不同？</h2><p>由于RCNN特征提取阶段采用的是AlexNet，其最后两层是全连接层fc6和fc7，所以必须保证输入的图片尺寸相同。</p>
<p>而候选区域所产生的结果尺寸是不相同的。为此，论文中作者采用了多种方式对图片进行放缩（各向同性、各向异性、加padding），最后经过对比实验确定各向异性加padding的放缩方式效果最好。各向同性、各向异性、加padding的具体效果可以看上面链接中的文章。</p>
<h2 id="1-2-分类器SVM使用的是二分类？"><a href="#1-2-分类器SVM使用的是二分类？" class="headerlink" title="1.2 分类器SVM使用的是二分类？"></a>1.2 分类器SVM使用的是二分类？</h2><p>论文中，单个SVM实现的是二分类，分类器阶段由多个SVM组合而成。比如总共有20种不同的物体（加1种背景），那么分类阶段必须要有21个SVM：第1个SVM的输出是该候选区域属于分类1的概率；第2个SVM的输出是该候选区域属于分类2的概率；……；第21个SVM的输出是该候选区域属于背景的概率。</p>
<p>对21个SVM的输出结果进行排序，哪个输出最大，候选区域就属于哪一类。比如，对于某个候选区域，第21个SVM的输出最大，那么就将该候选区域标为背景。</p>
<h2 id="1-3-分类器的输入是？回归器的输入是？"><a href="#1-3-分类器的输入是？回归器的输入是？" class="headerlink" title="1.3 分类器的输入是？回归器的输入是？"></a>1.3 分类器的输入是？回归器的输入是？</h2><p>分类器的输入是特征提取器AlexNet的fc6的输出结果，回归器的输入是特征提取器AlexNet的pool5的输出结果。</p>
<p>之所以这样取输入，是因为，分类器不依赖坐标信息，所以取fc6全连接层的结果是没有问题的。但是回归器依赖坐标信息（要输出坐标的修正量），必须取坐标信息还没有丢失前的层。而fc6全连接层已经丢失了坐标信息。</p>
<h2 id="1-4-正负样本的选择？"><a href="#1-4-正负样本的选择？" class="headerlink" title="1.4 正负样本的选择？"></a>1.4 正负样本的选择？</h2><p>正负样本是必须要考虑的问题。论文的做法是每个batch所采样的正负样本比为1：3。当然这个比例是可以变化的，这个系列的后续改进就把正负样本比变为了1：1。</p>
<p>如果之前没有接触过类似问题的话，是比较容易想当然地认为训练特征提取器、分类器、回归器时，就是把候选区域生成阶段的所有候选区域都放入训练。这样的思路是错的。一张图片中，背景占了绝大多数地方，这样就导致训练用的正样本远远少于负样本，对训练不利。</p>
<p>正确的做法是对所有候选区域进行随机采样，要求采样的结果中正样本有x张，负样本y张，且保证x与y在数值上相近。（对于一些问题，不大容易做到x:y = 1:1，但至少x与y应该在同一数量级下）</p>
<h2 id="1-5-如何训练？"><a href="#1-5-如何训练？" class="headerlink" title="1.5 如何训练？"></a>1.5 如何训练？</h2><p>RCNN的网络架构，注定了它不能像其他网络那样进行端到端（end-to-end）的训练。</p>
<p>前面提到RCNN分为4个阶段：Proposal阶段、特征提取阶段、分类阶段、回归阶段。这4个阶段都是相互独立训练的。</p>
<p>首先，特征提取器是AlexNet，将它的最后一层fc7进行改造，使得fc7能够输出分类结果。Proposal阶段对每张图片产生了1k~2k个候选区域，把这些图片依照正负样本比例喂给特征提取器，特征提取器fc7输出的分类结果与标签结果进行比对，完成特征提取器的训练。特征提取器的训练完成后，fc7层的使命也完成了，后面的分类器和回归器只会用到fc6、pool5的输出。</p>
<p>然后，Proposal和特征提取器已经训练完毕了。把它们的结果fc6，输入到分类器SVM中，SVM输出与标签结果比对，完成SVM的训练。</p>
<p>最后，回归器的训练也和SVM类似，只不过回归器取的是pool5的结果。</p>
<p>为什么不能同时进行上面3步的训练？因为特征提取器是CNN，分类器是SVM，回归器是脊回归器，不属于同一体系，无法共同训练。甚至在测试时，也需要把每一阶段的结果先保存到磁盘，再喂入下一阶段。这是非常麻烦的一件事。</p>
<p>聪明的你可能已经想到了：CNN不就能完成分类器和回归器的任务嘛？为什么不只用CNN？这就是RCNN系列后续做的改进之一，我们在下面会讲到。但由于某些原因，在RCNN这篇论文发表时，采用的是特征提取、分类器、回归器相互独立的结构。</p>
<h2 id="1-6-Proposal的每个候选区域单独提取特征，是不是很慢？"><a href="#1-6-Proposal的每个候选区域单独提取特征，是不是很慢？" class="headerlink" title="1.6 Proposal的每个候选区域单独提取特征，是不是很慢？"></a>1.6 Proposal的每个候选区域单独提取特征，是不是很慢？</h2><p>是的，很慢。Proposal阶段会产生1k<del>2k个候选区域，每个候选区域都独立提取特征的话，那相当于每幅图片都要进行1k</del>2k次CNN。（当然由于有正负样本采样，实际并没有有这么多）</p>
<p>有没有什么好方法？聪明的你应该能想到：既然候选区域都是图片的一部分，那么先对整张图片进行特征提取，然后根据每个候选区域在原图上的位置选择相应的特征不就行了。</p>
<p>这种方式正是RCNN系列的后续改进之一，只不过在实现上要动点脑筋。（这种方式得到的每个区域的特征数目是不同的，如何把不同特征数目变为相同数目？）</p>
<h1 id="2-Fast-RCNN"><a href="#2-Fast-RCNN" class="headerlink" title="2. Fast-RCNN"></a>2. Fast-RCNN</h1><p>首先还是采用selective search提取2000个候选框，然后，使用一个神经网络对全图进行特征提取。接着，使用一个RoI Pooling Layer在全图特征上摘取每一个RoI对应的特征，再通过全连接层(FC Layer)进行分类与包围框的修正。Fast R-CNN的贡献可以主要分为两个方面：</p>
<p>1) 取代R-CNN的串行特征提取方式，直接采用一个神经网络对全图提取特征(这也是为什么需要RoI Pooling的原因)。<br>2) 除了selective search，其他部分都可以合在一起训练。</p>
<h2 id="2-1-为什么叫Fast？"><a href="#2-1-为什么叫Fast？" class="headerlink" title="2.1 为什么叫Fast？"></a>2.1 为什么叫Fast？</h2><p>将特征提取器、分类器、回归器合并，使得训练过程不需要再将每阶段结果保存磁盘单独训练，可以一次性完成训练，加快了训练速度。这是Fast之一。</p>
<p>对整张图片进行特征提取，用ROI层处理候选区域的特征，使得原本每一个候选区域都要做一次特征提取，变为了现在一整张图片做一次特征提取。训练速度（8.8倍）和测试速度（146倍）都大大加快，这是Fast之二。</p>
<h2 id="2-2-分类器和回归器的实现细节？"><a href="#2-2-分类器和回归器的实现细节？" class="headerlink" title="2.2 分类器和回归器的实现细节？"></a>2.2 分类器和回归器的实现细节？</h2><p>分类器应该都能想到，用的softmax代替SVM。</p>
<p>回归器求出（x,y,w,h）4个量，分别代表定位框左上角的坐标xy、宽度w、高度h，损失函数用的是Smooth-L1。</p>
<h2 id="2-3-Proposal阶段看上去有点违和？"><a href="#2-3-Proposal阶段看上去有点违和？" class="headerlink" title="2.3 Proposal阶段看上去有点违和？"></a>2.3 Proposal阶段看上去有点违和？</h2><p>发展到Fast-RCNN，后续3个阶段都是CNN完成的了，只剩下Proposal阶段还没有用CNN方式解决。Proposal阶段的结果还是需要先保存到磁盘，再喂入后续阶段，有点违和。</p>
<p>RCNN系列后续的改进，将把Proposal阶段也用CNN实现，真正做到端到端（end-to-end）。</p>
<h1 id="3-Faster-RCNN"><a href="#3-Faster-RCNN" class="headerlink" title="3.Faster-RCNN"></a>3.Faster-RCNN</h1><p>Faster-RCNN引入了RPN网络（region proposal network）来代替selective-search。这使得整个网络实现了端到端。</p>
<h2 id="3-1-RPN网络是如何工作的？"><a href="#3-1-RPN网络是如何工作的？" class="headerlink" title="3.1 RPN网络是如何工作的？"></a>3.1 RPN网络是如何工作的？</h2><p>整张图片经过特征提取，得到FeatureMap；将FeatureMap中的每一点按照视野域找到原图中对应的位置，称为Anchor；每个Anchor生成不同大小不同长宽比的多个候选区域。</p>
<p>回忆下selective-search的候选区域生成方式，它是按照颜色和纹理不断合并得到候选区域的，候选区域的产生没有规律，而RPN是每个Anchor都有对应的固定数量的候选区域，规律很明显。</p>
<p>理论上说，selective-search生成候选区域的方式更符合我们的直觉，而实验结果，在Faster-RCNN中RPN并不比selective-search差</p>
<h2 id="3-2-为什么是Faster？"><a href="#3-2-为什么是Faster？" class="headerlink" title="3.2 为什么是Faster？"></a>3.2 为什么是Faster？</h2><p>容易想到，现在RPN网络可以与其他3个阶段共用同一个特征提取结果了，省掉了selective-search的时间。而事实上，selective-search是非常慢的，所以叫Faster。</p>
<h1 id="4-Mask-RCNN"><a href="#4-Mask-RCNN" class="headerlink" title="4.Mask-RCNN"></a>4.Mask-RCNN</h1><h2 id="4-1-为什么叫mask？"><a href="#4-1-为什么叫mask？" class="headerlink" title="4.1 为什么叫mask？"></a>4.1 为什么叫mask？</h2><p>Faster-RCNN网络的最后分别是分类网络和回归网络两条路并行，Mask-RCNN则是再加一条Mask网络与它们并行。</p>
<p>Mask网络的实现是FCN网络，这也是语义分割领域中非常经典的网络结构。</p>
<p>由于Mask网络的加入，Mask-RCNN不仅能处理物体检测问题，还能处理语义分割问题。</p>
<h2 id="4-2-还有哪些细节上的变化？"><a href="#4-2-还有哪些细节上的变化？" class="headerlink" title="4.2 还有哪些细节上的变化？"></a>4.2 还有哪些细节上的变化？</h2><p>首先是ROI层变为了ROIAlign，目的是一样的。那为什么要加入ROIAlign呢？这是因为ROI层会有对齐问题，对齐问题在分类和框选时影响不大，但在语义分割需要严格依赖每个像素点的坐标时，影响会很大。ROIAlign能够解决对齐问题。</p>
<p>然后是特征提取网络改为了ResNet101+FPN；FPN建议对语义分割或者关键点定位感兴趣的同学了解下，FPN是这两个领域中非常经典的结构。</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Mask R-CNN总结</title>
    <url>/2019/05/07/2019-05-07-Mask%20R-CNN%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>原文链接：<a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">https://arxiv.org/abs/1703.06870</a><br>目前找到了非常好的一位博客：<a href="https://blog.csdn.net/WZZ18191171661/article/details/79453780，" target="_blank" rel="noopener">https://blog.csdn.net/WZZ18191171661/article/details/79453780，</a> 感谢！<br><a href="https://blog.csdn.net/jiongnima/article/details/79094159，" target="_blank" rel="noopener">https://blog.csdn.net/jiongnima/article/details/79094159，</a> 这个也不错。<br>相关知识介绍：<br>R-CNN-<a href="https://www.jianshu.com/p/5056e6143ed5" target="_blank" rel="noopener">https://www.jianshu.com/p/5056e6143ed5</a>;<br>Faster R-CNN-<a href="https://blog.csdn.net/qq_17448289/article/details/52871461" target="_blank" rel="noopener">https://blog.csdn.net/qq_17448289/article/details/52871461</a><br><a href="https://blog.csdn.net/u011974639/article/details/78053203" target="_blank" rel="noopener">https://blog.csdn.net/u011974639/article/details/78053203</a>, 个人感觉这两篇讲的很好。</p>
</blockquote>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><ul>
<li>Mask RCNN可以看做是一个通用实例分割架构。</li>
<li>Mask RCNN以Faster RCNN原型，增加了一个分支用于分割任务。</li>
<li>Mask RCNN比Faster RCNN速度慢一些，达到了5fps。</li>
<li>可用于人的姿态估计等其他任务</li>
</ul>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h1><ul>
<li>实例分割不仅要正确的找到图像中的objects，还要对其精确的分割。所以Instance Segmentation可以看做object dection和semantic segmentation的结合。</li>
<li>Mask RCNN是Faster RCNN的扩展，对于Faster RCNN的每个Proposal Box都要使用FCN进行语义分割，分割任务与定位、分类任务是同时进行的。</li>
<li>引入了RoI Align代替Faster RCNN中的RoI Pooling。因为RoI Pooling并不是按照像素一一对齐的（pixel-to-pixel alignment），也许这对bbox的影响不是很大，但对于mask的精度却有很大影响。使用RoI Align后mask的精度从10%显著提高到50%，第3节将会仔细说明。</li>
<li>引入语义分割分支，实现了mask和class预测的关系的解耦，mask分支只做语义分割，类型预测的任务交给另一个分支。这与原本的FCN网络是不同的，原始的FCN在预测mask时还用同时预测mask所属的种类。</li>
<li>没有使用什么花哨的方法，Mask RCNN就超过了当时所有的state-of-the-art模型。</li>
<li>使用8-GPU的服务器训练了两天。</li>
</ul>
<h1 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h1><ul>
<li>相比于FCIS，FCIS使用全卷机网络，同时预测物体classes、boxes、masks，速度更快，但是对于重叠物体的分割效果不好。</li>
</ul>
<h1 id="3-Mask-R-CNN"><a href="#3-Mask-R-CNN" class="headerlink" title="3.Mask R-CNN"></a>3.Mask R-CNN</h1><ul>
<li>Mask R-CNN基本结构：与Faster RCNN采用了相同的two-state步骤：首先是找出RPN，然后对RPN找到的每个RoI进行分类、定位、并找到binary mask。这与当时其他先找到mask然后在进行分类的网络是不同的。</li>
<li>Mask R-CNN的损失函数：L = L<sub>cls</sub> + L<sub>box</sub> + L<sub>mask</sub></li>
<li>Mask的表现形式(Mask Representation)：因为没有采用全连接层并且使用了RoIAlign，可以实现输出与输入的像素一一对应。</li>
<li>RoIAlign：RoIPool的目的是为了从RPN网络确定的ROI中导出较小的特征图(a small feature map，eg 7x7)，ROI的大小各不相同，但是RoIPool后都变成了7x7大小。RPN网络会提出若干RoI的坐标以[x,y,w,h]表示，然后输入RoI Pooling，输出7x7大小的特征图供分类和定位使用。问题就出在RoI Pooling的输出大小是7x7上，如果RON网络输出的RoI大小是8*8的，那么无法保证输入像素和输出像素是一一对应，首先他们包含的信息量不同（有的是1对1，有的是1对2），其次他们的坐标无法和输入对应起来（1对2的那个RoI输出像素该对应哪个输入像素的坐标？）。这对分类没什么影响，但是对分割却影响很大。RoIAlign的输出坐标使用插值算法得到，不再量化；每个grid中的值也不再使用max，同样使用差值算法。</li>
<li>Network Architecture: 为了表述清晰，有两种分类方法</li>
</ul>
<ol>
<li>使用了不同的backbone：resnet-50，resnet-101，resnext-50，resnext-101；</li>
<li>使用了不同的head Architecture：Faster RCNN使用resnet50时，从CONV4导出特征供RPN使用，这种叫做ResNet-50-C4</li>
<li>作者使用除了使用上述这些结构外，还使用了一种更加高效的backbone——FPN</li>
</ol>
<h2 id="3-1-Implementation-Details"><a href="#3-1-Implementation-Details" class="headerlink" title="3.1.Implementation Details"></a>3.1.Implementation Details</h2><p>使用Fast/Faster相同的超参数，同样适用于Mask RCNN</p>
<ul>
<li>Training:<br>1、与之前相同，当IoU与Ground Truth的IoU大于0.5时才会被认为有效的RoI，L{_{mask}}只把有效RoI计算进去。<br>2、采用image-centric training，图像短边resize到800，每个GPU的mini-batch设置为2，每个图像生成N个RoI，对于C4 backbone的N=64，对于FPN作为backbone的，N=512。作者服务器中使用了8块GPU，所以总的minibatch是16，迭代了160k次，初始lr=0.02，在迭代到120k次时，将lr设定到 lr=0.002，另外学习率的weight_decay=0.0001，momentum = 0.9。如果是resnext，初始lr=0.01,每个GPU的mini-batch是1。<br>3、RPN的anchors有5种scale，3种ratios。为了方便剥离、如果没有特别指出，则RPN网络是单独训练的且不与Mask R-CNN共享权重。但是在本论文中，RPN和Mask R-CNN使用一个backbone，所以他们的权重是共享的。<br>（Ablation Experiments 为了方便研究整个网络中哪个部分其的作用到底有多大，需要把各部分剥离开）</li>
</ul>
<ul>
<li>Inference：<br>在测试时，使用C4 backbone情况下proposal number=300，使用FPN时proposal number=1000。然后在这些proposal上运行bbox预测，接着进行非极大值抑制。mask分支只应用在得分最高的100个proposal上。顺序和train是不同的，但这样做可以提高速度和精度。mask 分支对于每个roi可以预测k个类别，但是我们只要背景和前景两种，所以只用k-th mask，k是根据分类分支得到的类型。然后把k-th mask resize成roi大小，同时使用阈值分割(threshold=0.5)二值化</li>
</ul>
<h1 id="4-Experiments-Instance-Segmentation"><a href="#4-Experiments-Instance-Segmentation" class="headerlink" title="4.Experiments: Instance Segmentation"></a>4.Experiments: Instance Segmentation</h1><h2 id="4-1-Main-Results"><a href="#4-1-Main-Results" class="headerlink" title="4.1.Main Results"></a>4.1.Main Results</h2><p>在下图中可以明显看出，FCIS的分割结果中都会出现一条竖着的线(systematic artifacts)，这线主要出现在物体重的部分，作者认为这是FCIS架构的问题，无法解决的。但是在Mask RCNN中没有出现。<br><img src="https://i.loli.net/2019/04/29/5cc65cc9ecfc3.png" alt="figure6&amp;table2"></p>
<h2 id="4-2-Ablation-Experiments"><a href="#4-2-Ablation-Experiments" class="headerlink" title="4.2. Ablation Experiments"></a>4.2. Ablation Experiments</h2><ul>
<li>Architecture:<br>从table 2a中看出，Mask RCNN随着增加网络的深度、采用更先进的网络，都可以提高效果。注意：并不是所有的网络都是这样。</li>
<li>Multinomial vs. Independent Masks:(mask分支是否进行类别预测)                                                                                    从table 2b中可以看出，使用sigmoid(二分类)和使用softmax(多类别分类)的AP相差很大，证明了分离类别和mask的预测是很有必要的</li>
<li>Class-Specific vs. Class-Agnostic Masks:                                                                                                                            目前使用的mask rcnn都使用class-specific masks，即每个类别都会预测出一个mxm的mask，然后根据类别选取对应的类别的mask。但是使用Class-Agnostic Masks，即分割网络只输出一个mxm的mask，可以取得相似的成绩29.7vs30.3</li>
<li>RoIAlign:                                                                                                                                                                                    tabel 2c证明了RoIAlign的性能</li>
<li>Mask Branch:<br>tabel 2e，FCN比MLP性能更好</li>
</ul>
<h2 id="4-3-Bounding-Box-Detection-Results"><a href="#4-3-Bounding-Box-Detection-Results" class="headerlink" title="4.3.Bounding Box Detection Results"></a>4.3.Bounding Box Detection Results</h2><ul>
<li>Mask RCNN精度高于Faster RCNN</li>
<li>Faster RCNN使用RoI Align的精度更高</li>
<li>Mask RCNN的分割任务得分与定位任务得分相近，说明Mask RCNN已经缩小了这部分差距。</li>
</ul>
<h2 id="4-4-Timing"><a href="#4-4-Timing" class="headerlink" title="4.4.Timing"></a>4.4.Timing</h2><ul>
<li>Inference：195ms一张图片，显卡Nvidia Tesla M40。其实还有速度提升的空间，比如减少proposal的数量等。</li>
<li>Training：ResNet-50-FPN on COCO trainval35k takes 32 hours  in our synchronized 8-GPU implementation (0.72s per 16-image mini-batch)，and 44 hours with ResNet-101-FPN。</li>
</ul>
<h1 id="5-Mask-R-CNN-for-Human-Pose-Estimation"><a href="#5-Mask-R-CNN-for-Human-Pose-Estimation" class="headerlink" title="5. Mask R-CNN for Human Pose Estimation"></a>5. Mask R-CNN for Human Pose Estimation</h1><p>让Mask R-CNN预测k个masks，每个mask对应一个关键点的类型，比如左肩、右肘，可以理解为one-hot形式。</p>
<ul>
<li>使用cross entropy loss，可以鼓励网络只检测一个关键点;</li>
<li>ResNet-FPN结构</li>
<li>训练了90k次，最开始lr=0.02，在迭代60k次时，lr=0.002,80k次时变为0.0002</li>
</ul>
<p><img src="https://i.loli.net/2019/04/29/5cc65f4085801.png" alt="figure7"><br><em>图7.使用Mask R-CNN（ResNet-50-FPN）在COCO测试中的关键点检测结果，以及从相同模型预测的人分割掩码。该模型的关键点AP为63.1，运行速度为5 fps。</em></p>
<p><img src="https://i.loli.net/2019/04/29/5cc6605e29496.png" alt="table4/5/6"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Mask R-CNN</title>
    <url>/2019/04/29/2019-04-29-Mask%20R-CNN/</url>
    <content><![CDATA[<blockquote>
<p>原文链接：<a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">https://arxiv.org/abs/1703.06870</a><br>Mask R-CNN是ICCV 2017的best paper，彰显了机器学习计算机视觉领域在2017年的最新成果。在机器学习2017年的最新发展中，单任务的网络结构已经逐渐不再引人瞩目，取而代之的是集成，复杂，一石多鸟的多任务网络模型。Mask R-CNN就是典型的代表。本篇大作的一作是何凯明，在该篇论文发表的时候，何凯明已经去了FaceBook。</p>
</blockquote>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p><em>我们提出了一个概念上简单，灵活和通用的对象实例分割框架。我们的方法有效地检测图像中的对象，同时为每个实例生成高质量的分割蒙版。这种称为Mask R-CNN的方法通过添加一个用于预测对象掩码的分支来扩展更快的R-CNN，该分支与现有的用于边界框识别的分支并行。掩码R-CNN训练简单，只增加了一小部分开销，以更快的R-CNN，以5fps运行。此外，Mask R-CNN很容易推广到其他任务，例如允许我们在相同的框架中估计人的姿势。我们在COCO全套挑战的所有三个轨道中展示了最佳结果，包括实例分段，边界盒对象检测和人员关键点检测。Mask R-CNN无需花费大量时间就可胜任所有现有的单一模型作品，包括COCO 2016挑战获胜者。我们希望我们简单有效的方法将成为一个坚实的基线，并有助于缓解未来实例级别识别的研究。代码已在：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> facebookresearch / Detectron上提供。</em></p>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h1><p>视觉社区在短时间内迅速改进了对象检测和语义分割结果。在很大程度上，这些进步是由强大的基线系统驱动的，例如分别用于对象检测和语义分割的快速/更快RCNN [12,36]和全卷积网络（FCN）[30]框架。这些方法在概念上是直观的，并且具有灵活性和鲁棒性，以及快速训练和推理时间。我们在这项工作中的目标是为实例分割开发一个相对有利的框架。实例分割具有挑战性，因为它需要正确检测图像中的所有对象，同时也精确地分割每个实例。因此，它将经典的目标检测计算机视觉任务的元素进行了组合，其目标是对各个对象进行分类并使用边界框对每个对象进行本地化，然后进行语义分割，其目的是将每个像素分类为固定的一组类别，而不区分对象实例.1鉴于此，人们可能期望需要一个复杂的方法才能取得好的结果。然而，我们表明，一个令人惊讶的简单，灵活和快速的系统可以超越先前的最新实例分割结果。<br>我们的方法称为Mask R-CNN，可以使R-CNN更快。<br><img src="https://i.loli.net/2019/04/29/5cc657a3425e5.png" alt="figure1"><br><em>图1.用于实例分段的Mask R-CNN框架。</em></p>
<p>[36]通过添加一个分支来预测每个感兴趣区域（RoI）上的分割掩模，并与现有分支进行分类和边界框回归（图1）。掩模分支是应用于每个RoI的小FCN，以像素 - 顶像素方式预测分割掩模。由于R-CNN框架更加快速，面罩R-CNN的实施和训练变得非常简单，这有助于广泛的灵活架构设计。另外，掩码分支只会增加一个小的计算开销，从而实现快速系统和快速实验。<br>原则上，Mask R-CNN是R-CNN的直观扩展，但正确构建掩模分支对于获得好的结果至关重要。最重要的是，更快的RCNN并非针对网络输入和输出之间的像素对像素对齐而设计的。RoIPool [18,12]是参与实例的事实核心操作，为特征提取执行粗略的空间量化，这一点最为明显。为了找到错位，我们提出了一个简单的，无量化的图层，称为RoIAlign，忠实地保留了确切的空间位置。尽管1遵循通用术语，但我们使用对象检测来表示通过边界框而不是掩码进行检测，并使用语义分割来表示每像素分类而不区分实例。但是我们注意到，实例分割既是语义的，也是一种检测形式。<br><img src="https://i.loli.net/2019/04/29/5cc658728ff4e.png" alt="figure2"><br><em>图2.掩盖COCO测试集上的R-CNN结果。这些结果基于ResNet-101 [19]，实现了35.7的掩模AP，并以5 fps运行。面具以彩色显示，还显示了边界框，类别和置信度。</em></p>
<p>一个看似微小的变化，RoIAlign具有很大的影响：它将掩模精度提高了10％到50％，在更严格的本地化指标下显示出更大的收益。其次，我们发现解耦模板和类别预测至关重要：我们独立预测每个类别的二进制掩码，而不需要在类别间进行竞争，并依靠网络的RoI分类分支来预测类别。相比之下，FCNs通常执行每像素多类别分类，结合分割和分类，并基于我们的实验在分割实例方面效果不佳。<br>没有花里胡哨之力，Mask R-CNN超越了COCO实例分割任务中所有先前的最新单模型结果[28]，其中包括来自2016年竞赛冠军的大量工程项目。作为副产品，我们的方法也擅长COCO物体检测任务。在消融实验中，我们评估了多个基本实例，这使我们能够展示其强大性并分析核心因素的影响。<br>我们的模型可以在GPU上以每帧200毫秒的速度运行，并且在单个8 GPU计算机上进行COCO培训需要一到两天。我们相信，快速训练和测试速度，以及框架的灵活性和准确性，将会对实例分割的未来研究起到一定的作用。<br>最后，我们通过COCO关键点数据集上的人体姿态估计任务展示了我们框架的一般性[28]。通过将每个关键点视为一个热门的二进制掩码，只需进行最少的修改Mask R-CNN可用于检测实例特定的姿势。Mask R-CNN超越2016年COCO关键点竞赛的冠军，同时运行速度为5 fps。因此，面膜R-CNN可以更广泛地视为实例级别识别的灵活框架，并且可以很容易地扩展到更复杂的任务。<br>我们已发布代码以促进未来的研究。</p>
<h1 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h1><p>R-CNN：基于区域的CNN（R-CNN）方法[13]对边界框对象进行检测是为了关注可管理数量的候选目标区域[42,20]并独立评估卷积网络[25,24]在每个RoI上。R-CNN得到了扩展[18,12]，允许使用RoIPool在功能地图上参与RoI，从而实现更快的速度和更高的准确性。更快的R-CNN [36]通过学习区域建议网络（RPN）的注意机制来推进这一流程。更快速的R-CNN灵活性强，适用于许多后续改进（例如[38,27,21]），并且是几个基准测试中的当前领先框架。<br>实例细分：在RCNN的有效性的推动下，许多实例细分的方法都基于细分提案。早期的方法[13,15,16,9]采用了自下而上的方法[42,2]。DeepMask [33]和以下着作[34,8]学会提出片段候选者，然后由Fast R-CNN进行分类。在这些方法中，分割先于识别，这是缓慢的并且不太准确。同样，戴等人。 [10]提出了一个复杂的多级级联，从包围盒提议中预测段提议，然后进行分类。相反，我们的方法基于面具和类标签的并行预测，它更简单，更灵活。<br>最近，李等人。 [26]将[8]中的段提议系统和[11]中的对象检测系统合并为“完全卷积实例分段”（FCIS）。[8,11,26]中的共同想法是预测一组完全卷积的位置敏感输出通道。这些通道同时处理对象类，框和掩码，使系统更快。但是FCIS在重叠实例上表现出系统性错误并产生虚假边缘（图6），表明它受到分割实例的根本困难的挑战。<br>另一个解决方案家族[23,4,3,29]实例分割是由语义分割的成功驱动的。从每像素分类结果（例如，FCN输出）开始，这些方法试图将相同类别的像素切割成不同的实例。与这些方法的分段第一策略相比，Mask R-CNN基于实例第一策略。我们预计未来将研究更深入的两种战略。</p>
<h1 id="3-Mask-R-CNN"><a href="#3-Mask-R-CNN" class="headerlink" title="3.Mask R-CNN"></a>3.Mask R-CNN</h1><p>掩码R-CNN在概念上是简单的：更快的R-CNN对于每个候选对象具有两个输出，一个类别标签和一个边界框偏移;为此，我们添加一个输出对象掩码的第三个分支。面具R-CNN因此是一个自然而直观的想法。但是额外的掩码输出与类和盒输出不同，需要提取对象的更精细的空间布局。接下来，我们介绍Mask R-CNN的关键元素，包括像素对像素对齐，这是Fast / Faster R-CNN的主要缺失部分。<br>更快的R-CNN：我们首先回顾一下更快的R-CNN探测器[36]。更快的R-CNN由两个阶段组成。第一阶段称为区域提议网络（RPN），提出候选对象边界框。第二阶段本质上是Fast R-CNN [12]，使用每个候选框中的RoIPool提取特征，并执行分类和边界框回归。两个阶段使用的功能可以共享以加快推断速度。我们引用读者[21]对Faster R-CNN和其他框架进行最新，全面的比较。<br>掩码R-CNN：掩码R-CNN采用相同的两阶段过程，具有相同的第一阶段（即RPN）。在第二阶段，与预测类和盒子偏移并行，Mask R-CNN也为每个RoI输出一个二进制掩码。这与大多数最近的系统形成对比，其中分类依赖于掩模预测（例如[33,10,26]）。我们的方法遵循Fast R-CNN [12]的精神，它并行地应用了边界框分类和回归（其原来大大简化了原始R-CNN的多级流水线[13]）。<br>形式上，在训练期间，我们将每个抽样的RoI的多任务丢失定义为L = Lcls + Lbox + Lmask。分类损失Lcls和边界框损失Lbox与[12]中定义的相同。掩码分支对每个RoI都有一个Km<sup>2</sup>维输出，它编码分辨率为m*m的K个二进制掩码，每个K类一个掩码。为此，我们应用每像素S形，并将Lmask定义为平均二叉交叉熵损失。对于与地面实况类别k相关的RoI，Lmask仅在第k个掩模上定义（其他掩模输出不会造成损失）。<br>我们对Lmask的定义允许网络为每个班级生成口罩，而不需要在班级间进行竞争;我们依靠专用分类分支来预测用于选择输出掩码的类别标签。这样可以将掩码和类别预测分开。这与将FCN [30]应用于语义分割时的常见做法不同，后者通常使用每像素softmax和多项叉熵损失。在这种情况下，跨班级的面具竞争;在我们的例子中，每像素S形和二进制丢失，他们不。我们通过实验显示这个公式对于良好的实例分割结果是关键的。<br><img src="https://i.loli.net/2019/04/29/5cc65a2a8366b.png" alt="figure3"></p>
<p>掩码表示法：掩码编码输入对象的空间布局。因此，与通过完全连接（fc）层不可避免地折叠成短输出矢量的类标签或框偏移不同，提取掩模的空间结构可以通过卷积提供的像素到像素对应自然地解决。<br>具体而言，我们使用FCN预测每个RoI的m<em>m掩码[30]。这允许掩码分支中的每个层保持显式m*m对象空间布局，而不将其折叠成缺少空间维度的向量表示。与之前采用fc层进行掩模预测的方法不同[33,34,10]，我们的完全卷积表示需要更少的参数，并且如实验所证明的那样更精确。<br>这种像素到像素的行为要求我们的RoI特征（它们本身是小特征图）能够很好地对齐以忠实地保留显式的每像素空间对应关系。这促使我们开发了以下RoAlign图层，该图层在遮罩预测中发挥关键作用。<br>RoIlign：RoIPool [12]是从每个RoI提取小特征映射（例如7×7）的标准操作。RoIPool首先将浮点数RoI量化为特征映射的离散粒度，然后将这个量化的RoI细分为自身量化的空间仓，最后汇总每个仓所涵盖的特征值（通常通过最大池）。例如，通过计算在连续坐标x上执行量化，其中16是特征映射步长并且是舍入;同样地，当分成分箱（例如，7×7）时执行量化。这些量化引入了RoI和提取的特征之间的错位。虽然这可能不会影响分类，这对于小型翻译很有用，但它对预测像素精确的蒙版有很大的负面影响。<br>为了解决这个问题，我们提出一个RoIlign层，它可以消除RoIPool的严格量化，正确地将提取的特征与输入对齐。我们提出的改变很简单：我们避免任何RoI边界或分区的量化（即，我们使用x/16而不是|x/16|）。我们使用双线性插值[22]来计算每个RoI bin中四个有规律采样位置的输入特征的精确值，并汇总结果（使用最大值或平均值），详细信息请参见图3。我们注意到，只要未执行量化，结果对精确的采样位置不敏感，或者采样了多少个点。<br>正如我们在§4.2中所展示的，RoIAlign带来了巨大的改进。我们也比较了[10]中提出的RoIWarp操作。与RoIlign不同，RoIWarp忽略了对齐问题，并在[10]中将RoI与RoIPool一样量化为RoI。所以即使RoIWarp也采用[22]激励的双线性重采样，它可以像RoIPool一样实验（表2c中的更多细节），证明了对齐的关键作用。<br>网络体系结构：为了演示我们的方法的一般性，我们实例化具有多种体系结构的Mask R-CNN。为了清楚起见，我们区分：（i）用于整个图像上的特征提取的卷积骨干架构，以及（ii）用于边界框识别（分类和回归）的网络头和分别应用于每个RoI的掩模预测。我们用命名网络深度特征来表示骨干架构。我们评估深度为50或101层的ResNet [19]和ResNeXt [45]网络。带ResNets的更快的R-CNN的原始实施。<br>[19]从第四阶段的最后卷积层提取特征，我们称之为C4。例如，ResNet-50的骨干用ResNet-50-C4表示。这是[19,10,21,39]中常用的选择。<br>我们还探索了Lin等人最近提出的另一种更有效的骨干。 [27]，称为特征金字塔网络（FPN）。FPN使用具有横向连接的自顶向下架构从单一比例输入构建网络内特征金字塔。更快的R-CNN和FPN骨干网根据其规模从不同层次的特征金字塔中提取RoI特征，但其他方法与vanilla ResNet类似。使用ResNet-FPN主干进行MaskNRCNN特征提取，可以提高精度和速度。有关FPN的更多详细信息，请参阅[27]。<br>对于网络负责人，我们密切关注以前工作中提出的架构，并在其中添加完全卷积掩码预测分支。具体而言，我们从ResNet [19]和FPN [27]论文中扩展了更快的R-CNN盒头。详细情况如图4所示。ResNet-C4主干上包含ResNet的第5级（即9层’res5’[19]），它是计算密集型的。对于FPN，骨干已经包含res5，因此可以使用更少的滤波器来提高效率。我们注意到我们的面具分支有一个简单的结构。更复杂的设计有提高性能的潜力，但不是这项工作的重点。<br><img src="https://i.loli.net/2019/04/29/5cc65b1069756.png" alt="figure4"><br>*图4.头架构：我们扩展了两个现有的更快的RCNN头[19,27]。左/右面板分别显示来自[19]和[27]的ResNet C4和FPN骨干的头部，其中添加了掩膜分支。数字表示空间分辨率和频道。箭头表示可以从上下文推断的conv，deconv或fc图层（conv会保留空间维度，而deconv会增加它）。所有的转换都是3×3，除了输出转换为1×1，解压缩为2×2和步长2，并且我们在隐藏层中使用了ReLU [31]。左：res5表示ResNet的第五阶段，为了简单起见，我们改变了第一阶段的第一阶段，以步幅1（而不是14×14 /步幅2，如[19]中的7×7阶段）操作。右：“×4”表示一连串四次转换。</em></p>
<h2 id="3-1-Implementation-Details"><a href="#3-1-Implementation-Details" class="headerlink" title="3.1.Implementation Details"></a>3.1.Implementation Details</h2><p>我们在现有的快速/更快的R-CNN工作之后设置超参数[12,36,27]。尽管这些决策是在原始文件中进行对象检测的[12,36,27]，但我们发现我们的实例分割系统对它们是强健的。<br>培训：与Fast R-CNN一样，如果RoI的IoU的地面实况框至少为0.5，则认为是正面的，否则为负面。掩模损失Lmask仅在正向RoI上定义。掩码目标是RoI与其关联的地面实况蒙版之间的交集。<br>我们采用图像中心训练[12]。调整图像的大小以使其比例（较短的边缘）为800像素[27]。每个微型批次每个GPU有2个图像，每个图像具有N个采样的RoI，比例为1：3的正负极[12]。C4骨架的N为64（如[12,36]），FPN为512（如[27]）。我们在8个GPU（有效小批量大小为16）上进行160k次迭代训练，学习率为0.02，在120k迭代时减少10。我们使用0.0001的重量衰减和0.9的动量。使用ResNeXt [45]，我们每个GPU训练1个图像，迭代次数相同，初始学习率为0.01。RPN锚点跨越5个尺度和3个纵横比，见[27]。为了方便消融，除非另有说明，否则RPN将单独进行培训并且不会与Mask R-CNN共享特征。对于本文中的每个条目，RPN和Mask R-CNN具有相同的主干，因此它们可共享。<br>推论：在测试时，C4主干的提案编号为300（如[36]），FPN的提案编号为1000（如[27]）。我们对这些提议运行盒子预测分支，然后是非最大抑制[14]。然后将掩码分支应用于得分最高的100个检测框。虽然这与训练中使用的并行计算不同，但它加快了推理速度并提高了准确性（由于使用了更少，更准确的RoI）。掩模分支可以预测每个RoI的K个掩模，但我们只使用第k个掩模，其中k是分类分支预测的类。然后将m×m浮点数掩码输出调整为RoI大小，并在阈值0.5下进行二进制化。<br><img src="https://i.loli.net/2019/04/29/5cc65b990f59b.png" alt="figure5"><br><em>图5.在COCO测试图像上使用ResNet-101-FPN并以5 fps运行并带有35.7掩模AP（表1）的Mask R-CNN的更多结果。</em></p>
<p><img src="https://i.loli.net/2019/04/29/5cc65bd2acd59.png" alt="table1"><br><em>表1. COCO test-dev上的实例分段掩码AP。跨国公司[10]和FCIS [26]分别是2015年和2016年分类挑战的赢家。没有花里胡哨的，Mask R-CNN胜过了更复杂的FCIS +++，其中包括多尺度训练/测试，水平测试和OHEM [38]。所有条目都是单模型结果。</em></p>
<p>请注意，由于我们仅计算前100个检测框中的掩码，Mask R-CNN为其较快的R-CNN对象（例如典型模型上的约20％）增加了一个小的开销。</p>
<h1 id="4-Experiments-Instance-Segmentation"><a href="#4-Experiments-Instance-Segmentation" class="headerlink" title="4.Experiments: Instance Segmentation"></a>4.Experiments: Instance Segmentation</h1><p>我们对Mask R-CNN进行了彻底的比较，并对COCO数据集进行了全面的消融[28]。我们报告标准的COCO指标，包括AP（平均在IoU阈值上），AP50，AP75和APS，APM，APL（AP在不同尺度上）。除非另有说明，否则AP正在使用掩膜IoU进行评估。和以前的工作[5,27]一样，我们训练使用80k列车图像和val图像的35k子集（trainval35k）的联合，并报告其余5k val图像（微型）上的消融。我们还在测试开发中报告结果[28]。</p>
<h2 id="4-1-Main-Results"><a href="#4-1-Main-Results" class="headerlink" title="4.1.Main Results"></a>4.1.Main Results</h2><p>我们将Mask R-CNN与表1中实例分割中的最新方法进行了比较。我们模型的所有实例都优于先前最先进的模型的基线变体。其中包括MNC [10]和FCIS [26]，分别是2015年和2016年分类挑战的获胜者。ResNet-101-FPN骨干网掩码R-CNN的性能优于FCIS +++ [26]，其中包括多尺度训练/测试，水平流测试和在线硬示例挖掘（OHEM）[38]。虽然超出了本工作的范围，但我们预计许多此类改进将适用于我们的工作。图2和图5中显示了掩膜R-CNN输出。面具R-CNN即使在具有挑战性的条件下也能取得良好效果。在图6中，我们比较了我们的Mask R-CNN基线和FCIS +++ [26]。FCIS +++在重叠的实例中展现出系统性的人为因素，这表明它受到实例分割根本困难的挑战。掩码R-CNN没有显示这样的文物。<br><img src="https://i.loli.net/2019/04/29/5cc65cc9ecfc3.png" alt="figure6&amp;table2"></p>
<h2 id="4-2-Ablation-Experiments"><a href="#4-2-Ablation-Experiments" class="headerlink" title="4.2. Ablation Experiments"></a>4.2. Ablation Experiments</h2><p>我们运行一些消融来分析Mask R-CNN。结果显示在表2中并在下面详细讨论。<br>架构：表2a显示了具有各种骨架的Mask R-CNN。它受益于更深的网络（50对101）和先进的设计，包括FPN和ResNeXt。我们注意到并非所有框架都自动从更深或更高级的网络中获益（参见[21]中的基准测试）。<br>多项式与独立式掩码：掩码R-CNN分离掩码和类别预测：由于现有的分支预测类别标签，因此我们为每个类别生成一个掩码，而不会在类别间进行竞争（按像素S形和二进制丢失）。在表2b中，我们将其与使用每像素softmax和多项损失（如FCN [30]中常用的）进行比较。这种替代方案将掩模和类别预测的任务相结合，并导致掩模AP（5.5分）的严重损失。这表明一旦实例被整体分类（通过盒子分支），预测二进制掩码就足够了，而不用考虑类别，这使得模型更易于训练。<br>Class-Speci fi c与Class-Agnostic Masks：我们的默认实例化预测了类特定的掩码，即一个m<em>m每个班级的面具。有趣的是，具有分类掩码的掩码R-CNN（即预测单个m*m输出而不管类别）几乎同样有效：它具有29.7掩码AP，而对于ResNet-50-C4上的类别特定对应字符，掩码AP为30.3。这进一步突出了我们的方法中的分工，这种分工在很大程度上将分类和分割分开。<br>Roialign：我们建议的RoIlign层的评估如表2c所示。在这个实验中，我们使用了跨度为16的ResNet50-C4主干。RoIAlign比RoIPool提高了约3个点，其中很大的收益来自高IoU（AP75）。RoIlign对最大/平均水池不敏感;我们在本文的其余部分使用平均值。另外，我们与在MNC [10]中提出的RoIWarp进行比较，该方法也采用双线性采样。正如§3所讨论的那样，RoIWarp仍然量化了RoI，失去了与输入的一致性。从表2c可以看出，RoIWarp的表现与RoIPool相当，比RoIAlign差很多。这突出表明正确的对齐是关键。<br>我们还用一个ResNet-50-C5骨干来评估RoIlign，这个骨干有32个像素的更大步幅。我们使用与图4（右）相同的头，因为res5头不适用。表2d显示RoIAlign提高了掩模AP的7.3点，掩盖AP75 10.5点（相对提高50％）。此外，我们注意到使用RoIAlign，使用步幅-32 C5功能（30.9 AP）比使用步幅-16 C4功能（30.3 AP，表2c）更准确。RoIAlign在很大程度上解决了使用大步功能进行检测和分割的长期挑战。最后，与FPN一起使用时，RoIAlign显示1.5掩模AP和0.5盒AP的增益，FPN具有更精细的多级步幅。对于需要精细对齐的关键点检测，RoIAlign即使使用FPN也显示出较大的增益（表6）。<br><img src="https://i.loli.net/2019/04/29/5cc65e0ebda46.png" alt="table3"><br>*遮罩分支：分割是一个像素到像素的任务，我们通过使用FCN来利用遮罩的空间布局。在表2e中，我们使用ResNet-50-FPN主干比较了多层感知器（MLP）和FCN。使用FCN可以提供2.1 Mbps的AP掩码。我们注意到，我们选择了这个骨干，这样FCN头部的conv层没有经过预先训练，与MLP进行公平比较。</em></p>
<h2 id="4-3-Bounding-Box-Detection-Results"><a href="#4-3-Bounding-Box-Detection-Results" class="headerlink" title="4.3.Bounding Box Detection Results"></a>4.3.Bounding Box Detection Results</h2><p>我们将Mask R-CNN与表3中的最新COCO包围盒对象检测进行比较。对于这个结果，即使训练完整的Mask R-CNN模型，只有分类和框输出用于推理（掩码输出被忽略）。使用ResNet-101FPN的面罩R-CNN优于以前所有先进模型的基础变体，其中包括COMI 2016检测挑战赛获胜者GRMI [21]的单模型变体。使用ResNeXt-101-FPN，Mask R-CNN进一步改进了结果，与[39]（使用Inception-ResNet-v2-TDM）的最佳单一模型条目相比，框AP的余量为3.0分。<br>作为进一步的比较，我们训练了一个版本的掩模R-CNN，但没有掩模分支，表3中的“Faster R-CNN，RoIlign”表示。由于RoIlign的原因，该模型的性能比[27]中介绍的模型要好。另一方面，比面具R-CNN低0.9个盒子AP。因此掩模R-CNN在盒子检测上的差距仅仅是由于多任务训练的好处。<br>最后，我们注意到Mask R-CNN在其掩模和盒AP之间获得了一个小间隙：例如，在37.1（掩模，表1）和39.8（框3）之间的2.7个点。这表明我们的方法在很大程度上缩小了对象检测与更具挑战性的实例分割任务之间的差距。</p>
<h2 id="4-4-Timing"><a href="#4-4-Timing" class="headerlink" title="4.4.Timing"></a>4.4.Timing</h2><p>推论：我们训练了一个ResNet-101-FPN模型，该模型在R-CNN更快的四步训练之后训练RPN和Mask R-CNN阶段之间的特征[36]。Nvidia Tesla M40 GPU（加上15ms CPU时间，将输出调整为原始分辨率）时，该模型以195ms的速度运行，并实现与非共享模式相同的掩模AP。我们还报告说ResNet-101-C4变体需要400毫秒，因为它有一个较重的盒子头（图4），所以我们不建议在实践中使用C4变体。<br>尽管掩模R-CNN速度很快，但我们注意到我们的设计并未针对速度进行优化，并且可以实现更好的速度/精度折衷[21]，例如，通过改变图像尺寸和提案编号，这超出了本白皮书的范围。<br>训练：面具R-CNN训练也很快。在COCO trainval35k上使用ResNet-50-FPN进行培训的同步8 GPU实现需要32小时（每16图像微型批次0.72s），使用ResNet-101-FPN需要44小时。实际上，快速原型设计可以在不到一天的时间内在火车上进行训练时完成。我们希望这种快速培训能够消除该领域的一个主要障碍，并鼓励更多的人对这个具有挑战性的话题进行研究。</p>
<h1 id="5-Mask-R-CNN-for-Human-Pose-Estimation"><a href="#5-Mask-R-CNN-for-Human-Pose-Estimation" class="headerlink" title="5. Mask R-CNN for Human Pose Estimation"></a>5. Mask R-CNN for Human Pose Estimation</h1><p>我们的框架可以很容易地扩展到人体姿态估计。我们将一个关键点的位置建模为一个单独的热掩模，并采用掩模R-CNN预测K个掩模，每个K个关键点类型（例如左肩，右肘）各一个。这项任务有助于展示Mask R-CNN的灵活性。我们注意到，我们的系统利用了人类姿态的最小领域知识，因为实验主要是为了展示Mask R-CNN框架的一般性。我们期望领域知识（例如，建模结构[6]）将与我们简单的方法相辅相成。<br>实施细节：对关键点进行调整时，我们对细分系统进行细微修改。对于实例的每个K关键点，训练目标是一个热点二进制掩码，其中只有一个像素标记为前景。在训练过程中，对于每个可见的地面真值关键点，我们将 -way softmax输出的交叉熵损失最小化（鼓励[6]是2016年竞赛获胜者，使用多尺度测试，CPM后处理[使用两种模型（Inception-ResNet-1）对G-RMI进行COCO加MPII [1]（25k图像）的训练，并用目标检测器进行滤波，累加约5个点（在个人通信中加以澄清） v2用于边界框检测，ResNet-101用于关键点）。<br><img src="https://i.loli.net/2019/04/29/5cc65f4085801.png" alt="figure7"><br><em>图7.使用Mask R-CNN（ResNet-50-FPN）在COCO测试中的关键点检测结果，以及从相同模型预测的人分割掩码。该模型的关键点AP为63.1，运行速度为5 fps。</em></p>
<p>单点待检测）。我们注意到，与实例分割一样，K关键点仍然是独立处理的。我们采用ResNet-FPN变体，关键点头结构与图4（右）相似。关键点头由8个3×3 512-d的conv层组成，其后是去卷积层和2倍双线性放大，产生56×56的输出分辨率。我们发现对于关键点级别的定位精度需要相对较高的分辨率输出（与掩模相比）。<br>模型在所有包含注释关键点的COCO trainval35k图像上进行训练。为减少过度训练，由于训练集较小，我们使用从[640,800]像素中随机采样的图像比例进行训练;推断是在800像素的单一尺度上进行的。我们训练90k迭代，从0.02的学习率开始，在60k和80k迭代时将其减少10。我们使用边界框NMS，阈值为0.5。其他细节与§3.1中的相同。<br>主要结果和消融：我们评估人员关键点AP（APkp）并尝试使用ResNet-50-FPN主干;附录中将研究更多骨干。表4显示我们的结果（62.7 APkp）比使用多级处理管道的COCO 2016关键点检测获胜者[6]高0.9个点（见表4的标题）。我们的方法相当简单快捷。<br>更重要的是，我们有一个统一的模型，可以在5 fps下运行时同时预测盒子，分段和关键点。添加段分支（针对人员类别）将test-dev上的APkp值提高到63.1（表4）。表5中更多关于微型多任务学习的消除。将掩码分支添加到仅包装盒（即更快的R-CNN）或仅有关键点的版本可以持续改进这些任务。但是，添加关键点分支会略微减少盒/掩码AP，这表明虽然多任务训练可以实现关键点检测，但它不会帮助其他任务。不过，联合学习所有三项任务可以使统一系统同时有效地预测所有输出（图7）。我们还调查RoIAlign对关键点检测的影响（表6）。尽管ResNet-50-FPN骨干网有很大的进展（例如，在嵌套层面上有4个像素），但RoIAlign仍然显示出比RoIPool有显着的提高，APkp增加4.4点。这是因为关键点检测对定位精度更敏感。这再次表明，对齐对像素级本地化至关重要，包括掩码和关键点。<br><img src="https://i.loli.net/2019/04/29/5cc6605e29496.png" alt="table4/5/6"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_8</title>
    <url>/2019/04/26/2019-04-26-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_8/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。<br>这里只讨论内部排序，即默认内存空间足够大，可以存放下所有需要排序的数据。</p>
</blockquote>
<h1 id="简单排序（冒泡、插入）"><a href="#简单排序（冒泡、插入）" class="headerlink" title="简单排序（冒泡、插入）#"></a>简单排序（冒泡、插入）#</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>从上到下比较两个相邻的泡泡，小在上，大在下则不动，否则交换顺序。这为第一趟冒泡，保证将最大的元素放到最下边，然后重复冒泡，直到所有元素均排好序。<br>最好情况：顺序T=O(N)<br>最坏情况：倒序T=O(N<sup>2</sup>)</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>类比于打牌时抓牌的过程。<br>最好情况：顺序T=O(N)<br>最坏情况：倒序T=O(N<sup>2</sup>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void InsertionSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 插入排序 */</span><br><span class="line">     int P, i;</span><br><span class="line">     ElementType Tmp;</span><br><span class="line">      </span><br><span class="line">     for ( P=1; P&lt;N; P++ ) &#123;</span><br><span class="line">         Tmp = A[P]; /* 取出未排序序列中的第一个元素*/</span><br><span class="line">         for ( i=P; i&gt;0 &amp;&amp; A[i-1]&gt;Tmp; i-- )</span><br><span class="line">             A[i] = A[i-1]; /*依次与已排序序列中元素比较并右移*/</span><br><span class="line">         A[i] = Tmp; /* 放进合适的位置 */</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度下界"><a href="#时间复杂度下界" class="headerlink" title="时间复杂度下界"></a>时间复杂度下界</h2><p>对于下标i&lt;j，如果A[i]&gt;A[j]，则称（i,j）是一对逆序对。<br>冒泡排序和插入排序中需要交换的次数即逆序对数，也就是每次交换消除一个逆序对。</p>
<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p><img src="https://i.loli.net/2019/04/26/5cc2bed0950e0.png" alt="希尔排序"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void ShellSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 希尔排序 - 用Sedgewick增量序列 */</span><br><span class="line">     int Si, D, P, i;</span><br><span class="line">     ElementType Tmp;</span><br><span class="line">     /* 这里只列出一小部分增量 */</span><br><span class="line">     int Sedgewick[] = &#123;929, 505, 209, 109, 41, 19, 5, 1, 0&#125;;</span><br><span class="line">      </span><br><span class="line">     for ( Si=0; Sedgewick[Si]&gt;=N; Si++ ) </span><br><span class="line">         ; /* 初始的增量Sedgewick[Si]不能超过待排序列长度 */</span><br><span class="line"> </span><br><span class="line">     for ( D=Sedgewick[Si]; D&gt;0; D=Sedgewick[++Si] )</span><br><span class="line">         for ( P=D; P&lt;N; P++ ) &#123; /* 插入排序*/</span><br><span class="line">             Tmp = A[P];</span><br><span class="line">             for ( i=P; i&gt;=D &amp;&amp; A[i-D]&gt;Tmp; i-=D )</span><br><span class="line">                 A[i] = A[i-D];</span><br><span class="line">             A[i] = Tmp;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>在i从0到N的循环里，从A[i]到A[i-1]中找到最小元，并将其位置赋给MinPostion，将未排序部分的最小元换到有序部分的最后位置，即交换A[i]和A[MinPostion]。</p>
<h2 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h2><p>将找最小元用最小堆来解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Swap( ElementType *a, ElementType *b )</span><br><span class="line">&#123;</span><br><span class="line">     ElementType t = *a; *a = *b; *b = t;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">void PercDown( ElementType A[], int p, int N )</span><br><span class="line">&#123; /* 改编代码4.24的PercDown( MaxHeap H, int p )    */</span><br><span class="line">  /* 将N个元素的数组中以A[p]为根的子堆调整为最大堆 */</span><br><span class="line">    int Parent, Child;</span><br><span class="line">    ElementType X;</span><br><span class="line"> </span><br><span class="line">    X = A[p]; /* 取出根结点存放的值 */</span><br><span class="line">    for( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) &#123;</span><br><span class="line">        Child = Parent * 2 + 1;</span><br><span class="line">        if( (Child!=N-1) &amp;&amp; (A[Child]&lt;A[Child+1]) )</span><br><span class="line">            Child++;  /* Child指向左右子结点的较大者 */</span><br><span class="line">        if( X &gt;= A[Child] ) break; /* 找到了合适位置 */</span><br><span class="line">        else  /* 下滤X */</span><br><span class="line">            A[Parent] = A[Child];</span><br><span class="line">    &#125;</span><br><span class="line">    A[Parent] = X;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void HeapSort( ElementType A[], int N ) </span><br><span class="line">&#123; /* 堆排序 */</span><br><span class="line">     int i;</span><br><span class="line">       </span><br><span class="line">     for ( i=N/2-1; i&gt;=0; i-- )/* 建立最大堆 */</span><br><span class="line">         PercDown( A, i, N );</span><br><span class="line">      </span><br><span class="line">     for ( i=N-1; i&gt;0; i-- ) &#123;</span><br><span class="line">         /* 删除最大堆顶 */</span><br><span class="line">         Swap( &amp;A[0], &amp;A[i] ); /* 见代码7.1 */</span><br><span class="line">         PercDown( A, 0, i );</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>核心：有序子列的归并</p>
<h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>分而治之，T(N)=O(NlogN)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 归并排序 - 递归实现 */</span><br><span class="line"> </span><br><span class="line">/* L = 左边起始位置, R = 右边起始位置, RightEnd = 右边终点位置*/</span><br><span class="line">void Merge( ElementType A[], ElementType TmpA[], int L, int R, int RightEnd )</span><br><span class="line">&#123; /* 将有序的A[L]~A[R-1]和A[R]~A[RightEnd]归并成一个有序序列 */</span><br><span class="line">     int LeftEnd, NumElements, Tmp;</span><br><span class="line">     int i;</span><br><span class="line">      </span><br><span class="line">     LeftEnd = R - 1; /* 左边终点位置 */</span><br><span class="line">     Tmp = L;         /* 有序序列的起始位置 */</span><br><span class="line">     NumElements = RightEnd - L + 1;</span><br><span class="line">      </span><br><span class="line">     while( L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd ) &#123;</span><br><span class="line">         if ( A[L] &lt;= A[R] )</span><br><span class="line">             TmpA[Tmp++] = A[L++]; /* 将左边元素复制到TmpA */</span><br><span class="line">         else</span><br><span class="line">             TmpA[Tmp++] = A[R++]; /* 将右边元素复制到TmpA */</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     while( L &lt;= LeftEnd )</span><br><span class="line">         TmpA[Tmp++] = A[L++]; /* 直接复制左边剩下的 */</span><br><span class="line">     while( R &lt;= RightEnd )</span><br><span class="line">         TmpA[Tmp++] = A[R++]; /* 直接复制右边剩下的 */</span><br><span class="line">          </span><br><span class="line">     for( i = 0; i &lt; NumElements; i++, RightEnd -- )</span><br><span class="line">         A[RightEnd] = TmpA[RightEnd]; /* 将有序的TmpA[]复制回A[] */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Msort( ElementType A[], ElementType TmpA[], int L, int RightEnd )</span><br><span class="line">&#123; /* 核心递归排序函数 */ </span><br><span class="line">     int Center;</span><br><span class="line">      </span><br><span class="line">     if ( L &lt; RightEnd ) &#123;</span><br><span class="line">          Center = (L+RightEnd) / 2;</span><br><span class="line">          Msort( A, TmpA, L, Center );              /* 递归解决左边 */ </span><br><span class="line">          Msort( A, TmpA, Center+1, RightEnd );     /* 递归解决右边 */  </span><br><span class="line">          Merge( A, TmpA, L, Center+1, RightEnd );  /* 合并两段有序序列 */ </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void MergeSort( ElementType A[], int N )</span><br><span class="line">&#123; /* 归并排序 */</span><br><span class="line">     ElementType *TmpA;</span><br><span class="line">     TmpA = (ElementType *)malloc(N*sizeof(ElementType));</span><br><span class="line">      </span><br><span class="line">     if ( TmpA != NULL ) &#123;</span><br><span class="line">          Msort( A, TmpA, 0, N-1 );</span><br><span class="line">          free( TmpA );</span><br><span class="line">     &#125;</span><br><span class="line">     else printf( &quot;空间不足&quot; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 归并排序 - 循环实现 */</span><br><span class="line">/* 这里Merge函数在递归版本中给出 */</span><br><span class="line"> </span><br><span class="line">/* length = 当前有序子列的长度*/</span><br><span class="line">void Merge_pass( ElementType A[], ElementType TmpA[], int N, int length )</span><br><span class="line">&#123; /* 两两归并相邻有序子列 */</span><br><span class="line">     int i, j;</span><br><span class="line">       </span><br><span class="line">     for ( i=0; i &lt;= N-2*length; i += 2*length )</span><br><span class="line">         Merge( A, TmpA, i, i+length, i+2*length-1 );</span><br><span class="line">     if ( i+length &lt; N ) /* 归并最后2个子列*/</span><br><span class="line">         Merge( A, TmpA, i, i+length, N-1);</span><br><span class="line">     else /* 最后只剩1个子列*/</span><br><span class="line">         for ( j = i; j &lt; N; j++ ) TmpA[j] = A[j];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Merge_Sort( ElementType A[], int N )</span><br><span class="line">&#123; </span><br><span class="line">     int length; </span><br><span class="line">     ElementType *TmpA;</span><br><span class="line">      </span><br><span class="line">     length = 1; /* 初始化子序列长度*/</span><br><span class="line">     TmpA = malloc( N * sizeof( ElementType ) );</span><br><span class="line">     if ( TmpA != NULL ) &#123;</span><br><span class="line">          while( length &lt; N ) &#123;</span><br><span class="line">              Merge_pass( A, TmpA, N, length );</span><br><span class="line">              length *= 2;</span><br><span class="line">              Merge_pass( TmpA, A, N, length );</span><br><span class="line">              length *= 2;</span><br><span class="line">          &#125;</span><br><span class="line">          free( TmpA );</span><br><span class="line">     &#125;</span><br><span class="line">     else printf( &quot;空间不足&quot; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>中关村科学城的兴起(1953-1966)</title>
    <url>/2019/04/25/2019-04-25-%E4%B8%AD%E5%85%B3%E6%9D%91%E7%A7%91%E5%AD%A6%E5%9F%8E%E7%9A%84%E5%85%B4%E8%B5%B7/</url>
    <content><![CDATA[<blockquote>
<p>《中关村科学城的兴起(1953-1966)》由胡亚东/郑哲敏/严陆光等口述/杨小林访问整理，湖南教育出版社出版，是20世纪中国科学口述史中其中一部，在此感谢！<br>《中关村科学城的兴起(1953-1966)》选择亲历中国20世纪科学技术发展史的中国著名科学家作为主要访谈对象，本求真之原则，记录其亲历亲闻的史实，并按大致统一的编例整理成书稿。</p>
</blockquote>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本书有意只说1953一1966年这一段，涉及中关村的前史很少，涉及“文革”以后的文字也不多。受访者们，从当年的老乡长到当年的小学生，都曾经是中关衬里的“村民”，是中关村历史变迁约见证人。看访问整理者的编排，书中大体上是循着历史变迁的顺序，讲述一座座科研大楼，一个个研究所，是何时和怎样在这块土地上出现的。其中也讲述了在这里工作和栖居过那些著名的科学家，还捎带着提及与人们日常生活息息相关的基础生活设施的建设，但重点不在系统叙述这里发生过的科研活动和作出的科学贡献。总起来说，是通过亲历者的回忆，让人们认识到科学城中建筑物的布局、研究所的兴革和社区的变迁，以此来展现这座“城“的发展轨迹。</p>
<h1 id="第一篇-村与城"><a href="#第一篇-村与城" class="headerlink" title="第一篇 村与城"></a>第一篇 村与城</h1><h2 id="1-老乡长话中关"><a href="#1-老乡长话中关" class="headerlink" title="1.老乡长话中关"></a>1.老乡长话中关</h2><p>受访人：邓启祥，1954年担任保福寺乡乡长，1955年在中科院化学所工作。<br>主要回顾了保福寺附近区域当年的一些行政、地理情况。</p>
<h2 id="2-蓝图中的科学宫和科学城"><a href="#2-蓝图中的科学宫和科学城" class="headerlink" title="2.蓝图中的科学宫和科学城"></a>2.蓝图中的科学宫和科学城</h2><p>受访人：姜虎文，1954年调入中科院。<br>主要阐述了中科院的选址规划。</p>
<h1 id="第二篇-早期奠基"><a href="#第二篇-早期奠基" class="headerlink" title="第二篇 早期奠基"></a>第二篇 早期奠基</h1><h2 id="3-入住中关村的科学院第一人"><a href="#3-入住中关村的科学院第一人" class="headerlink" title="3.入住中关村的科学院第一人"></a>3.入住中关村的科学院第一人</h2><p>受访人：丘宝剑，中国科学院地理研究所研究员。<br>调入《中华地理志》编辑部，编辑部刚成立时没有地方办公，后来在西郊给社科四所（社会所，近代史所，考古所，语言所）造的房子建好，就搬过去。此地原本叫“中官屯”，编辑部调来一个老文书，负责对外联系，是上海人，听不太懂北京话，问周围老百姓，听成了“中关村”，打印了一批信封、信纸，当时搞“三反”，怕落下“反浪费”罪名，就没改，后来陆续搬来其他所也就都跟着叫了。<br>关于“中官”：有说指太监，有说指中小官员，皇帝在圆明园办公，大员不敢住太远，在附近造房子，剩下的中小官员就在此等着召见，搭个房子之类的。</p>
<h2 id="4-原子能楼"><a href="#4-原子能楼" class="headerlink" title="4.原子能楼"></a>4.原子能楼</h2><p>受访人：叶铭汉，中国工程院院士。<br>清华毕业后在中国科学院近代物理所参加工作，53年改名为物理所，58年改称“原子能研究所”。在中关村建大楼52年开始，53年底54年陆续搬了进来。</p>
<h2 id="5-地球物理研究所"><a href="#5-地球物理研究所" class="headerlink" title="5.地球物理研究所"></a>5.地球物理研究所</h2><p>受访人：朱岗崑，中国科学院地球物理研究所研究员。<br>原为中央研究院气象研究所，气象所在1950年改名为地球物理研究所，所长赵九章，1954年下半年大楼盖好，本部从南京搬来。<br>受访人：吴智诚，曾任中国科学院空间物理研究所党委书记。<br>赵九章先生从事气象、地震、海浪，58年之后主要负责了人造卫星，成立“581”领导小组。<br>空间中心的前身大部分是空间物理所，许多学科骨干都是赵九章带出来的。1997年，42位院士联名为赵九章树立铜像，目前在空间中心大厅内。</p>
<h2 id="6-化学研究所"><a href="#6-化学研究所" class="headerlink" title="6.化学研究所"></a>6.化学研究所</h2><h2 id="7-生物楼：昆虫研究所与动物研究所"><a href="#7-生物楼：昆虫研究所与动物研究所" class="headerlink" title="7.生物楼：昆虫研究所与动物研究所"></a>7.生物楼：昆虫研究所与动物研究所</h2><h2 id="8-力学研究所"><a href="#8-力学研究所" class="headerlink" title="8.力学研究所"></a>8.力学研究所</h2><h1 id="第三篇-“火车头”时代"><a href="#第三篇-“火车头”时代" class="headerlink" title="第三篇 “火车头”时代"></a>第三篇 “火车头”时代</h1><h2 id="9-数学研究所与计算技术研究所"><a href="#9-数学研究所与计算技术研究所" class="headerlink" title="9.数学研究所与计算技术研究所"></a>9.数学研究所与计算技术研究所</h2><p>受访人：许孔时，曾任计算技术研究所副所长，软件研究所所长。<br>数学所筹备处是1950年6月成立的，1952年数学所正式成立，所址在清华园内。1953年数学所成立了一个计算组，1956年在这个组的基础上成立了计算技术研究所，计算所正式成立是1959年，1965年又成立了计算所二部，66年分了出去，成立了微电子学研究所，1985年又有一部分调出，成立了软件所。<br>科学院的头一台就是1958年的103机，苏联援助中国的第一台计算机的资料叫M3，电子管，每秒运算8次，中国人真是聪明，拿过图纸，稍微把电路改进、设计一下，每秒就200次了，这就是103机。</p>
<h2 id="10-化工冶金研究所"><a href="#10-化工冶金研究所" class="headerlink" title="10.化工冶金研究所"></a>10.化工冶金研究所</h2><h2 id="11-电子学研究所"><a href="#11-电子学研究所" class="headerlink" title="11.电子学研究所"></a>11.电子学研究所</h2><h2 id="12-声学研究所"><a href="#12-声学研究所" class="headerlink" title="12.声学研究所"></a>12.声学研究所</h2><h2 id="13-生物物理研究所"><a href="#13-生物物理研究所" class="headerlink" title="13.生物物理研究所"></a>13.生物物理研究所</h2><h2 id="14-微生物研究所"><a href="#14-微生物研究所" class="headerlink" title="14.微生物研究所"></a>14.微生物研究所</h2><h2 id="15-生物物理研究所"><a href="#15-生物物理研究所" class="headerlink" title="15.生物物理研究所"></a>15.生物物理研究所</h2><h2 id="16-自动化研究所"><a href="#16-自动化研究所" class="headerlink" title="16.自动化研究所"></a>16.自动化研究所</h2><h2 id="17-物理研究所"><a href="#17-物理研究所" class="headerlink" title="17.物理研究所"></a>17.物理研究所</h2><h2 id="18-电工研究所"><a href="#18-电工研究所" class="headerlink" title="18.电工研究所"></a>18.电工研究所</h2><h1 id="第四篇-社区与“特楼”"><a href="#第四篇-社区与“特楼”" class="headerlink" title="第四篇 社区与“特楼”"></a>第四篇 社区与“特楼”</h1><h2 id="19-回忆早年的中关村"><a href="#19-回忆早年的中关村" class="headerlink" title="19.回忆早年的中关村"></a>19.回忆早年的中关村</h2><p>受访人：李佩，曾任中科院西郊办公室第一任副主任，中国科学院研究生院英语系主任。<br>当时西郊办公室，都是一些公共事务，管的时期很多。比如请派出所到中关村办公，建粮店，半合作社，建中关村医院等。<br>这一代人，已经走了不少了。活着的也都在八九十岁。我们人与人之间有深厚的感情，对这块地儿也有深厚的感情。住事历历在目，这块地儿住过这么一些人，那么多年发生了那么多的事，若能放到一起，可能够装一个博物馆的。</p>
<h2 id="20-早年中关村的一些服务设施"><a href="#20-早年中关村的一些服务设施" class="headerlink" title="20.早年中关村的一些服务设施"></a>20.早年中关村的一些服务设施</h2><h2 id="21-“特楼”往事"><a href="#21-“特楼”往事" class="headerlink" title="21.“特楼”往事"></a>21.“特楼”往事</h2><p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析与展示_1</title>
    <url>/2019/04/23/2019-04-23-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA_1/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/BIT-1001870002?tid=1206192225#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢北理授课大佬。</p>
</blockquote>
<h1 id="单元1：NumPy库入门"><a href="#单元1：NumPy库入门" class="headerlink" title="单元1：NumPy库入门"></a>单元1：NumPy库入门</h1><p>数据维度的Python表示：</p>
<ul>
<li>一维数据：列表和集合(无序)类型</li>
<li>多维数据：多维列表类型</li>
<li>高维数据：字典类型或数据表示格式（json,xml.yaml）</li>
</ul>
<p>NumPy是一个开源的Python科学计算基础库。</p>
<ul>
<li>一个强大的N维数组对象 ndarray</li>
<li>广播功能函数</li>
<li>整合C/C++/Fortran代码的工具</li>
<li>线性代数、傅里叶变换、随机生成树等功能</li>
</ul>
<p>NumPy是SciPy、Pandas等数据处理或科学计算库的基础。</p>
<p><strong>引用：</strong> import numpy as np(建议使用上述约定的别名)</p>
<p><strong>ndarray:</strong> 是一个多维数组类型，由两部分构成：1）实际的数据；2）描述这些数据的元数据，如数据维度、数据类型等。ndarray数组一般要求所有元素类型相同，数组下标从0开始。</p>
<p>轴（axis）:保存数据的维度<br>秩（rank）:轴的数量</p>
<ol>
<li>创建</li>
</ol>
<ul>
<li><p>从Python中的列表、元祖等类型创建ndarray数组；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用NumPy中函数创建ndarray数组；</span><br></pre></td></tr></table></figure>
<p>np.arange(n)：类似range()函数；<br>np.ones(shape):根据shape生产一个全1数组；<br>np.zeros(shape):根据shape生产一个全0数组；<br>np.full(shape,val):根据shape生产一个数组，每个元素值都是val；<br>np.eye(n):创建一个n*n的单位矩阵，对角线为1，其余全为0；<br>np.linspace():根据起止数据等间距的填充数据，形成数组；<br>np.concatenate():将两个或多个数组合并成一个新的数组；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 从字节流中创建ndarray数组；</span><br><span class="line">- 从文件中读取特定格式，创建ndarray数组；</span><br><span class="line"></span><br><span class="line">2. 维度变换</span><br><span class="line">.reshape(shape):不改变数组元素，返回一个shape形状的数组，原数组不变；</span><br><span class="line">.resize(shape):同上，但修改原数组；</span><br><span class="line">.swapaxes(ax1,ax2):将数组n个维度中两个维度进行调换；</span><br><span class="line">.flatten():对数组进行降维，返回折叠后的一维数组，原数组不变；</span><br><span class="line">3. 类型转换</span><br><span class="line">.astype(new_type):数组的类型转换</span><br><span class="line">4. 数组转为列表</span><br><span class="line">.tolist（）</span><br><span class="line">5. 操作：索引、切片</span><br><span class="line">6. 运算</span><br><span class="line">数组与标量之间的运算作用于数组中每一个元素。</span><br><span class="line">一元函数运算，二元函数运算</span><br><span class="line"></span><br><span class="line"># 单元2：NumPy数据存取与函数 #</span><br><span class="line">## 数据的csv文件存取 ##</span><br><span class="line">csv文件：逗号分隔值文件。只能有效存储一维和二维数据。</span><br><span class="line">**将ndarray保存为csv：**</span><br><span class="line">np.savetxt(frame,array,fmt=&apos;%.18e&apos;,delimiter=None)</span><br><span class="line">frame:文件、字符串或产生器；</span><br><span class="line">array:存入文件的数组；</span><br><span class="line">fmt:写入文件的格式；</span><br><span class="line">delimiter：分割字符串，默认是空格；</span><br><span class="line">**将csv写入ndarray：**</span><br><span class="line">np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)</span><br><span class="line">unpack:默认False，如为True,读入属性将分别写入不同变量；</span><br><span class="line">## 多维数据的存取 ##</span><br><span class="line">**生成文件：**</span><br><span class="line">a.tofile(frame,sep=&apos;&apos;,format=&apos;%s&apos;)</span><br><span class="line">sep:数据分割字符串，如为空，则生成一个二进制文件，而不是文本文件；</span><br><span class="line">format:写入数据的格式；</span><br><span class="line">**还原数据：**</span><br><span class="line">np.fromfile(frame,dtype=float,count=-1,sep=&apos;&apos;)</span><br><span class="line">count:读入元素个数，-1表示读入整个文件;</span><br><span class="line">**NumPy的便捷文件存取：**</span><br><span class="line">np.save(fname,array)或np.savez(fname,array)</span><br><span class="line">frame:文件名，以.npy为扩展名，压缩扩展名为.npz；</span><br><span class="line">np.load(fname)</span><br><span class="line">## NumPy的随机数函数 ##</span><br><span class="line">random子库中的的随机数基本函数：rand/randn/randint/seed;</span><br><span class="line">random子库中的的随机数高级函数：shuffle/permutation/choice;</span><br><span class="line">带有分布的高级函数：uniform/normal/poisson;</span><br><span class="line">## NumPy的统计函数 ##</span><br><span class="line">常用统计函数：sum/mean/average/std/var;</span><br><span class="line">其他统计函数：min/max/argmin/argmax/unravel_index/ptp/median;</span><br><span class="line">## NumPy的梯度函数 ##</span><br><span class="line">np.gradient(f):计算数组f中元素的梯度，当f为多维时，返回每个维度梯度，梯度，即斜率；</span><br><span class="line"></span><br><span class="line"># 单元3：实例：图像的手绘效果 #</span><br><span class="line">## 图像的数组表示 ##</span><br><span class="line">RGB色彩模式，每个通道0-255。</span><br><span class="line">PIL,Python Image Library,一个具有强大图像处理能力的第三方库。</span><br><span class="line">from PIL import Image:Image是PIL库中代表一个图像的类（对象）</span><br><span class="line">图像是一个由像素组成的二维矩阵，每个元素是一个RGB值。</span><br><span class="line">## 图像的变换 ##</span><br><span class="line">读入图像，修改RGB值，修改后保存为新的图像。</span><br><span class="line">## 图像手绘效果实例 ##</span><br><span class="line">特征：黑白灰色；边界线条较重；相同或相近颜色趋于白色；略有光源效果；</span><br></pre></td></tr></table></figure>
<p>  from PIL import Image<br>  import numpy as np</p>
<p>  a = np.asarray(Image.open(‘./beijing.jpg’).convert(‘L’)).astype(‘float’)</p>
<p>  depth = 10.                      # (0-100)<br>  grad = np.gradient(a)             #取图像灰度的梯度值<br>  grad_x, grad_y = grad               #分别取横纵图像梯度值<br>  grad_x = grad_x<em>depth/100.<br>  grad_y = grad_y</em>depth/100.<br>  A = np.sqrt(grad_x<strong>2 + grad_y</strong>2 + 1.)<br>  uni_x = grad_x/A<br>  uni_y = grad_y/A<br>  uni_z = 1./A</p>
<p>  vec_el = np.pi/2.2                   # 光源的俯视角度，弧度值<br>  vec_az = np.pi/4.                    # 光源的方位角度，弧度值<br>  dx = np.cos(vec_el)<em>np.cos(vec_az)   #光源对x 轴的影响<br>  dy = np.cos(vec_el)</em>np.sin(vec_az)   #光源对y 轴的影响<br>  dz = np.sin(vec_el)              #光源对z 轴的影响</p>
<p>  b = 255<em>(dx</em>uni_x + dy<em>uni_y + dz</em>uni_z)     #光源归一化<br>  b = b.clip(0,255)</p>
<p>  im = Image.fromarray(b.astype(‘uint8’))  #重构图像<br>  im.save(‘./beijingHD.jpg’)</p>
<pre><code></code></pre></li>
</ul>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MOOC</tag>
        <tag>数据分析与展示</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_7</title>
    <url>/2019/04/22/2019-04-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_7/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>是一棵树</li>
</ol>
<ul>
<li>无回路</li>
<li>|v|个顶点一定有|v|-1条边</li>
</ul>
<ol start="2">
<li>是生成树</li>
</ol>
<ul>
<li>包含所有顶点</li>
<li>|v|-1条边都在图里</li>
<li>向生成树中任加一条边都一定构成回路</li>
</ul>
<ol start="3">
<li>最小</li>
</ol>
<ul>
<li>边的权重和最小</li>
</ul>
<h2 id="如何构建"><a href="#如何构建" class="headerlink" title="如何构建"></a>如何构建</h2><p>贪心算法：每次找权值最小的边，但有约束：</p>
<ul>
<li>只能用图里有的边</li>
<li>只能正好用掉v-1条边</li>
<li>不能有回路</li>
</ul>
<ol>
<li>Prim算法–让一颗小树长大</li>
</ol>
<p>适合稠密图，时间复杂度O(|V|<sup>2</sup>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 邻接矩阵存储 - Prim最小生成树算法 */</span><br><span class="line">  </span><br><span class="line"> Vertex FindMinDist( MGraph Graph, WeightType dist[] )</span><br><span class="line"> &#123; /* 返回未被收录顶点中dist最小者 */</span><br><span class="line">     Vertex MinV, V;</span><br><span class="line">     WeightType MinDist = INFINITY;</span><br><span class="line">  </span><br><span class="line">     for (V=0; V&lt;Graph-&gt;Nv; V++) &#123;</span><br><span class="line">         if ( dist[V]!=0 &amp;&amp; dist[V]&lt;MinDist) &#123;</span><br><span class="line">             /* 若V未被收录，且dist[V]更小 */</span><br><span class="line">             MinDist = dist[V]; /* 更新最小距离 */</span><br><span class="line">             MinV = V; /* 更新对应顶点 */</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     if (MinDist &lt; INFINITY) /* 若找到最小dist */</span><br><span class="line">         return MinV; /* 返回对应的顶点下标 */</span><br><span class="line">     else return ERROR;  /* 若这样的顶点不存在，返回-1作为标记 */</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> int Prim( MGraph Graph, LGraph MST )</span><br><span class="line"> &#123; /* 将最小生成树保存为邻接表存储的图MST，返回最小权重和 */</span><br><span class="line">     WeightType dist[MaxVertexNum], TotalWeight;</span><br><span class="line">     Vertex parent[MaxVertexNum], V, W;</span><br><span class="line">     int VCount;</span><br><span class="line">     Edge E;</span><br><span class="line">      </span><br><span class="line">     /* 初始化。默认初始点下标是0 */</span><br><span class="line">        for (V=0; V&lt;Graph-&gt;Nv; V++) &#123;</span><br><span class="line">         /* 这里假设若V到W没有直接的边，则Graph-&gt;G[V][W]定义为INFINITY */</span><br><span class="line">            dist[V] = Graph-&gt;G[0][V];</span><br><span class="line">            parent[V] = 0; /* 暂且定义所有顶点的父结点都是初始点0 */ </span><br><span class="line">     &#125;</span><br><span class="line">     TotalWeight = 0; /* 初始化权重和     */</span><br><span class="line">     VCount = 0;      /* 初始化收录的顶点数 */</span><br><span class="line">     /* 创建包含所有顶点但没有边的图。注意用邻接表版本 */</span><br><span class="line">     MST = CreateGraph(Graph-&gt;Nv);</span><br><span class="line">     E = (Edge)malloc( sizeof(struct ENode) ); /* 建立空的边结点 */</span><br><span class="line">             </span><br><span class="line">     /* 将初始点0收录进MST */</span><br><span class="line">     dist[0] = 0;</span><br><span class="line">     VCount ++;</span><br><span class="line">     parent[0] = -1; /* 当前树根是0 */</span><br><span class="line">  </span><br><span class="line">     while (1) &#123;</span><br><span class="line">         V = FindMinDist( Graph, dist );</span><br><span class="line">         /* V = 未被收录顶点中dist最小者 */</span><br><span class="line">         if ( V==ERROR ) /* 若这样的V不存在 */</span><br><span class="line">             break;   /* 算法结束 */</span><br><span class="line">              </span><br><span class="line">         /* 将V及相应的边&lt;parent[V], V&gt;收录进MST */</span><br><span class="line">         E-&gt;V1 = parent[V];</span><br><span class="line">         E-&gt;V2 = V;</span><br><span class="line">         E-&gt;Weight = dist[V];</span><br><span class="line">         InsertEdge( MST, E );</span><br><span class="line">         TotalWeight += dist[V];</span><br><span class="line">         dist[V] = 0;</span><br><span class="line">         VCount++;</span><br><span class="line">          </span><br><span class="line">         for( W=0; W&lt;Graph-&gt;Nv; W++ ) /* 对图中的每个顶点W */</span><br><span class="line">             if ( dist[W]!=0 &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) &#123;</span><br><span class="line">             /* 若W是V的邻接点并且未被收录 */</span><br><span class="line">                 if ( Graph-&gt;G[V][W] &lt; dist[W] ) &#123;</span><br><span class="line">                 /* 若收录V使得dist[W]变小 */</span><br><span class="line">                     dist[W] = Graph-&gt;G[V][W]; /* 更新dist[W] */</span><br><span class="line">                     parent[W] = V; /* 更新树 */</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125; /* while结束*/</span><br><span class="line">     if ( VCount &lt; Graph-&gt;Nv ) /* MST中收的顶点不到|V|个 */</span><br><span class="line">        TotalWeight = ERROR;</span><br><span class="line">     return TotalWeight;   /* 算法执行完毕，返回最小权重和或错误标记 */</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Kruskal算法–将森林合并成树</li>
</ol>
<p>适合稀疏图，时间复杂度最小可为O(|E|Log|E|)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 邻接表存储 - Kruskal最小生成树算法 */</span><br><span class="line"> </span><br><span class="line">/*-------------------- 顶点并查集定义 --------------------*/</span><br><span class="line">typedef Vertex ElementType; /* 默认元素可以用非负整数表示 */</span><br><span class="line">typedef Vertex SetName;     /* 默认用根结点的下标作为集合名称 */</span><br><span class="line">typedef ElementType SetType[MaxVertexNum]; /* 假设集合元素下标从0开始 */</span><br><span class="line"> </span><br><span class="line">void InitializeVSet( SetType S, int N )</span><br><span class="line">&#123; /* 初始化并查集 */</span><br><span class="line">    ElementType X;</span><br><span class="line"> </span><br><span class="line">    for ( X=0; X&lt;N; X++ ) S[X] = -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Union( SetType S, SetName Root1, SetName Root2 )</span><br><span class="line">&#123; /* 这里默认Root1和Root2是不同集合的根结点 */</span><br><span class="line">    /* 保证小集合并入大集合 */</span><br><span class="line">    if ( S[Root2] &lt; S[Root1] ) &#123; /* 如果集合2比较大 */</span><br><span class="line">        S[Root2] += S[Root1];     /* 集合1并入集合2  */</span><br><span class="line">        S[Root1] = Root2;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;                         /* 如果集合1比较大 */</span><br><span class="line">        S[Root1] += S[Root2];     /* 集合2并入集合1  */</span><br><span class="line">        S[Root2] = Root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SetName Find( SetType S, ElementType X )</span><br><span class="line">&#123; /* 默认集合元素全部初始化为-1 */</span><br><span class="line">    if ( S[X] &lt; 0 ) /* 找到集合的根 */</span><br><span class="line">        return X;</span><br><span class="line">    else</span><br><span class="line">        return S[X] = Find( S, S[X] ); /* 路径压缩 */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool CheckCycle( SetType VSet, Vertex V1, Vertex V2 )</span><br><span class="line">&#123; /* 检查连接V1和V2的边是否在现有的最小生成树子集中构成回路 */</span><br><span class="line">    Vertex Root1, Root2;</span><br><span class="line"> </span><br><span class="line">    Root1 = Find( VSet, V1 ); /* 得到V1所属的连通集名称 */</span><br><span class="line">    Root2 = Find( VSet, V2 ); /* 得到V2所属的连通集名称 */</span><br><span class="line"> </span><br><span class="line">    if( Root1==Root2 ) /* 若V1和V2已经连通，则该边不能要 */</span><br><span class="line">        return false;</span><br><span class="line">    else &#123; /* 否则该边可以被收集，同时将V1和V2并入同一连通集 */</span><br><span class="line">        Union( VSet, Root1, Root2 );</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*-------------------- 并查集定义结束 --------------------*/</span><br><span class="line"> </span><br><span class="line">/*-------------------- 边的最小堆定义 --------------------*/</span><br><span class="line">void PercDown( Edge ESet, int p, int N )</span><br><span class="line">&#123; /* 改编代码4.24的PercDown( MaxHeap H, int p )    */</span><br><span class="line">  /* 将N个元素的边数组中以ESet[p]为根的子堆调整为关于Weight的最小堆 */</span><br><span class="line">    int Parent, Child;</span><br><span class="line">    struct ENode X;</span><br><span class="line"> </span><br><span class="line">    X = ESet[p]; /* 取出根结点存放的值 */</span><br><span class="line">    for( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) &#123;</span><br><span class="line">        Child = Parent * 2 + 1;</span><br><span class="line">        if( (Child!=N-1) &amp;&amp; (ESet[Child].Weight&gt;ESet[Child+1].Weight) )</span><br><span class="line">            Child++;  /* Child指向左右子结点的较小者 */</span><br><span class="line">        if( X.Weight &lt;= ESet[Child].Weight ) break; /* 找到了合适位置 */</span><br><span class="line">        else  /* 下滤X */</span><br><span class="line">            ESet[Parent] = ESet[Child];</span><br><span class="line">    &#125;</span><br><span class="line">    ESet[Parent] = X;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void InitializeESet( LGraph Graph, Edge ESet )</span><br><span class="line">&#123; /* 将图的边存入数组ESet，并且初始化为最小堆 */</span><br><span class="line">    Vertex V;</span><br><span class="line">    PtrToAdjVNode W;</span><br><span class="line">    int ECount;</span><br><span class="line"> </span><br><span class="line">    /* 将图的边存入数组ESet */</span><br><span class="line">    ECount = 0;</span><br><span class="line">    for ( V=0; V&lt;Graph-&gt;Nv; V++ )</span><br><span class="line">        for ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next )</span><br><span class="line">            if ( V &lt; W-&gt;AdjV ) &#123; /* 避免重复录入无向图的边，只收V1&lt;V2的边 */</span><br><span class="line">                ESet[ECount].V1 = V;</span><br><span class="line">                ESet[ECount].V2 = W-&gt;AdjV;</span><br><span class="line">                ESet[ECount++].Weight = W-&gt;Weight;</span><br><span class="line">            &#125;</span><br><span class="line">    /* 初始化为最小堆 */</span><br><span class="line">    for ( ECount=Graph-&gt;Ne/2; ECount&gt;=0; ECount-- )</span><br><span class="line">        PercDown( ESet, ECount, Graph-&gt;Ne );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int GetEdge( Edge ESet, int CurrentSize )</span><br><span class="line">&#123; /* 给定当前堆的大小CurrentSize，将当前最小边位置弹出并调整堆 */</span><br><span class="line"> </span><br><span class="line">    /* 将最小边与当前堆的最后一个位置的边交换 */</span><br><span class="line">    Swap( &amp;ESet[0], &amp;ESet[CurrentSize-1]);</span><br><span class="line">    /* 将剩下的边继续调整成最小堆 */</span><br><span class="line">    PercDown( ESet, 0, CurrentSize-1 );</span><br><span class="line"> </span><br><span class="line">    return CurrentSize-1; /* 返回最小边所在位置 */</span><br><span class="line">&#125;</span><br><span class="line">/*-------------------- 最小堆定义结束 --------------------*/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int Kruskal( LGraph Graph, LGraph MST )</span><br><span class="line">&#123; /* 将最小生成树保存为邻接表存储的图MST，返回最小权重和 */</span><br><span class="line">    WeightType TotalWeight;</span><br><span class="line">    int ECount, NextEdge;</span><br><span class="line">    SetType VSet; /* 顶点数组 */</span><br><span class="line">    Edge ESet;    /* 边数组 */</span><br><span class="line"> </span><br><span class="line">    InitializeVSet( VSet, Graph-&gt;Nv ); /* 初始化顶点并查集 */</span><br><span class="line">    ESet = (Edge)malloc( sizeof(struct ENode)*Graph-&gt;Ne );</span><br><span class="line">    InitializeESet( Graph, ESet ); /* 初始化边的最小堆 */</span><br><span class="line">    /* 创建包含所有顶点但没有边的图。注意用邻接表版本 */</span><br><span class="line">    MST = CreateGraph(Graph-&gt;Nv);</span><br><span class="line">    TotalWeight = 0; /* 初始化权重和     */</span><br><span class="line">    ECount = 0;      /* 初始化收录的边数 */</span><br><span class="line"> </span><br><span class="line">    NextEdge = Graph-&gt;Ne; /* 原始边集的规模 */</span><br><span class="line">    while ( ECount &lt; Graph-&gt;Nv-1 ) &#123;  /* 当收集的边不足以构成树时 */</span><br><span class="line">        NextEdge = GetEdge( ESet, NextEdge ); /* 从边集中得到最小边的位置 */</span><br><span class="line">        if (NextEdge &lt; 0) /* 边集已空 */</span><br><span class="line">            break;</span><br><span class="line">        /* 如果该边的加入不构成回路，即两端结点不属于同一连通集 */</span><br><span class="line">        if ( CheckCycle( VSet, ESet[NextEdge].V1, ESet[NextEdge].V2 )==true ) &#123;</span><br><span class="line">            /* 将该边插入MST */</span><br><span class="line">            InsertEdge( MST, ESet+NextEdge );</span><br><span class="line">            TotalWeight += ESet[NextEdge].Weight; /* 累计权重 */</span><br><span class="line">            ECount++; /* 生成树中边数加1 */</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( ECount &lt; Graph-&gt;Nv-1 )</span><br><span class="line">        TotalWeight = -1; /* 设置错误标记，表示生成树不存在 */</span><br><span class="line"> </span><br><span class="line">    return TotalWeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Self-supervised Multi-level Face Model Learning for Monocular Reconstruction at over 250 Hz</title>
    <url>/2019/04/16/2019-04-16-Self-supervised%20Multi-level%20Face%20Model%20Learning%20for%20Monocular%20Reconstruction%20at%20over%20250%20Hz/</url>
    <content><![CDATA[<blockquote>
<p>原文链接：<a href="http://gvv.mpi-inf.mpg.de/projects/FML/" target="_blank" rel="noopener">http://gvv.mpi-inf.mpg.de/projects/FML/</a><br>本文由马克斯-普朗克研究所和斯坦福大学等机构合作完成，是 CVPR 2018 的 oral 文章。<br>为了提升单张图片重建 3D 脸部模型的效果，该论文采用了多层次的脸部结构重建方法，作者把传统的基于参数化 3D 可变形模型（3DMM）作为基础模型，在此之上引入纠正模型来增加模型的表达力。实验表明纠正模型使得 3D 脸部重建效果更接近原图，而且能重建出更多细节。<br>基础模型与纠正模型均为线性模型，其中基础模型的基向量通过对训练样本做 PCA 得到（即 3DMM 模型），而纠正模型的基向量由神经网络直接学习得到。脸部的形状与纹理通过基础模型加上纠正模型来拟合。算法使用编码器来学习基础模型和纠正模型的组合参数。随后整合两个模型的结果，通过解码器得到渲染的 3D 脸部模型。然后，算法把 3D 模型成像，对比成像结果与输入图片的差异，目标是使差异变小，因此该方法是自监督的方式进行训练。此外，算法还限制了成像结果与输入图的脸部特征点要对齐。注意该方法中只有编码器是可学习的，而解码器和渲染器都是手工设计的可导层，不是可学习的。为了让模型更加鲁棒和训练过程更加稳定，作者在损失函数上加入额外调节项，用于提升纠正模型的平滑性、纹理的稀疏性和整体一致性。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/20190415173416703.png" alt="figure0"><br>我们的新型单目重建方法高质量地估计了面部几何形状，皮肤反射率(包括面部毛发)和超过250赫兹的入射光。利用前馈反渲染网络，学习了一种可训练的多层人脸表示方法。端到端训练基于自我监督的损失，不需要密集的地面实况。</p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p><em>从一张单一的图像中重建密集的人脸几何和外观三维模型是非常具有挑战性和不适定的。为了约束该问题，许多方法依赖于强先验，如从有限的三维扫描数据中学习的参数化人脸模型。然而，先验的模型限制了人脸几何、皮肤反射率和光照的真实多样性的泛化。为了解决这一问题，我们提出了一种联合学习方法1)人脸形状、表情、反射率和光照的回归器的方法。2)基于并行学习的参数化人脸模型。我们的多层人脸模型结合了3D 可变形模型（3DMM）的正则化优势和学习校正空间的空间外泛化。我们的多层人脸模型结合了三维形态模型的正则化优势和学习校正空间的空间外泛化。我们通过在多层细节级别上定义的专家设计的可微渲染器来融合卷积编码器，以及自监督训练损失，在没有密集注释的自然环境图像上进行端到端的训练。我们的方法在重建质量上优于目前的技术水平，可以更好地推广到真实世界的人脸，运行频率超过250赫兹。</em></p>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h1><p>在过去的几十年里，单目人脸重建在计算机视觉和图形学领域引起了极大的关注。我们的目标是从一张照片中估计出一个高质量的个性化人脸模型。这种模型理想地包括几个可解释的语义维度，例如，三维人脸形状和表情以及表面反射率特性。这一领域的研究是由不断增加的人脸图像可用性所推动的，例如，家用摄像头捕捉的人脸图像，以及跨多个领域的广泛重要应用，如面部运动捕捉、游戏和电影的内容创建、虚拟和增强现实以及通信。</p>
<p>从一张照片中重建人脸是一个非常具有挑战性和不适定的逆问题，因为图像的形成过程将多个复杂的物理维度(几何、反射率和光照)卷积成每个像素的单一颜色测量。为了解决这种不适定性，研究人员已经做了额外的先验假设，比如将人脸限制在一个低维子空间中，例如，3D可变形模型(3DMM)从有限尺寸的扫描数据库中学习。许多最先进的基于优化的和基于学习的人脸重建方法严重依赖这些先验。虽然这些算法产生了令人印象深刻的结果，但它们不能很好地推广到除受限低维子空间之外的底层模型。因此，重建的三维人脸可能缺乏重要的面部细节，包含不正确的面部特征，并不能很好地与图像匹配。例如，纯合成数据训练的算法或使用3DMM进行正则化的算法的重构质量的对胡须显示效果会急剧下降。一些方法试图通过启发式来防止这些失败，例如，一个单独的分割方法来消除分离皮肤和头发区域带来的的歧义。最近的方法通过添加精细尺度的细节，或者基于阴影的形状，或者基于预先学习的回归量来细化拟合的先验。然而，这些方法依赖于缓慢的优化，或者需要高质量的带注释的训练语义库。此外，他们没有为中型形状、反射率和动画建立一个的改进子空间，这对泛化来说至关重要。最近，Sela等人的预测了一个单像素深度图，通过在训练中学习去变形和填补有一个有限几何子空间的洞。虽然结果令人印象深刻，但非刚性匹配是离线运行的。此外，他们的方法只捕捉人脸的几何形状，如果人脸与训练语义库有很大差异，就会失败，例如考虑皮肤反射率和面部毛发。理想情况下，人们希望构建更好的先验，用有意义的和可解释的参数解释各种各样的现实世界面孔。用传统方法学习这样的模型需要大量标记密集的真实世界数据，这实际上是不可行的。</p>
<p>我们提出了一种全新的端到端可训练的方法，该方法联合学习1)一个有效的回归因子来估计高质量的身份几何、面部表情和有色皮肤反射率，以及2)一个改进的多级人脸模型的参数化，该模型能更好地概括和解释现实世界中的人脸多样性。我们的方法可以在稀疏标记的自然环境图像上进行端到端的训练，并在超过250赫兹的单目RGB输入中重建人脸和光照。我们的方法利用3DMM进行正则化，并利用学习的校正空间进行空间外泛化。为了使自然环境图像的端到端训练成为可能，我们提出了一种混合卷积自编码器，它将CNN编码器与专家设计的可微渲染层和自监督损失结合起来，两者都定义在多个细节级别。此外，我们加入了一个新的轮廓约束，生成更好的人脸匹配。与Tewari等人的不同，我们的自动编码器学习了一个改进的多级模型，超越了预先定义的低维参数脸部先验。实验结果表明，该方法具有较强的鲁棒性、较好的泛化性，并能较好地估计几何形状、反射率和光照质量。</p>
<h1 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2.Related Work"></a>2.Related Work</h1><p>我们主要讨论基于优化和学习的方法，这些方法使用参数模型。而高质量的多视图三维重建方法已经存在，我们感兴趣的是更难的单眼重建问题。</p>
<p><strong>参数化人脸模型:</strong>应用最广泛的人脸模型是3D可变形模型(3DMM)，这是一种通过高质量扫描学习人脸几何和纹理的仿射参数化人脸模型。【5】中提出了一个相似的人脸动画模型。最近，Booth等人从大约10,000个面部扫描中创建了一个大规模的面部模型(LSFM)，这代表了一个更丰富的形状分布。Booth等人的【9】中，人脸模型被一个“in-the-wild”纹理模型增强。将这种模型拟合到图像上是一个非凸优化问题，类似于基于Active Shape (ASMs) 和<br>Appearance (AAMs) 模型的结构。虽然3DMMs是一种高效的先验，但它们将人脸重构限制在一个有限的低维子空间内，如胡须或特征鼻子无法重构。相反，我们通过共同学习一个修正模型来扩展有限的子空间，该模型可以更好地概括真实数据。</p>
<p><strong>基于优化的方法：</strong>单目人脸重建、基于图像采集的重建以及高质量三维人脸平台的估计，很多方法都是基于能量优化的。从不同的数据源，如照片集、网络照片、视频，得到了令人印象深刻的人脸重建结果。此外，还提出了不依赖于训练过的形状或外观模型的方法，如使用模态分析得到的模型或利用视觉流与消息处理相结合。虽然实时人脸跟踪在一般情况下是可行的，但是基于优化的人脸重建在计算上是昂贵的。此外，基于优化的方法对初始化很敏感，需要2D特征点检测。一些方法允许3D人脸轮廓在预定义的路径上(例如等值线)滑动或迭代固定顶点集，以此来寻找三维轮廓对应。我们的方法既不需要昂贵的优化策略，也不需要参数初始化，但通过在训练过程中考虑轮廓，它可以精确地将3D人脸网格与图像匹配。</p>
<p><strong>基于学习的方法：</strong>除了基于优化的重构方法外，还有许多基于学习的方法。其中，基于卷积神经网络或受限玻尔兹曼机的方法用来学习在图像中高精度地监测基准点。此外，我们还可以发现(弱)监督的深度网络，它集成生成模型来解决像面部表现捕捉这样的任务。<br>Ranja等人提出了一种多用途CNN，用于从人脸图像中恢复语义参数(如年龄、性别、姿势)。理查森等人提出了一种基于学习和优化的混合方法，可以从一张图像重建精细的面部几何形状。在【48】中提出了训练端到端回归器，以恢复粗糙和精细尺度的面部几何形状。在【61】中，对人脸形状和纹理进行回归，进行人脸识别。后一种人脸重建方法对真实世界人脸多样性的推广受到底层低维人脸模型的限制。</p>
<p><strong>基校正和子空间学习：</strong>通过添加中等尺度的细节，可以提高人脸重建的质量。Li等人使用增量PCA对表情基实现实时个性化。Bouaziz等人【11】提出了基于流形谐波的中尺度形状校正方法。最近，Garrido等人提出了一种基于固定校正基础的单目视频学习中尺度形状的方法。Sela等人的【53】直接提出回归深度和单像素对应，从而超越了3DMM受限子空间。然而，它们不能恢复彩色表面反射率，并且需要离线非刚性配准步骤才能获得已知一致拓扑结构的重构。据我们所知，目前还没有一种算法能从自然环境图像中同时学习几何和反射率校正。</p>
<p><strong>生成模型的深度集成：</strong>这是Jaderberg等人的开创性工作【31】，引入了空间转换网络，实现了一个神经网络中的位置不变性。透视转换网络【67】能够从单个二维图像中获得三维对象表示。gvvn库【27】实现了用于这种转换的低级计算机视觉层。最近，一种基于模型的人脸自动编码器(MoFA)【59】被提出用于单目人脸重建，它结合了专家设计的渲染层和可训练的CNN编码器。它们的结果是显著的，但仅限于人脸模型的固定低维子空间。外子空间的变异，如面部细节和个性化的鼻子，没有被重现，严重降低了重建的质量。我们的方法解决了所有这些挑战，在几何和反射率方面实现了更强的鲁棒性和更高的质量。</p>
<h1 id="3-Method-Overview"><a href="#3-Method-Overview" class="headerlink" title="3.Method Overview"></a>3.Method Overview</h1><p>我们全新的人脸重建方法从一个单一的图像高质量地估计几何形状，皮肤反射率和入射光。我们在同时学习多级参数化人脸模型的基础上，联合训练各维度的回归器，如图1所示。<br><img src="https://i.loli.net/2019/04/17/5cb7363754822.jpg" alt="figure1"><br><em>图1所示。我们的方法在超过250赫兹时回归一个低维的潜在人脸表示。前馈CNN是与一个超越当前3DMMs低维子空间的多层次人脸模型共同学习的。可训练图层显示为蓝色，专家设计的图层显示为灰色。训练是基于可微的图像形成，结合自监督损失(橙色)。</em></p>
<p><strong>参数回归：</strong>在测试时(图1，左)，使用一个前馈CNN计算一个低维的，但有表现力和鉴别力，潜在的空间人脸表示花费在4ms以下。如AlexNet【37】或VGG-Face【44】。我们的潜在空间是基于一个新的多层次的人脸模型(第4节)它结合了一个粗糙尺度的3DMM与可训练的单顶点几何和皮肤反射校正。这使我们的方法能够超越有限的低维几何和皮肤反射子空间，通常使用基于3DMM的方法进行人脸拟合。</p>
<p><strong>自监督训练：</strong>我们训练(图1，右)前馈网络和校正空间，基于一种新的CNN架构，不依赖于密集标注的基础几何事实、皮肤反射率和光照训练语义库。为此，我们将多层模型与专家设计的图像形成层(第5节)相结合，得到一个可微计算机图形模块。为了实现多级人脸模型的联合估计，该模块提出了粗糙3DMM模型和中等规模的模型，其中均包括校正。在训练方面，我们使用自监督的损失函数(第6节)，使我们的架构能够在大量自然环境人脸图像上进行有效的端到端训练，而不需要密集地注释基础事实。我们定性和定量地评估我们的方法，并将其与最先进的优化和基于学习的面部重建技术进行比较(第7节)。</p>
<h1 id="4-Trainable-Multi-level-Face-Model"><a href="#4-Trainable-Multi-level-Face-Model" class="headerlink" title="4.Trainable Multi-level Face Model"></a>4.Trainable Multi-level Face Model</h1><p>我们的方法的核心是一个新的多层次的面部模型，确定面部几何形状和皮肤反射率的参数。我们的模型是基于一个流形模板网格与N ~ 30k顶点和每个顶点的皮肤反射率。我们将所有顶点v<sub>i</sub>∈V的x-、y-和z-坐标叠加在一个几何向量v<sup>f</sup>∈R<sup>3n</sup>中，几何与反射率参数化表示如下:<br><img src="https://i.loli.net/2019/04/17/5cb740d84cec8.png" alt="公式1,2"></p>
<p>在基本级别上是参数化面（粗糙）部几何vb和(粗糙)皮肤反射rb通过低维的一组参数(α;β)。<br>此外,我们使用校正加入中等规模的几何Fg和反射率Fr变形,参数化的(δg;Θg)将基准面模型与校正模型结合起来，就得到最终的水平模型，参数化vf和rf。下面，我们将描述多级人脸模型的不同级别。</p>
<h2 id="4-1-Static-Parametric-Base-Model"><a href="#4-1-Static-Parametric-Base-Model" class="headerlink" title="4.1. Static Parametric Base Model"></a>4.1. Static Parametric Base Model</h2><p>底层采用的参数化人脸模型通过两个独立的仿射模型表达了似是而非的人脸几何和反射率空间:<br><img src="https://i.loli.net/2019/04/23/5cbe6c2b369e2.png" alt="公式3,4"><br>反射率变化的子空间由向量b张成，该向量由PCA从200个高质量人脸扫描数据集中创建。<br>几何子空间分为Ms和Me，表示形状和表达式的变化。<br>这些向量是用PCA从[2]和[17]的混合形状子集中生成的。注意，这些混合形状已经使用变形转移[56]转移到我们的拓扑结构中。基捕获了使用的混合形状的99%的方差。我们使用ms = mr = 80个形状和反射向量，me = 64个表达向量。相关的标准差σg和σr。</p>
<h2 id="4-2-Trainable-Shape-and-Reflectance-Corrections"><a href="#4-2-Trainable-Shape-and-Reflectance-Corrections" class="headerlink" title="4.2. Trainable Shape and Reflectance Corrections"></a>4.2. Trainable Shape and Reflectance Corrections</h2><p>许多基于优化和学习的重建技术，如[7,5,60，59]。由于其低维性，4.1节所述的基本模型对面部形状和反射率的高精度建模表达能力有限。一个特殊的问题是皮肤反照率的变化，因为所使用的模型有种族偏见，缺乏面部毛发，例如胡须。<br>这项工作的目的是通过学习一个可训练的纠正模型来改进这一点，该模型可以表示这些空间外的变化。与其他使用固定的预定义校正基础[25]的方法不同，我们学习了校正器的生成模型和最佳校正参数。此外，我们不需要对几何形状、皮肤反射率和入射光照的地面真相注释。<br>与基准水平的关键区别在于，修正水平不使用固定的预训练基础，而是直接从训练数据中学习生成模型和系数。</p>
<h1 id="5-Differentiable-Image-Formation-Model"><a href="#5-Differentiable-Image-Formation-Model" class="headerlink" title="5. Differentiable Image Formation Model"></a>5. Differentiable Image Formation Model</h1><p>为了训练我们新颖的端到端多层人脸重建方法，我们需要一个可微的图像形成模型。下面，我们将描述它的组件。<br><strong>全参相机:</strong>这一部分是求了相机的内参数，相机模型包含内部物理并执行透视划分。<br><strong>光照模型:</strong>利用球谐基函数，建立了远距离照明的假设，并对入射光进行了近似<img src="https://i.loli.net/2019/04/23/5cbe6ddb18d95.png" alt=""><br>我们假设入射光只依赖于表面法向量n:<br><img src="https://i.loli.net/2019/04/23/5cbe6dffa30a5.png" alt="公式5"><br>其中，圈点表示哈达玛乘积，r表示表面反射，B代表球谐基函数带，rb是控制照明的系数。<br>由于入射光足够平滑，平均误差低于1%，可以实现只有B = 3波段独立于照明。这导致了每个颜色通道的变量<img src="https://i.loli.net/2019/04/23/5cbe6e98b5929.png" alt=""><br><strong>图像合成：</strong>我们的可微图像生成层以模型空间的顶点形状和反射率作为输入。这可以是基本级别模型rb和vb，或者最终级别模型vf和rf，其中包括所学习的校正器。<img src="https://i.loli.net/2019/04/23/5cbe6f230022f.png" alt="">表示基面第i个顶点的位置和反射率(l = b)和最后一层(‘l= f)。<br>我们的渲染层接受这些信息，并形成一个基于点的场景渲染，如下所示。<br>首先，它将这些点映射到相机空间，即<img src="https://i.loli.net/2019/04/23/5cbe6f741286a.png" alt="">)然后计算所有顶点的投影像素位置为<img src="https://i.loli.net/2019/04/23/5cbe6f8977b2b.png" alt="">这些像素位置的阴影颜色c ‘ i是根据前面描述的光照模型计算的:<img src="https://i.loli.net/2019/04/23/5cbe6ffe4a354.png" alt="">其中，n是相关联的摄像机空间法线到v. 我们的图像形成模型是可微的，这使得端到端的训练使用反向传播。回归器学习预测的自由变量有: 模型参数<img src="https://i.loli.net/2019/04/23/5cbe701dae588.png" alt="">相机参数R, t和照明参数γ。此外,在训练期间,我们学习纠正形状和反射率基地,Θr。这导致了以下未知向量:<br><img src="https://i.loli.net/2019/04/23/5cbe7048cd56a.png" alt=""></p>
<p><img src="https://i.loli.net/2019/04/19/5cb92b2795684.png" alt="figure2"><br><em>图2所示。我们将固定和移动特征点区分开来。这将使得更好的轮廓对齐。注意外部轮廓如何依赖于刚性头部姿态(左)。在全局反射率恒常性约束中使用了皮肤掩模(右)。</em></p>
<h1 id="6-Self-supervised-Learning"><a href="#6-Self-supervised-Learning" class="headerlink" title="6.Self-supervised Learning"></a>6.Self-supervised Learning</h1><p>我们的人脸回归网络使用一个全新的自监督损失来进行训练，这样使得它能够符合我们的基础模型并且端到端地学习每个像素的校正。我们的损失包括数据拟合以及正则项：<br><img src="https://i.loli.net/2019/04/18/5cb81c54f2c3b.png" alt="公式6"><br>这里E<sub>date</sub>惩罚了模型在输入图像上的偏差，E<sub>reg</sub>对人脸在粗尺度和中等尺度上的先验假设进行编码，ω<sub>reg</sub>是控制正则项的平衡因子。数据拟合项基于稀疏和稠密的一致性约束。<br><img src="https://i.loli.net/2019/04/18/5cb81ec0f13c8.png" alt="公式7"><br>正则化项表示在基础模型和修正模型上的先验假设:<br><img src="https://i.loli.net/2019/04/18/5cb81f54052d0.png" alt="公式8"><br>在下文中，将详细介绍各个部分。</p>
<h2 id="6-1-数据项"><a href="#6-1-数据项" class="headerlink" title="6.1 数据项"></a>6.1 数据项</h2><p><strong>多维稠密光度损失：</strong>我们采用了一个稠密多维光度损失函数，用来衡量粗尺度上的偏差并且更好地拟合输入。V是所有可见顶点的集合，我们的光度项可以定义为：<br><img src="https://i.loli.net/2019/04/18/5cb8214fdef38.png" alt="公式9"><br>这里u<sup>l</sup><sub>i</sub>（x）是屏幕的空间位置，c<sup>l</sup><sub>i</sub>（x）是第i个顶点的阴影颜色，L是当前训练的图像。为了增强鲁棒性，我们使用了l<sub>2,1</sub>-norm，其中l<sub>2</sub>-norm来衡量颜色之间的差距，但是对每个像素的l<sub>2</sub>-norm进行求和促进了稀疏性，因为它对应于l<sub>1</sub>-norm。使用后脸剔除可以计算可见性，这是一个近似值，不过效果很好，因为脸部可以近似看作一个凸面体。</p>
<p><strong>稀疏特征点：</strong>面部包含许多突出的特征点，我们通过一个弱监督自动地检测66个面部标记。面部标记点集可以分为两类：固定的和移动的特征点。固定的特征点，例如眼睛和鼻子，和模板模型上的固定顶点相关联；移动的特征点，例如面部轮廓，基于刚性位姿而改变在模板中的位置，见图2（右），模型可以显式地表达为：<br><img src="https://i.loli.net/2019/04/18/5cb82cffc7cd2.png" alt="公式10"><br>这里，k<sub>f</sub>是目标顶点的索引：对于固定的点，我们将对应网格顶点的索引进行硬编码（把一个本来应该写到配置信息中的信息直接在程序代码中写死），移动特征点的索引通过例如交替方案来计算。在每一步的随机梯度下降中，我们发现网格顶点是最靠近3D线的，通过相机中心和检测到的2D特征点的背投影来定义。我们计算欧式距离的平方并且将k<sub>r</sub>设为最近顶点的索引。</p>
<h2 id="6-2-正则化项"><a href="#6-2-正则化项" class="headerlink" title="6.2 正则化项"></a>6.2 正则化项</h2><p><strong>统计正则化：</strong>我们对基础水平的3DMM模型参数进行统计正则化，以确保重构的合理性。基于模型参数服从零均值高斯分布的假设，我们采用Tikhonov正则化:<br><img src="https://i.loli.net/2019/04/18/5cb8655472c5e.png" alt="公式11"><br>这是在不适定的单目重建场景中防止人脸几何形状和反射率退化的常见约束条件。</p>
<p><strong>平滑性校正：</strong>我们还通过对所有顶点集合V中的顶点位移添加拉普拉斯正则项来增加局部光滑性:<br><img src="https://i.loli.net/2019/04/18/5cb8670434ec8.png" alt="公式12"><br>其中（F<sub>g</sub>(x)）<sub>i</sub>=(F<sub>g</sub>(δ<sub>g</sub>|θ<sub>g</sub>))<sub>i</sub>表示第i个顶点给定参数x的的修正量，并且N<sub>i</sub>是第i个顶点的一环领域。</p>
<p><strong>局部反射稀疏性：</strong>根据最近的内在分解方法，我们加强实施稀疏性，以进一步规范全重构的反射性：<br><img src="https://i.loli.net/2019/04/18/5cb86e96cfd60.png" alt="公式13"><br>其中，<img src="https://i.loli.net/2019/04/18/5cb86ebd7b546.png" alt="">是衡量输入中颜色之间色度相似性的恒权值，这里X<sup>old</sup>是在前一轮迭代中的估值参数。我们假设具有相同色度的像素更有可能具有相同的反射率。l<sub>2,p</sub>-norm对组合反射率估计值添加稀疏性。在所有实验中我们假定α=50，p=0.9。</p>
<p><strong>全局反射恒常性：</strong>我们在一组只覆盖皮肤区域的固定顶点上设定皮肤反射率恒定，见图2（右）<br><img src="https://i.loli.net/2019/04/19/5cb924aa97869.png" alt="公式14"><br>这里，M是每个像素的皮肤掩模，G<sub>i</sub>存储着掩模区域顶点索引的六个随机采样。这样做是为了保证整个皮肤区域有相同的反射率。为了更高效，我们假设同一块皮肤区域中任意一对顶点之间的反射率都近似相同。需要注意的是，这些区域可能有面部的毛发，这是不包含在掩模中的。当组合在一起的时候，局部和全局的反射从反射通道中高效的移除了阴影。</p>
<p><strong>稳定性：</strong>我们还通过强制执行小的顶点位移来确保修正后的几何形状接近于基础重构:<br><img src="https://i.loli.net/2019/04/19/5cb9297b56673.png" alt="公式15"></p>
<h1 id="7-Results"><a href="#7-Results" class="headerlink" title="7.Results"></a>7.Results</h1><p>我们演示了前馈编码器的联合端到端自监督训练和基于野生图像的新型多层次人脸表示，而不需要密集注释。我们的方法是在250赫兹以上的高质量的位置、形状、表达式、反射和照明进行回归，见图3。<br><img src="https://i.loli.net/2019/04/23/5cbe712d1ccdf.png" alt="figure3"><br>对于前馈编码器，我们使用了Alexnet[37]的修改版本，该版本输出我们的人脸模型的参数。请注意，可以使用其他前馈架构。<br>我们使用caffe[32]实现了我们的方法。培训基于批量大小为5的adadelta。我们对我们的网络进行预培训，使其达到20万次迭代的基本水平，学习率为0:01。之后，我们对整个网络进行了190k次迭代的微调，基本级别的学习率为0:001，几何结构的学习率为0:005，反射校正的学习率为0:01。我们的网络的所有组件都在CUDA[43]中实现，以便进行有效的培训，这需要16个小时。我们在所有的实验中都使用常数w。在下面，我们将校正参数的大小c固定为500，用于几何和反射率。我们测试了不同的校正空间（线性和非线性），见图5。线性校正基础给出了最好的结果，因此我们将其用于所有后续实验。详情请参阅补充文件。<br><img src="https://i.loli.net/2019/04/23/5cbe716a8a397.png" alt="figure5"><br>我们的方法是在一个没有密集注释的原始的的面部图像的语料库上训练的。我们结合了四种不同的数据集：Celeba[41]、LFW[28]、Face-Warehouse[16]和300-VW[18、54、62]。稀疏地标注释自动获得[52]，我们使用HAAR级联人脸检测[13]裁剪到240240像素的紧面边界框。检测不良的图像会根据地标置信度自动删除。总的来说，我们使用144K图像，随机分为一组训练（142K图像）和验证（2K图像）。<br>我们将我们的最终输出（“最终”）与从预训练网络获得的基础低维3dmm重建（“基础”）进行比较，以说明我们的多级模型允许我们恢复更高质量的几何体和反射比（图4）。下面，我们将展示更多的结果，评估我们的方法，并与最新技术进行比较。<br><img src="https://i.loli.net/2019/04/23/5cbe719973ff2.png" alt="figure4"></p>
<h2 id="7-1-与最新技术的比较"><a href="#7-1-与最新技术的比较" class="headerlink" title="7.1 与最新技术的比较"></a>7.1 与最新技术的比较</h2><p><strong>基于最优化的技术：</strong>我们将其与基于优化的高质量重建方法进行了比较。[25]，见图6。我们的方法获得了相似的几何质量，但由于我们学习了纠正空间，更好地捕捉了人的特征。由于我们的方法共同学习了一个校正反射空间，它可以离开底层3dmm的受限子空间，从而产生更真实的外观。注意，与Garrido等人不同，我们的方法在测试时不需要标志，运行速度更快（4ms对120s每幅图像）。我们还比较了布斯等人的方法。[9]见图7。我们的方法共同学习一个更好的形状和反射模型，而他们的方法只建立一个’原始图片模型，包含阴影。与我们的方法不同，布斯等人基于优化，需要初始化或标志。<br><strong>基于学习的技术：</strong>我们比较了Tewari等人基于学习的高质量重建方法。[59]（图8），Richardson等人[47，48]（图9）和Sela等人〔53〕（图9）。在使用的合成训练语料库或使用的3dmm模型范围内，这些方法获得了令人印象深刻的结果，但受到了子空间形状和反射变化的影响，例如有胡子的人。我们的方法不仅对面部毛发和化妆都很有效，而且可以根据共同学习的模型自动学习重建这些变化。重建需要4 ms，而[53]需要缓慢的离线非刚性配准，以从预测深度图获得无孔重建。此外，我们还共同获得了彩色反射和照明的重建。由于我们的模型学习，我们的方法能够离开三维空间的低维空间，这导致了一个更现实的面部外观和几何重建。</p>
<h2 id="7-2-数量级上的结果"><a href="#7-2-数量级上的结果" class="headerlink" title="7.2 数量级上的结果"></a>7.2 数量级上的结果</h2><p>我们定量地评估了我们的方法。对于几何图形，我们使用FaceWarehouse[16]数据集并重建180个网格（9个标识，每个表达式20个）。我们比较了不同的方法，在对齐后（刚性变换加上各向同性缩放），以提供的地面真相使用豪斯多夫距离。我们的方法优于Tewari等人的基于学习的技术。[59]和Kim Etal.〔36〕见Tab。1。我们接近Garrido等人的高质量优化方法。[25]虽然速度快了几个数量级（4ms vs.120sec），但在测试时不需要进行特征检测，见图10（上图）。[16]主要包含“干净”的脸，没有化妆或胡须，因为这会导致问题，即使是高质量的离线3D重建方法。我们的兴趣是坚定地处理这种更困难的情况，在这种情况下，我们证明我们的方法明显优于以前的方法，见图。8, 6和9。我们还评估了我们的方法，在一个视频序列（300帧）具有挑战性的表达和特征面，这是在3dmm的跨度之外。Valgaerts等人获得了基本事实。〔63〕。我们的校正方法（平均值：1.77mm，标准差：0.29mm）显著优于基础结果（平均值：2.16mm，标准差：0.29mm），Garrido等人[25]在粗（平均：1.96mm，标准差：0.35mm）和中等（平均：1.97mm，标准差：0.41mm）水平，以及Tewari等人[59]（平均值：2.94mm，标准差：0.28mm），见图10（底部）。我们在验证集上评估我们方法的光度拟合误差，见图11。我们的最终结果（平均值：0.072，标准差：0.020）与基础水平（平均值：0.092，标准差：0.025）相比，误差（RGB空间中的距离，通道在[0；1]中）显著降低。</p>
<h1 id="8-局限性"><a href="#8-局限性" class="headerlink" title="8.局限性"></a>8.局限性</h1><p>我们在250Hz以上的频率下进行了高质量的单目重建，即使是在有面部毛发的情况下，或是在有挑战性的脸上。不过，我们的方法有一些局限性，可以在将来的工作中加以解决：外部遮挡（例如，通过眼镜）被烘烤到我们的校正中，见图12。解决这一问题需要对训练语料库进行语义分割。不能保证封闭面区域的一致重建。对于鲁棒模型学习，我们强制纠正空间的低维性。因此，我们无法恢复细尺度的表面细节。我们认为这是一个正交的研究方向，已经产生了令人印象深刻的结果[47，48，53]。</p>
<h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h1><p>我们提出了第一种共同学习人脸模型和参数回归器的方法，用于人脸形状、表情、外观和照明。它结合了3dmm正则化的优点和已知校正空间的超空间泛化。这克服了目前依赖强先验的方法的缺点，提高了泛化性和鲁棒性，并导致250Hz以上的高质量重建。在这项工作中，我们将重点放在人脸重建上，我们的方法不局限于人脸，因为它可以推广到更多的对象类。因此，我们认为这是从原始图像构建三维模型的第一步。</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_6</title>
    <url>/2019/04/10/2019-04-10-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_6/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="什么是图"><a href="#什么是图" class="headerlink" title="什么是图"></a>什么是图</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>图：表示“多对多”的关系<br>包含：</p>
<ul>
<li>一组顶点：通常用V（Vertex）表示顶点集合；</li>
<li>一组边：通常用E（Eege）表示边的集合；<br>边是顶点对：<br>无向边（v,w）∈E，其中v,w∈V<br>有向边&lt;v,w&gt;∈E，其中v,w∈V</li>
</ul>
<h2 id="程序中图的表示"><a href="#程序中图的表示" class="headerlink" title="程序中图的表示"></a>程序中图的表示</h2><ul>
<li><strong>邻接矩阵</strong>:G[N][N]-N个顶点从0到N-1编号<br>G[N][N]=1（&lt; v<sub>i</sub>,v<sub>j</sub>&gt;是G中的边）/0（&lt; v<sub>i</sub>,v<sub>j</sub>&gt;不是G中的边）。<br>对于有N个顶点的无向图，用一个长度为N(N+1)/2的1维数组存储可以省一半空间。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 图的邻接矩阵表示法 */</span><br><span class="line"> </span><br><span class="line">#define MaxVertexNum 100    /* 最大顶点数设为100 */</span><br><span class="line">#define INFINITY 65535        /* ∞设为双字节无符号整数的最大值65535*/</span><br><span class="line">typedef int Vertex;         /* 用顶点下标表示顶点,为整型 */</span><br><span class="line">typedef int WeightType;        /* 边的权值设为整型 */</span><br><span class="line">typedef char DataType;        /* 顶点存储的数据类型设为字符型 */</span><br><span class="line"> </span><br><span class="line">/* 边的定义 */</span><br><span class="line">typedef struct ENode *PtrToENode;</span><br><span class="line">struct ENode&#123;</span><br><span class="line">    Vertex V1, V2;      /* 有向边&lt;V1, V2&gt; */</span><br><span class="line">    WeightType Weight;  /* 权重 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToENode Edge;</span><br><span class="line">        </span><br><span class="line">/* 图结点的定义 */</span><br><span class="line">typedef struct GNode *PtrToGNode;</span><br><span class="line">struct GNode&#123;</span><br><span class="line">    int Nv;  /* 顶点数 */</span><br><span class="line">    int Ne;  /* 边数   */</span><br><span class="line">    WeightType G[MaxVertexNum][MaxVertexNum]; /* 邻接矩阵 */</span><br><span class="line">    DataType Data[MaxVertexNum];      /* 存顶点的数据 */</span><br><span class="line">    /* 注意：很多情况下，顶点无数据，此时Data[]可以不用出现 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">MGraph CreateGraph( int VertexNum )</span><br><span class="line">&#123; /* 初始化一个有VertexNum个顶点但没有边的图 */</span><br><span class="line">    Vertex V, W;</span><br><span class="line">    MGraph Graph;</span><br><span class="line">     </span><br><span class="line">    Graph = (MGraph)malloc(sizeof(struct GNode)); /* 建立图 */</span><br><span class="line">    Graph-&gt;Nv = VertexNum;</span><br><span class="line">    Graph-&gt;Ne = 0;</span><br><span class="line">    /* 初始化邻接矩阵 */</span><br><span class="line">    /* 注意：这里默认顶点编号从0开始，到(Graph-&gt;Nv - 1) */</span><br><span class="line">    for (V=0; V&lt;Graph-&gt;Nv; V++)</span><br><span class="line">        for (W=0; W&lt;Graph-&gt;Nv; W++)  </span><br><span class="line">            Graph-&gt;G[V][W] = INFINITY;</span><br><span class="line">             </span><br><span class="line">    return Graph; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">void InsertEdge( MGraph Graph, Edge E )</span><br><span class="line">&#123;</span><br><span class="line">     /* 插入边 &lt;V1, V2&gt; */</span><br><span class="line">     Graph-&gt;G[E-&gt;V1][E-&gt;V2] = E-&gt;Weight;    </span><br><span class="line">     /* 若是无向图，还要插入边&lt;V2, V1&gt; */</span><br><span class="line">     Graph-&gt;G[E-&gt;V2][E-&gt;V1] = E-&gt;Weight;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">MGraph BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    MGraph Graph;</span><br><span class="line">    Edge E;</span><br><span class="line">    Vertex V;</span><br><span class="line">    int Nv, i;</span><br><span class="line">     </span><br><span class="line">    scanf(&quot;%d&quot;, &amp;Nv);   /* 读入顶点个数 */</span><br><span class="line">    Graph = CreateGraph(Nv); /* 初始化有Nv个顶点但没有边的图 */ </span><br><span class="line">     </span><br><span class="line">    scanf(&quot;%d&quot;, &amp;(Graph-&gt;Ne));   /* 读入边数 */</span><br><span class="line">    if ( Graph-&gt;Ne != 0 ) &#123; /* 如果有边 */ </span><br><span class="line">        E = (Edge)malloc(sizeof(struct ENode)); /* 建立边结点 */ </span><br><span class="line">        /* 读入边，格式为&quot;起点 终点 权重&quot;，插入邻接矩阵 */</span><br><span class="line">        for (i=0; i&lt;Graph-&gt;Ne; i++) &#123;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;, &amp;E-&gt;V1, &amp;E-&gt;V2, &amp;E-&gt;Weight); </span><br><span class="line">            /* 注意：如果权重不是整型，Weight的读入格式要改 */</span><br><span class="line">            InsertEdge( Graph, E );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    /* 如果顶点有数据的话，读入数据 */</span><br><span class="line">    for (V=0; V&lt;Graph-&gt;Nv; V++) </span><br><span class="line">        scanf(&quot; %c&quot;, &amp;(Graph-&gt;Data[V]));</span><br><span class="line"> </span><br><span class="line">    return Graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>邻接表</strong>：G[N]为指针数组，对应矩阵每行一个链表，只存非0元素。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 图的邻接表表示法 */</span><br><span class="line"> </span><br><span class="line">#define MaxVertexNum 100    /* 最大顶点数设为100 */</span><br><span class="line">typedef int Vertex;         /* 用顶点下标表示顶点,为整型 */</span><br><span class="line">typedef int WeightType;        /* 边的权值设为整型 */</span><br><span class="line">typedef char DataType;        /* 顶点存储的数据类型设为字符型 */</span><br><span class="line"> </span><br><span class="line">/* 边的定义 */</span><br><span class="line">typedef struct ENode *PtrToENode;</span><br><span class="line">struct ENode&#123;</span><br><span class="line">    Vertex V1, V2;      /* 有向边&lt;V1, V2&gt; */</span><br><span class="line">    WeightType Weight;  /* 权重 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToENode Edge;</span><br><span class="line"> </span><br><span class="line">/* 邻接点的定义 */</span><br><span class="line">typedef struct AdjVNode *PtrToAdjVNode; </span><br><span class="line">struct AdjVNode&#123;</span><br><span class="line">    Vertex AdjV;        /* 邻接点下标 */</span><br><span class="line">    WeightType Weight;  /* 边权重 */</span><br><span class="line">    PtrToAdjVNode Next;    /* 指向下一个邻接点的指针 */</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/* 顶点表头结点的定义 */</span><br><span class="line">typedef struct Vnode&#123;</span><br><span class="line">    PtrToAdjVNode FirstEdge;/* 边表头指针 */</span><br><span class="line">    DataType Data;            /* 存顶点的数据 */</span><br><span class="line">    /* 注意：很多情况下，顶点无数据，此时Data可以不用出现 */</span><br><span class="line">&#125; AdjList[MaxVertexNum];    /* AdjList是邻接表类型 */</span><br><span class="line"> </span><br><span class="line">/* 图结点的定义 */</span><br><span class="line">typedef struct GNode *PtrToGNode;</span><br><span class="line">struct GNode&#123;  </span><br><span class="line">    int Nv;     /* 顶点数 */</span><br><span class="line">    int Ne;     /* 边数   */</span><br><span class="line">    AdjList G;  /* 邻接表 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToGNode LGraph; /* 以邻接表方式存储的图类型 */</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">LGraph CreateGraph( int VertexNum )</span><br><span class="line">&#123; /* 初始化一个有VertexNum个顶点但没有边的图 */</span><br><span class="line">    Vertex V;</span><br><span class="line">    LGraph Graph;</span><br><span class="line">     </span><br><span class="line">    Graph = (LGraph)malloc( sizeof(struct GNode) ); /* 建立图 */</span><br><span class="line">    Graph-&gt;Nv = VertexNum;</span><br><span class="line">    Graph-&gt;Ne = 0;</span><br><span class="line">    /* 初始化邻接表头指针 */</span><br><span class="line">    /* 注意：这里默认顶点编号从0开始，到(Graph-&gt;Nv - 1) */</span><br><span class="line">       for (V=0; V&lt;Graph-&gt;Nv; V++)</span><br><span class="line">        Graph-&gt;G[V].FirstEdge = NULL;</span><br><span class="line">             </span><br><span class="line">    return Graph; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">void InsertEdge( LGraph Graph, Edge E )</span><br><span class="line">&#123;</span><br><span class="line">    PtrToAdjVNode NewNode;</span><br><span class="line">     </span><br><span class="line">    /* 插入边 &lt;V1, V2&gt; */</span><br><span class="line">    /* 为V2建立新的邻接点 */</span><br><span class="line">    NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));</span><br><span class="line">    NewNode-&gt;AdjV = E-&gt;V2;</span><br><span class="line">    NewNode-&gt;Weight = E-&gt;Weight;</span><br><span class="line">    /* 将V2插入V1的表头 */</span><br><span class="line">    NewNode-&gt;Next = Graph-&gt;G[E-&gt;V1].FirstEdge;</span><br><span class="line">    Graph-&gt;G[E-&gt;V1].FirstEdge = NewNode;</span><br><span class="line">         </span><br><span class="line">    /* 若是无向图，还要插入边 &lt;V2, V1&gt; */</span><br><span class="line">    /* 为V1建立新的邻接点 */</span><br><span class="line">    NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));</span><br><span class="line">    NewNode-&gt;AdjV = E-&gt;V1;</span><br><span class="line">    NewNode-&gt;Weight = E-&gt;Weight;</span><br><span class="line">    /* 将V1插入V2的表头 */</span><br><span class="line">    NewNode-&gt;Next = Graph-&gt;G[E-&gt;V2].FirstEdge;</span><br><span class="line">    Graph-&gt;G[E-&gt;V2].FirstEdge = NewNode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">LGraph BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    LGraph Graph;</span><br><span class="line">    Edge E;</span><br><span class="line">    Vertex V;</span><br><span class="line">    int Nv, i;</span><br><span class="line">     </span><br><span class="line">    scanf(&quot;%d&quot;, &amp;Nv);   /* 读入顶点个数 */</span><br><span class="line">    Graph = CreateGraph(Nv); /* 初始化有Nv个顶点但没有边的图 */ </span><br><span class="line">     </span><br><span class="line">    scanf(&quot;%d&quot;, &amp;(Graph-&gt;Ne));   /* 读入边数 */</span><br><span class="line">    if ( Graph-&gt;Ne != 0 ) &#123; /* 如果有边 */ </span><br><span class="line">        E = (Edge)malloc( sizeof(struct ENode) ); /* 建立边结点 */ </span><br><span class="line">        /* 读入边，格式为&quot;起点 终点 权重&quot;，插入邻接矩阵 */</span><br><span class="line">        for (i=0; i&lt;Graph-&gt;Ne; i++) &#123;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;, &amp;E-&gt;V1, &amp;E-&gt;V2, &amp;E-&gt;Weight); </span><br><span class="line">            /* 注意：如果权重不是整型，Weight的读入格式要改 */</span><br><span class="line">            InsertEdge( Graph, E );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    /* 如果顶点有数据的话，读入数据 */</span><br><span class="line">    for (V=0; V&lt;Graph-&gt;Nv; V++) </span><br><span class="line">        scanf(&quot; %c&quot;, &amp;(Graph-&gt;G[V].Data));</span><br><span class="line"> </span><br><span class="line">    return Graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>站在一个路口，看有几条路还没走，选择其中一条往下走，走到下一个路口，继续判断，如没有，则原路返回上一个路口，看上一个路口是否有没走的路，如没有则继续原路返回。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 邻接表存储的图 - DFS */</span><br><span class="line"> </span><br><span class="line">void Visit( Vertex V )</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;正在访问顶点%d\n&quot;, V);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Visited[]为全局变量，已经初始化为false */</span><br><span class="line">void DFS( LGraph Graph, Vertex V, void (*Visit)(Vertex) )</span><br><span class="line">&#123;   /* 以V为出发点对邻接表存储的图Graph进行DFS搜索 */</span><br><span class="line">    PtrToAdjVNode W;</span><br><span class="line">     </span><br><span class="line">    Visit( V ); /* 访问第V个顶点 */</span><br><span class="line">    Visited[V] = true; /* 标记V已访问 */</span><br><span class="line"> </span><br><span class="line">    for( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next ) /* 对V的每个邻接点W-&gt;AdjV */</span><br><span class="line">        if ( !Visited[W-&gt;AdjV] )    /* 若W-&gt;AdjV未被访问 */</span><br><span class="line">            DFS( Graph, W-&gt;AdjV, Visit );    /* 则递归访问之 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>指定一个起点，把它压到队列里，在把它弹出队列时，将与它相连的点一一压到队列里，以此类推。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 邻接矩阵存储的图 - BFS */</span><br><span class="line"> </span><br><span class="line">/* IsEdge(Graph, V, W)检查&lt;V, W&gt;是否图Graph中的一条边，即W是否V的邻接点。  */</span><br><span class="line">/* 此函数根据图的不同类型要做不同的实现，关键取决于对不存在的边的表示方法。*/</span><br><span class="line">/* 例如对有权图, 如果不存在的边被初始化为INFINITY, 则函数实现如下:         */</span><br><span class="line">bool IsEdge( MGraph Graph, Vertex V, Vertex W )</span><br><span class="line">&#123;</span><br><span class="line">    return Graph-&gt;G[V][W]&lt;INFINITY ? true : false;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Visited[]为全局变量，已经初始化为false */</span><br><span class="line">void BFS ( MGraph Graph, Vertex S, void (*Visit)(Vertex) )</span><br><span class="line">&#123;   /* 以S为出发点对邻接矩阵存储的图Graph进行BFS搜索 */</span><br><span class="line">    Queue Q;     </span><br><span class="line">    Vertex V, W;</span><br><span class="line"> </span><br><span class="line">    Q = CreateQueue( MaxSize ); /* 创建空队列, MaxSize为外部定义的常数 */</span><br><span class="line">    /* 访问顶点S：此处可根据具体访问需要改写 */</span><br><span class="line">    Visit( S );</span><br><span class="line">    Visited[S] = true; /* 标记S已访问 */</span><br><span class="line">    AddQ(Q, S); /* S入队列 */</span><br><span class="line">     </span><br><span class="line">    while ( !IsEmpty(Q) ) &#123;</span><br><span class="line">        V = DeleteQ(Q);  /* 弹出V */</span><br><span class="line">        for( W=0; W&lt;Graph-&gt;Nv; W++ ) /* 对图中的每个顶点W */</span><br><span class="line">            /* 若W是V的邻接点并且未访问过 */</span><br><span class="line">            if ( !Visited[W] &amp;&amp; IsEdge(Graph, V, W) ) &#123;</span><br><span class="line">                /* 访问顶点W */</span><br><span class="line">                Visit( W );</span><br><span class="line">                Visited[W] = true; /* 标记W已访问 */</span><br><span class="line">                AddQ(Q, W); /* W入队列 */</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; /* while结束*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Github使用</title>
    <url>/2019/04/09/2019-04-09-Linux%E4%B8%8BGithub%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>python主要用linux，所以在linux下使用Github特意来学习一下。</p>
<h1 id="Linux下Git和GitHub环境的搭建"><a href="#Linux下Git和GitHub环境的搭建" class="headerlink" title="Linux下Git和GitHub环境的搭建"></a>Linux下Git和GitHub环境的搭建</h1><ol>
<li>安装Git， 使用命令sudo apt-get install git；</li>
<li>创建GitHub帐号；</li>
<li>生成ssh key，使用命令 ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a>“，your_email是你的email；</li>
<li>终端输入命令 cd ~/.ssh，之后ls命令，之后vi id_rsa.pub，复制内容；</li>
<li>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key，粘贴key；</li>
<li>测试ssh key是否成功，使用命令ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，如果出现You’ve successfully ；authenticated, but GitHub does not provide shell access ，这就表示已成功连上github；</li>
<li>配置Git的配置文件：配置用户名：git config –global user.name “your name” ，配置email：git config –global user.email “your email”</li>
</ol>
<h1 id="从GitHub克隆项目到本地"><a href="#从GitHub克隆项目到本地" class="headerlink" title="从GitHub克隆项目到本地"></a>从GitHub克隆项目到本地</h1><ol>
<li>到GitHub的某个仓库，然后复制右边的那个（HTTPS clone url）；</li>
<li>回到要存放的目录下，使用命令 git clone <a href="https://github.com/your_name/yourRepo.git，" target="_blank" rel="noopener">https://github.com/your_name/yourRepo.git，</a> your_name是你的GitHub的用户名，yourRepo是你要clone的仓库；</li>
<li>如果本地的版本不是最新的，可以使用命令 git fetch origin，origin是本地仓库；</li>
<li>把更新的内容合并到本地分支，可以使用命令 git merge origin/master；</li>
<li>如果你不想手动去合并，那么你可以使用： git pull &lt;本地仓库&gt; master 这个命令来拉去最新版本并自动合并；</li>
</ol>
<h1 id="利用Git从本地上传到GitHub"><a href="#利用Git从本地上传到GitHub" class="headerlink" title="利用Git从本地上传到GitHub"></a>利用Git从本地上传到GitHub</h1><ol>
<li>进入要所要上传文件的目录, 输入命令 git init；</li>
<li>创建一个本地仓库origin，使用命令 git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:your_name/yourRepo.git，your_name是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库；</li>
<li>比如你要添加一个文件xxx到本地仓库，使用命令 git add xxx，可以使用 git add . 自动判断添加哪些文件；</li>
<li>然后把这个添加提交到本地的仓库，使用命令 git commit -m “说明这次的提交”；</li>
<li>最后把本地仓库origin提交到远程的GitHub仓库，使用命令 git push origin master；</li>
</ol>
<h3 id="说明：作者在本地库文件夹下的某一文件夹下进行操作，上传某一文件，一直无法成功，随后回到库文件夹下进行操作，命令分别为："><a href="#说明：作者在本地库文件夹下的某一文件夹下进行操作，上传某一文件，一直无法成功，随后回到库文件夹下进行操作，命令分别为：" class="headerlink" title="说明：作者在本地库文件夹下的某一文件夹下进行操作，上传某一文件，一直无法成功，随后回到库文件夹下进行操作，命令分别为："></a><em>说明：作者在本地库文件夹下的某一文件夹下进行操作，上传某一文件，一直无法成功，随后回到库文件夹下进行操作，命令分别为：</em></h3><blockquote>
<p>git add . //注意.代表全部上传，也可以换为要上传更新的文件</p>
</blockquote>
<blockquote>
<p>git commit -m ‘update’</p>
</blockquote>
<blockquote>
<p>git push</p>
</blockquote>
<p><em>即相当于对要添加的文件所在的整个文件夹进行了更新。</em></p>
<h1 id="GitHub的分支管理"><a href="#GitHub的分支管理" class="headerlink" title="GitHub的分支管理"></a>GitHub的分支管理</h1><p>创建分支</p>
<ol>
<li>创建一个本地分支： git branch &lt;新分支名字&gt;；</li>
<li>将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt;；</li>
<li>切换到新建立的分支： git checkout &lt;新分支名&gt;；</li>
<li>为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt;；</li>
<li>查看当前仓库有几个分支: git branch；</li>
</ol>
<p>删除分支</p>
<ol>
<li>从本地删除一个分支： git branch -d &lt;分支名称&gt;；</li>
<li>同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt;；</li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>静生生物调查所史稿</title>
    <url>/2019/04/03/2019-04-03-%E9%9D%99%E7%94%9F%E7%94%9F%E7%89%A9%E8%B0%83%E6%9F%A5%E6%89%80%E5%8F%B2%E7%A8%BF/</url>
    <content><![CDATA[<blockquote>
<p>《静生生物调查所史稿》由胡宗刚著，山东教育出版社出版，在此感谢！</p>
</blockquote>
<h1 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h1><h2 id="中国生物学之回顾"><a href="#中国生物学之回顾" class="headerlink" title="中国生物学之回顾"></a>中国生物学之回顾</h2><p>中国生物学的发展，大致可分三个时期：第一期，本草研究时期。此时期发展缓慢；第二期，为引进西方生物学时期。自近代中国与西洋海通以来，西方传教士纷纷来华传教，同时也传播了西方的现代自然科学知识；第三期，即现代生物学时期。中国生物学研究机构渐次设立，在研究方法上尽量采取<br>西方的研究方法，而在研究对象上则以“中国的生物”为材料。</p>
<h2 id="中国科学社生物研究所"><a href="#中国科学社生物研究所" class="headerlink" title="中国科学社生物研究所"></a>中国科学社生物研究所</h2><p>1914年6月，留美中国学生组织成立中国科学社。1922年，生物研究所在南京兴办，推定秉志主持。所内设动物部、植物部，分别由秉志、胡先骕各司其事。其时，科学社社长任鸿隽也在东南大学供职，任副校长。他对于生物研究所的贡献，主要在于寻求社会的支持和谅解。主要争取到了利用美国第二次退还庚子赔款成立的“中华教育文化基金董事会”。研究所研究渐有成绩，也渐为学界所注意，以至成为中国现代生物学的摇篮。许多著名的生物学家曾在此研究所接受研究工作的训练，并开始算研究生涯。</p>
<h1 id="第二章-静生生物调查所创办经纬"><a href="#第二章-静生生物调查所创办经纬" class="headerlink" title="第二章 静生生物调查所创办经纬"></a>第二章 静生生物调查所创办经纬</h1><h2 id="酝酿筹设静生生物所调查"><a href="#酝酿筹设静生生物所调查" class="headerlink" title="酝酿筹设静生生物所调查"></a>酝酿筹设静生生物所调查</h2><p>在南京的生物所里的中国生物学家们．认为他们的研究范围，无力伸延至北方，而在有文化中心之称的北京，也应有一生物学研究机构之设立。秉志、胡先骕等人联名呈书中基会干事长范源廉。<br>范源廉(1874—1927)，字静生。素爱自然．业余时暇则治博物之学，十几年不辍，尝往郊外，采集植物，探研名实。当其主持中基会事务，以补助自然科学为职志，因于生物学早有亲缘，故与中国科学社生物研究所多有关顾，与生物学家也有交往。<br>筹设调查所事正在酝酿之中，范静生却突然于1927年12月23日在天津逝世，享年53岁。静生先生为人公正，尽心教育，数十年如一日，由于范先生人格的伟大，在世人心目之中具有较高威望，他的早逝，不仅没有延误调查所的实现，反而加快了调查所的诞生，人们意在以此来纪念静生先生。1928年春，生物调查所于北京成立．并以“静生”名之，以做永久纪念。</p>
<h2 id="合组静生生物调查所经过"><a href="#合组静生生物调查所经过" class="headerlink" title="合组静生生物调查所经过"></a>合组静生生物调查所经过</h2><p>范静生生前主持的中华教育文化基金董事会与尚志学会达成共识，共同组建生物调查所。<br>1928年6月19日，中基会第4次董事会，正式通过接受尚志学会嘱托，组织静生生物调查所，议决秉志为所长。7月，秉志、胡先骕即赴北京，负责组建。<br>静生所在起首时，因受经费的限制，所罗致的人才，名望皆不甚高，却都年轻有为，大都得到巨大发展，成为各个专门学科的人才。</p>
<h1 id="第三章-静生生物调查所事业的开创（1928-1937）"><a href="#第三章-静生生物调查所事业的开创（1928-1937）" class="headerlink" title="第三章 静生生物调查所事业的开创（1928-1937）"></a>第三章 静生生物调查所事业的开创（1928-1937）</h1><p>最初几年，所长秉志每年春秋两次北上，为静生所和生物所奔波于南北<br>两地。其不在北平时，静生所所务由胡先骕代理。秉志主持南北两所，实难兼顾，递交辞呈，胡先骕接任。秉志虽不再担任所长，但他在任几年所表现出的科学精神及对事业的敬谨诚笃的态度，乃具极大魅力，继任者胡先骕皆为之传承。</p>
<h2 id="静生生物调查所的初期事业"><a href="#静生生物调查所的初期事业" class="headerlink" title="静生生物调查所的初期事业"></a>静生生物调查所的初期事业</h2><p>1928年，静生生物开办于范旭东所捐其胞兄静生先生的故居，但面积太小，难以适应静生所事业发展。仅半年时间，便提出新办所址的提议，1931年4月即搬入文津街3号新址。</p>
<ol>
<li>植物部主要人员及研究</li>
</ol>
<ul>
<li>秦仁昌与蕨类植物研究</li>
<li>李良庆与藻类植物研究</li>
<li>唐燿与木材研究</li>
<li>冯澄如与生物绘图</li>
<li>周宗璜与真菌学研究</li>
</ul>
<ol start="2">
<li>动物部主要人员及研究</li>
</ol>
<ul>
<li>寿振黄与鸟类研究</li>
<li>张春霖与鱼类研究</li>
<li>沈嘉瑞与甲壳类研究</li>
</ul>
<ol start="3">
<li>藏书<br>静生所使用之图书，依托国立北平图书馆，因经费充裕，其所购置生物学之文献也甚为齐备。</li>
</ol>
<h2 id="静生生物调查所之采集"><a href="#静生生物调查所之采集" class="headerlink" title="静生生物调查所之采集"></a>静生生物调查所之采集</h2><p>静生生物调查所自成立之初便开始对所采集的标本予以分类化的研究。至1948年，共采集动物标本约30万件；植物标本约15万件；菌类标本约3.5万号。</p>
<ol>
<li>植物部之采集<br>前往山西、四川、吉林等地采集标本，采集旅途之中，不仅只是科学之理性，还有人文之情怀。如《凉山杂诗》一卷。</li>
<li>在云南的植物采集<br>在上述采集之后，事业不断壮大，便把目光投到了植物种类更加向往的地方。不仅非常辛苦，还有生命危险。主要人员蔡希陶，进行了为期三年的采集，1934年返平共得植物标本万余号，新种和新分布极多。静生所于1935年再派王启无等组队前往，为其两年。于1937年再派于德浚再次前往，与英国皇家园艺学会合作。他们所收集的标本，现大多收藏于中科院植物所、昆明植物所、华南植物所等。</li>
<li>动物部的采集<br>同样自建所即开始采集工作，但遗憾的是档案中关于这一部分的材料甚少。</li>
</ol>
<h2 id="庐山森林植物园创建始末"><a href="#庐山森林植物园创建始末" class="headerlink" title="庐山森林植物园创建始末"></a>庐山森林植物园创建始末</h2><p>20世纪初期，随着西学的全面引进，现代植物园作为大学的附设机构已开始建立，但作为正规化科研性质的植物园，则产生于20世纪30年代。此中以静生生物调查所与江西省农业院于1934年合办之庐山森林植物园最为著名。</p>
<ol>
<li>胡先骕与创设植物园之理想<br>1917年，胡先骕学成回国之后事业甚为失意，只得回到江西，被聘为庐山森林局副局长，在与自然之庐山交融中，却得到纯美的情感，在胡先骕以后的工作生涯中发挥了重要作用，为其日后选择庐山创办植物园奠定了基础。</li>
<li>选定庐山创设植物园<br>1931年，胡先骕重上庐山，对庐山植物做科学考察，发现了许多植物特有分布。此行让胡先骕感到，在庐山建一个森林植物园，以实现多年宿愿。选择庐山，自然条件是其次，主要是庐山已形成的文化环境（优越的政治地位，加上便利的交通和宜人的气候，使得一时学者云集，自然形成良好的文化氛围）。胡先骕以其在学界的地位和出色的组织才能说服了静生所委员会的委员们，使得在庐山床架森林植物园成为大家的共识。</li>
<li>委任秦仁昌筹建植物园<br>时任静生所技师兼任植物标本室主任，自告奋勇愿承担建园之责。其后便前往实地勘察，后携家眷正式移居庐山，在此开辟新的事业，为中国植物学史揭开新的一页。</li>
<li>庐山森林植物园之成立及职员<br>1934年8月20日植物园成立，秦仁昌担任主任。研究旨趣分为纯粹植物学研究与应用植物学研究两个方面。</li>
<li>创业初期<br>募集资金、任鸿隽与古青书屋、植物的调查与采集、园林建设及研究设施、陈封怀与庐山森林植物园、勘定界址</li>
</ol>
<h1 id="第四章-抗日战争时期的静生生物调查所（1937-1945）"><a href="#第四章-抗日战争时期的静生生物调查所（1937-1945）" class="headerlink" title="第四章 抗日战争时期的静生生物调查所（1937-1945）"></a>第四章 抗日战争时期的静生生物调查所（1937-1945）</h1><h2 id="北平沦陷后的静生所"><a href="#北平沦陷后的静生所" class="headerlink" title="北平沦陷后的静生所"></a>北平沦陷后的静生所</h2><p>静生所乃民间生物所，与国民政府无涉，所以在北平沦陷前几年，依靠美国在华势力，得以生存。</p>
<ol>
<li>沦陷后的研究工作<br>静生所经过10余年的学术积累，在植物学、动物学等研究成果已进入不断涌现时期，一些重要论文相继发表。</li>
<li>杨惟义代理所长<br>胡先骕准备出国考察之时，即已委任杨惟义代理所长之职。（主持任何一项事业的用人都会出现这样那样的问题，先贤也不能避免）。虽然杨尚乏声望，加之战事，诸多问题无法解决，但总体来说，尚称尽职，在任期间，所中工作能正常进行，为保存静生所，还与日本人周旋，得美国人之照拂。</li>
<li>静生所所址被日军侵占<br>1941年12月，美日交恶，太平洋战争爆发，受美国势力保护的中国文化教育机构被视为美国在中国的财产，被日军强行占领，司徒雷登也在北平被日军羁押，12月8日，日军封闭静生所，所员全被驱逐，图书及动植物标本概未救出。静生所在沦陷之后，因各种事由，最终留在北平的人员，不得已而任事于伪职，以维持生活，苟全性命于乱世，但是他们并没有忘记自己的事业。（因为他们的屈辱被认为是失去民族的气节。抗日战争胜利后，胡先骕在静生所复员时，在人员的安排上，也如当时社会对待在敌伪时期所供职的人员一样，对他们不予考虑：在1949年后，这些在日本人统治之下供过职的人，更被称为民族的叛徒汉奸，得到不同程度的迫害，使他们的人格道受了更大的屈辱。）</li>
</ol>
<h2 id="云南农林植物研究所创办缘起"><a href="#云南农林植物研究所创办缘起" class="headerlink" title="云南农林植物研究所创办缘起"></a>云南农林植物研究所创办缘起</h2><p>中国的西南，生物物种极为丰富，近代以来许多国外人士以各种名义纷纷前住采集，获得大量植物标本，经植物学家的研究，发现极具科学价值和开发价值，遂享誉全球。静生生物所成立之后，也着手调查西南地区的生物资源。</p>
<ol>
<li>筹设原委<br>1937年初，胡先骕致函云南教育厅长龚自知，提出愿与教育厅合作在昆明创设一植物研究所。达成初步意向后，1938年春即派曾在云南进行植物采集的蔡希陶前往昆明，勘察所址及筹备相关其他事宜。蔡希陶最终选址黑龙潭。</li>
<li>初期概况<br>开办起来，其员工自当奋起工作，努力为之。胡先骕十分关心，1940年春亲下云南主持工作，并且请国民政府每年资助。云南政府的经费也得以增加，这些经费使得农林所规模扩大，人员增多，一些研究工程相继落成，野外工作也得以展开。此外还邀请了郑万钧等著名学者来所工作。</li>
<li>研究成就<br>农林所同仁之研究所得，前期大多刊于《静生生物调查所汇报》，其中一些论文颇为重要。静生所被日军占领后，随着农林所研究成绩渐多，遂有编辑出版《云南农林所植物研究所丛刊》。但是随着抗日战争进入艰苦时期，研究工作自然也受到影响，甚至员工生活难以为继，主要人员先后散去。最后所务由蔡希陶主持，其时已是国内战争时期。</li>
</ol>
<h2 id="中正大学静生所办事处"><a href="#中正大学静生所办事处" class="headerlink" title="中正大学静生所办事处"></a>中正大学静生所办事处</h2><p>北平落入日本人之手后，胡先骕前往昆明主持云南农林所，1941年，胡先骕任国立中正大学校长，从而促进了静生所与中正大学的合作事宜。</p>
<ol>
<li>研究工作<br>静生所许多人员来中正大学教学，创办并扩大了中正大学生物系。杨惟义研究了多种杀虫植物；彭鸿绶采集研究当地两栖类及爬虫类动物……</li>
<li>新增人员<br>1943年，胡先骕招收了傅书遐为采集员，1945年日本投降后为静生所复原后的主要人员。复原时更为重要的人员还有张肇骞，也是此时为胡先骕所延揽。</li>
</ol>
<h2 id="庐山森林植物园丽江工作站"><a href="#庐山森林植物园丽江工作站" class="headerlink" title="庐山森林植物园丽江工作站"></a>庐山森林植物园丽江工作站</h2><p>庐山森林植物园成立不几年便以优异成绩令世人瞩目。但遇到抗日战争爆发，庐山被日本人占领，人员不得不走西南，在云南丽江建立工作站。</p>
<ol>
<li>西迁之前<br>“七七事变”之后，庐山森林植物园尚未收到战争直接影响，1938年上半年各类工作仍顺利进行，仍有实验室等施工。</li>
<li>西迁经过<br>抗日战争全面爆发仅1年，庐山就已在铁蹄的威胁之下。1938年10月底，植物园得到西迁的指令，其时拟加入云南农林所。与静生所想法一致，许多物品都寄存在了庐山美国学习，认为日人会礼遇英美。然而最后均被日军霸占，日军获悉植物园与静生所关系后，便把部分物品运往北平静生所，供日军使用。</li>
<li>设立丽江工作站<br>植物园大多员工到达昆明后，即加入农林所工作，然该所人员甚多，房舍容纳不了且植物园本有志于高山花卉研究，遂决定前往丽江设立分所。经费十分吃紧，但任坚持不懈，克服困难，做出许多令后人称艳的业绩。</li>
<li>研究成就<br>秦仁昌继续其蕨类植物研究，研究不断深入，1940年发表的《水龙骨科的自然分类系统》震惊了世界植物学界。<br>植物园前往丽江的首要目的是：收集各种真气森林园艺植物以供繁殖，采集植物腊叶标本以供研究。</li>
<li>绝处逢生<br>秦仁昌谋得政府林业部门建立的“金沙江流域林业管理处”负责人，遂将工作站人员纳入该处；同时，秦仁昌还进行了一些应用技术的研究，用于生产。</li>
</ol>
<h2 id="四川乐山木材实验室创建原委"><a href="#四川乐山木材实验室创建原委" class="headerlink" title="四川乐山木材实验室创建原委"></a>四川乐山木材实验室创建原委</h2><p>唐燿美国留学归来后于1939年秋由静生所与经济部工业试验研究所在四川乐山合办木材试验研究室，由唐燿任主任，该研究室为中国木材学的发展做出了奠基性贡献。</p>
<ol>
<li>唐燿在国外留学与考察<br>1935年，经秉志、胡先骕推荐，唐燿获得中基会资助，赴美耶鲁大学研究院进修。学习结束后，即赴加拿大、欧洲各相关学术机构进行考察。</li>
<li>四川乐山木材试验室<br>唐燿系1939年回国，9月22日即乘飞机前往重庆开辟工作。但正当筹备之时，不幸遭到日军飞机轰炸，遂把木材室迁往乐山。就这样，唐燿筚路蓝缕，开创了中国第一个木材实验室。（李约瑟抗战时在中国考察科学事业时曾视察该室）</li>
<li>研究工作<br>1）培养了一批国内外知名的木材专家。<br>2）编印了《木材试验室特刊》。</li>
</ol>
<h2 id="陷于孤岛中的秉志"><a href="#陷于孤岛中的秉志" class="headerlink" title="陷于孤岛中的秉志"></a>陷于孤岛中的秉志</h2><p>抗日战争爆发之际，秉志夫人病重，在沪就医，长久不能起床，秉志只得坐困沪上。秉志家中5个子女，皆尚幼，经济来源几绝，以秉志的社会名望，日本对他的情况调查的十分清楚，企图拉他出来做事。然而秉志不为所动，隐姓埋名，蓄起胡须，过起隐居生活，潜心研究，长达八年之久。</p>
<ol>
<li>二通旧札<br>在与任鸿隽通信中可以看出来，秉志之所以能够度过此漫长劫难，中基会提供了不可或缺的帮助，但其生活依旧艰难。</li>
<li>潜心研究和著述<br>秉志不时在做内迁的准备，几次即将动身却有突发情况不得成行。秉志在沪上虽有种种危险和困苦，但继续他的研究，其研究细致入微，成绩卓著。</li>
</ol>
<h1 id="第五章-静生生物所的复员（1945-1948）"><a href="#第五章-静生生物所的复员（1945-1948）" class="headerlink" title="第五章 静生生物所的复员（1945-1948）"></a>第五章 静生生物所的复员（1945-1948）</h1><h2 id="北平静生生物调查所的复员"><a href="#北平静生生物调查所的复员" class="headerlink" title="北平静生生物调查所的复员"></a>北平静生生物调查所的复员</h2><p>1945年日本投降，胡先骕饱受战争苦难之后精神已甚衰微，但仍欣喜鼓舞，他视若生命的静生所将得以复员。</p>
<ol>
<li>复员的准备<br>胡先骕致信任鸿隽，他的意见得到任鸿隽的赞同，复函劝胡先骕立即回北平，主持复员工作。</li>
<li>接收静生所<br>其时敌占区所有的文化教育机构已由政府主持办理接受手续，10月17日办理了文津街3号静生所的接收工作，18日接收了石驸马大街83号静生所所属的通俗博物馆。<br>静生所复员后的职员，因经费拮据，商得暂时复员植物部，也仅限于种子植物方面得研究。</li>
<li>复员工作<br>1940年10月，胡先骕终于回到北平，亲临主持静生所，并重新开始在自己得植物分类学研究。自此至1948年底北平解放，短短两年里时局动荡，国家经济迅速崩溃，静生所陷入艰难境地，遂百般寻求社会支持，然收效甚微，复员进展缓慢，研究工作极难展开。<br>在如此艰难时期，研究并未中断，虽学科范围缩小了很多，但战时得工作积累使得成果相机涌现，并取得骄人成绩。胡先骕、郑万钧合著得《水杉新科及生存之水杉新种》震动了当时国际植物学界。静生所其他人员的研究也都在积极进行。但动物部未能复员一直是胡先骕得一块心病，各种合作援助等都是画饼充饥，未见实施。<br>与中央政府主办的林业试验所合作编辑出版了《中国森林树木图志》，但随中华人民共和国成立，一切事业重新开始，10年出版10册的宏大计划仅出版1册即告结束；与林业试验所合作进行滇北赣北森林植物调查，但未有圆满之结果，仅差强人意。</li>
</ol>
<p>总之，静生所虽经历了两年多的复员，但远没有达到战前水准。</p>
<h2 id="庐山森林植物园的复员"><a href="#庐山森林植物园的复员" class="headerlink" title="庐山森林植物园的复员"></a>庐山森林植物园的复员</h2><p>历经战乱的庐山森林植物园景物全非，满目疮痍，陈封怀主持的复员工作自1946年8月1日正式开始。</p>
<ol>
<li>复员进展<br>陈封怀一方面向江西农业院申请经费，另一方面也和任鸿隽沟通，双方为了植物园呕心沥血，费尽心思。</li>
<li>研究和采集工作<br>繁殖试验水杉，结果甚好；由庐山森林植物园代表静生所和中央林业实验所进行湘鄂赣边区森林资源调查。</li>
</ol>
<h2 id="云南农林植物所的生产"><a href="#云南农林植物所的生产" class="headerlink" title="云南农林植物所的生产"></a>云南农林植物所的生产</h2><p>抗日战争胜利之际，云南农林植物研究所经费拮据，人员星散，先未曾有大规模工作，后参与合作调查滇南森林植物。蔡希陶在云南试种烟草，获得丰收，缓解了经济局面。</p>
<h1 id="第六章-静生生物调查所的终结-（1949-1950）"><a href="#第六章-静生生物调查所的终结-（1949-1950）" class="headerlink" title="第六章 静生生物调查所的终结 （1949-1950）"></a>第六章 静生生物调查所的终结 （1949-1950）</h1><p>胡先骕对国民党已感失望，但对共产党又因惧怕而反对，所以政治主张走了第三条道路，积极与北京大学一些知名教授组织独立时论社，还组织成立了社会党，但不仅静生所事业艰难，其个人生活也陷入困境。</p>
<ol>
<li>胡先骕留在大陆的原因<br>对于自己热爱的植物学研究，对于自己终身的事业静生所，对于复员时对旧政府的失望，他把希望寄托在了新政府，期望静生所不仅可以恢复，还可以光大，但没有预料到，他的一系列时政论文已经产生了不可挽回的影响。<br>胡先骕一直希望政府接办静生所，多次致函军管文化接管会。6月，华北人民政府批准接管静生所得决议，将该所纳入华北大学农学院领导。</li>
<li>关于静生生物调查所所址<br>1949年11月1日，中国科学院成立。对于植物学，国内已有诸多研究机构，有组织一统一研究所得设想。静生所由于其骄人的业绩，科学院乐于接管，但须予以改组。（中科院想接收静生所，更想占其房屋作为科学院院址，但胡先骕只同意被纳入科学院，但不同意房屋被占用，中科院郭沫若、严济慈等人成立整理委员会，整理静生所是名，迁走静生所是实，此时的胡先骕面对强大的压力，只好任之，实属无奈，在整理委员会会议上的发言感人至深。）</li>
<li>合组中国科学院植物分类研究所<br>中科院决定将静生所与北平研究院植物研究所合并，重新组建中科院植物分类研究所。静生生物调查所就这样终结了，中科院植物分类研究所成立后，胡先骕曾担任研究员，后改名中国科学院植物研究所。在静生所的动物标本基础上扩建成立了中科院动物研究所。</li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_5</title>
    <url>/2019/04/03/2019-04-03-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_5/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="堆heap"><a href="#堆heap" class="headerlink" title="堆heap"></a>堆heap</h1><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h2><p>堆的两个特性：</p>
<ul>
<li>结构性：用数组表示的<strong>完全二叉树</strong></li>
<li>有序性：任一结点的关键字是其子树所有结点的最大值（或最小值）</li>
</ul>
<h2 id="堆进行的操作"><a href="#堆进行的操作" class="headerlink" title="堆进行的操作"></a>堆进行的操作</h2><p>创建、插入、删除、判断是否已满是否为空，返回最大值最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct HNode *Heap; /* 堆的类型定义 */</span><br><span class="line">struct HNode &#123;</span><br><span class="line">    ElementType *Data; /* 存储元素的数组 */</span><br><span class="line">    int Size;          /* 堆中当前元素个数 */</span><br><span class="line">    int Capacity;      /* 堆的最大容量 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef Heap MaxHeap; /* 最大堆 */</span><br><span class="line">typedef Heap MinHeap; /* 最小堆 */</span><br><span class="line"> </span><br><span class="line">#define MAXDATA 1000  /* 该值应根据具体情况定义为大于堆中所有可能元素的值 */</span><br><span class="line"> </span><br><span class="line">MaxHeap CreateHeap( int MaxSize )</span><br><span class="line">&#123; /* 创建容量为MaxSize的空的最大堆 */</span><br><span class="line"> </span><br><span class="line">    MaxHeap H = (MaxHeap)malloc(sizeof(struct HNode));</span><br><span class="line">    H-&gt;Data = (ElementType *)malloc((MaxSize+1)*sizeof(ElementType));</span><br><span class="line">    H-&gt;Size = 0;</span><br><span class="line">    H-&gt;Capacity = MaxSize;</span><br><span class="line">    H-&gt;Data[0] = MAXDATA; /* 定义&quot;哨兵&quot;为大于堆中所有可能元素的值*/</span><br><span class="line"> </span><br><span class="line">    return H;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsFull( MaxHeap H )</span><br><span class="line">&#123;</span><br><span class="line">    return (H-&gt;Size == H-&gt;Capacity);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool Insert( MaxHeap H, ElementType X )</span><br><span class="line">&#123; /* 将元素X插入最大堆H，其中H-&gt;Data[0]已经定义为哨兵 */</span><br><span class="line">    int i;</span><br><span class="line">  </span><br><span class="line">    if ( IsFull(H) ) &#123; </span><br><span class="line">        printf(&quot;最大堆已满&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    i = ++H-&gt;Size; /* i指向插入后堆中的最后一个元素的位置 */</span><br><span class="line">    for ( ; H-&gt;Data[i/2] &lt; X; i/=2 )</span><br><span class="line">        H-&gt;Data[i] = H-&gt;Data[i/2]; /* 上滤X */</span><br><span class="line">    H-&gt;Data[i] = X; /* 将X插入 */</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#define ERROR -1 /* 错误标识应根据具体情况定义为堆中不可能出现的元素值 */</span><br><span class="line"> </span><br><span class="line">bool IsEmpty( MaxHeap H )</span><br><span class="line">&#123;</span><br><span class="line">    return (H-&gt;Size == 0);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ElementType DeleteMax( MaxHeap H )</span><br><span class="line">&#123; /* 从最大堆H中取出键值为最大的元素，并删除一个结点 */</span><br><span class="line">    int Parent, Child;</span><br><span class="line">    ElementType MaxItem, X;</span><br><span class="line"> </span><br><span class="line">    if ( IsEmpty(H) ) &#123;</span><br><span class="line">        printf(&quot;最大堆已为空&quot;);</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    MaxItem = H-&gt;Data[1]; /* 取出根结点存放的最大值 */</span><br><span class="line">    /* 用最大堆中最后一个元素从根结点开始向上过滤下层结点 */</span><br><span class="line">    X = H-&gt;Data[H-&gt;Size--]; /* 注意当前堆的规模要减小 */</span><br><span class="line">    for( Parent=1; Parent*2&lt;=H-&gt;Size; Parent=Child ) &#123;</span><br><span class="line">        Child = Parent * 2;</span><br><span class="line">        if( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )</span><br><span class="line">            Child++;  /* Child指向左右子结点的较大者 */</span><br><span class="line">        if( X &gt;= H-&gt;Data[Child] ) break; /* 找到了合适位置 */</span><br><span class="line">        else  /* 下滤X */</span><br><span class="line">            H-&gt;Data[Parent] = H-&gt;Data[Child];</span><br><span class="line">    &#125;</span><br><span class="line">    H-&gt;Data[Parent] = X;</span><br><span class="line"> </span><br><span class="line">    return MaxItem;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/*----------- 建造最大堆 -----------*/</span><br><span class="line">void PercDown( MaxHeap H, int p )</span><br><span class="line">&#123; /* 下滤：将H中以H-&gt;Data[p]为根的子堆调整为最大堆 */</span><br><span class="line">    int Parent, Child;</span><br><span class="line">    ElementType X;</span><br><span class="line"> </span><br><span class="line">    X = H-&gt;Data[p]; /* 取出根结点存放的值 */</span><br><span class="line">    for( Parent=p; Parent*2&lt;=H-&gt;Size; Parent=Child ) &#123;</span><br><span class="line">        Child = Parent * 2;</span><br><span class="line">        if( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )</span><br><span class="line">            Child++;  /* Child指向左右子结点的较大者 */</span><br><span class="line">        if( X &gt;= H-&gt;Data[Child] ) break; /* 找到了合适位置 */</span><br><span class="line">        else  /* 下滤X */</span><br><span class="line">            H-&gt;Data[Parent] = H-&gt;Data[Child];</span><br><span class="line">    &#125;</span><br><span class="line">    H-&gt;Data[Parent] = X;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void BuildHeap( MaxHeap H )</span><br><span class="line">&#123; /* 调整H-&gt;Data[]中的元素，使满足最大堆的有序性  */</span><br><span class="line">  /* 这里假设所有H-&gt;Size个元素已经存在H-&gt;Data[]中 */</span><br><span class="line"> </span><br><span class="line">    int i;</span><br><span class="line"> </span><br><span class="line">    /* 从最后一个结点的父节点开始，到根结点1 */</span><br><span class="line">    for( i = H-&gt;Size/2; i&gt;0; i-- )</span><br><span class="line">        PercDown( H, i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="哈夫曼树与哈夫曼编码"><a href="#哈夫曼树与哈夫曼编码" class="headerlink" title="哈夫曼树与哈夫曼编码"></a>哈夫曼树与哈夫曼编码</h1><h2 id="什么是哈夫曼树"><a href="#什么是哈夫曼树" class="headerlink" title="什么是哈夫曼树"></a>什么是哈夫曼树</h2><p>根据结点不同的查找频率来构造更有效的搜索树。</p>
<p><strong>带权路径长度（WPL）</strong>:设二叉树有n个叶子结点，每个叶子结点带有权值w<sub>K</sub>，从根结点到每个叶子结点的长度为l<sub>K</sub>，则每个叶子结点的带权路径长度之和就是:WPL= w<sub>K</sub>*l<sub>K</sub>从i到k的求和。</p>
<p><strong>哈夫曼树（最优二叉树）</strong>：WPL最小的二叉树。</p>
<h2 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h2><p>把权值从小到大进行排序，把权值最小的两个并在一起，形成一棵二叉树，每次把权值最小的两棵二叉树合并。</p>
<h2 id="哈夫曼树的特点"><a href="#哈夫曼树的特点" class="headerlink" title="哈夫曼树的特点"></a>哈夫曼树的特点</h2><ul>
<li>没有度为1的结点；</li>
<li>n个叶子结点的哈夫曼树共有2n-1个结点；</li>
<li>哈夫曼树的任意非叶子结点的左右子树交换后仍是哈夫曼树；</li>
<li>对于同一组权值，存在不同构的两棵哈夫曼树；</li>
</ul>
<h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>用二叉树进行编码时如何避免二义性：</p>
<ol>
<li>左右分支：0，1</li>
<li>字符只在叶结点上</li>
</ol>
<p>利用哈夫曼树进行编码就是哈夫曼编码。</p>
<h1 id="集合及运算"><a href="#集合及运算" class="headerlink" title="集合及运算"></a>集合及运算</h1><p>集合运算：交、并、补、差<br>并查集：集合并、查某元素属于什么集合</p>
<h2 id="集合的表示"><a href="#集合的表示" class="headerlink" title="集合的表示"></a>集合的表示</h2><p>可以用树结构表示集合，树的每个结点代表一个集合元素</p>
<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol>
<li>查找某个元素所在的集合；</li>
<li>集合的并运算<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define MAXN 1000                  /* 集合最大元素个数 */</span><br><span class="line">typedef int ElementType;           /* 默认元素可以用非负整数表示 */</span><br><span class="line">typedef int SetName;               /* 默认用根结点的下标作为集合名称 */</span><br><span class="line">typedef ElementType SetType[MAXN]; /* 假设集合元素下标从0开始 */</span><br><span class="line"> </span><br><span class="line">void Union( SetType S, SetName Root1, SetName Root2 )</span><br><span class="line">&#123; /* 这里默认Root1和Root2是不同集合的根结点 */</span><br><span class="line">    /* 保证小集合并入大集合 */</span><br><span class="line">    if ( S[Root2] &lt; S[Root1] ) &#123; /* 如果集合2比较大 */</span><br><span class="line">        S[Root2] += S[Root1];     /* 集合1并入集合2  */</span><br><span class="line">        S[Root1] = Root2;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;                         /* 如果集合1比较大 */</span><br><span class="line">        S[Root1] += S[Root2];     /* 集合2并入集合1  */</span><br><span class="line">        S[Root2] = Root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SetName Find( SetType S, ElementType X )</span><br><span class="line">&#123; /* 默认集合元素全部初始化为-1 */</span><br><span class="line">    if ( S[X] &lt; 0 ) /* 找到集合的根 */</span><br><span class="line">        return X;</span><br><span class="line">    else</span><br><span class="line">        return S[X] = Find( S, S[X] ); /* 路径压缩 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_4</title>
    <url>/2019/04/02/2019-04-02-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_4/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h2><p>二叉搜索树，也叫二叉查找树或二叉排序树。<br>一棵二叉树，可以为空，如果不为空，则满足一下性质：</p>
<ol>
<li>非空<strong>左</strong>子树的键值<strong>小于</strong>其根节点的键值；</li>
<li>非空<strong>右</strong>子树的键值<strong>大于</strong>其根节点的键值；</li>
<li>左右子树都是二叉搜索树；</li>
</ol>
<h2 id="二叉搜索树进行的操作"><a href="#二叉搜索树进行的操作" class="headerlink" title="二叉搜索树进行的操作"></a>二叉搜索树进行的操作</h2><p>查找某元素、查找最大最小值、插入、删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BinTree Insert( BinTree BST, ElementType X )</span><br><span class="line">&#123;</span><br><span class="line">    if( !BST )&#123; /* 若原树为空，生成并返回一个结点的二叉搜索树 */</span><br><span class="line">        BST = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">        BST-&gt;Data = X;</span><br><span class="line">        BST-&gt;Left = BST-&gt;Right = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123; /* 开始找要插入元素的位置 */</span><br><span class="line">        if( X &lt; BST-&gt;Data )</span><br><span class="line">            BST-&gt;Left = Insert( BST-&gt;Left, X );   /*递归插入左子树*/</span><br><span class="line">        else  if( X &gt; BST-&gt;Data )</span><br><span class="line">            BST-&gt;Right = Insert( BST-&gt;Right, X ); /*递归插入右子树*/</span><br><span class="line">        /* else X已经存在，什么都不做 */</span><br><span class="line">    &#125;</span><br><span class="line">    return BST;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">BinTree Delete( BinTree BST, ElementType X ) </span><br><span class="line">&#123; </span><br><span class="line">    Position Tmp; </span><br><span class="line"> </span><br><span class="line">    if( !BST ) </span><br><span class="line">        printf(&quot;要删除的元素未找到&quot;); </span><br><span class="line">    else &#123;</span><br><span class="line">        if( X &lt; BST-&gt;Data ) </span><br><span class="line">            BST-&gt;Left = Delete( BST-&gt;Left, X );   /* 从左子树递归删除 */</span><br><span class="line">        else if( X &gt; BST-&gt;Data ) </span><br><span class="line">            BST-&gt;Right = Delete( BST-&gt;Right, X ); /* 从右子树递归删除 */</span><br><span class="line">        else &#123; /* BST就是要删除的结点 */</span><br><span class="line">            /* 如果被删除结点有左右两个子结点 */ </span><br><span class="line">            if( BST-&gt;Left &amp;&amp; BST-&gt;Right ) &#123;</span><br><span class="line">                /* 从右子树中找最小的元素填充删除结点 */</span><br><span class="line">                Tmp = FindMin( BST-&gt;Right );</span><br><span class="line">                BST-&gt;Data = Tmp-&gt;Data;</span><br><span class="line">                /* 从右子树中删除最小元素 */</span><br><span class="line">                BST-&gt;Right = Delete( BST-&gt;Right, BST-&gt;Data );</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123; /* 被删除结点有一个或无子结点 */</span><br><span class="line">                Tmp = BST; </span><br><span class="line">                if( !BST-&gt;Left )       /* 只有右孩子或无子结点 */</span><br><span class="line">                    BST = BST-&gt;Right; </span><br><span class="line">                else                   /* 只有左孩子 */</span><br><span class="line">                    BST = BST-&gt;Left;</span><br><span class="line">                free( Tmp );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树#"></a>平衡二叉树#</h1><h2 id="平衡二叉树的定义"><a href="#平衡二叉树的定义" class="headerlink" title="平衡二叉树的定义"></a>平衡二叉树的定义</h2><p>“平衡因子BF”：BF(T)=h<sub>L</sub> -h<sub>R</sub>,分别为左右子树高度<br>平衡二叉树(AVL树)：空树或者任一结点左右子树高度差的绝对值不超过1，即|BF(T)|&lt;=1</p>
<h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol>
<li>设n<sub>h</sub>是高度为h的平衡二叉树的最小结点数，那么有n<sub>h</sub>=n<sub>h-1</sub>+n<sub>h-2</sub>+1，且有n<sub>h</sub>=F<sub>h+2</sub>-1(F为斐波那契数列)</li>
<li>h=O(log<sub>2</sub>n)</li>
</ol>
<h2 id="平衡二叉树的调整"><a href="#平衡二叉树的调整" class="headerlink" title="平衡二叉树的调整"></a>平衡二叉树的调整</h2><p>在进行插入、删除操作时，会造成二叉树的不平衡，故需要调整。</p>
<ol>
<li>“麻烦结点”在“发现者”右子树的右边，因而叫RR插入，需要RR旋转（右单旋）；</li>
<li>“麻烦结点”在“发现者”左子树的左边，因而叫LL插入，需要LL旋转（左单旋）；</li>
<li>“麻烦结点”在“发现者”左子树的右边，因而叫LR插入，需要LR旋转；</li>
<li>“麻烦结点”在“发现者”右子树的右左边，因而叫RL插入，需要RL旋转；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct AVLNode *Position;</span><br><span class="line">typedef Position AVLTree; /* AVL树类型 */</span><br><span class="line">struct AVLNode&#123;</span><br><span class="line">    ElementType Data; /* 结点数据 */</span><br><span class="line">    AVLTree Left;     /* 指向左子树 */</span><br><span class="line">    AVLTree Right;    /* 指向右子树 */</span><br><span class="line">    int Height;       /* 树高 */</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">int Max ( int a, int b )</span><br><span class="line">&#123;</span><br><span class="line">    return a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">AVLTree SingleLeftRotation ( AVLTree A )</span><br><span class="line">&#123; /* 注意：A必须有一个左子结点B */</span><br><span class="line">  /* 将A与B做左单旋，更新A与B的高度，返回新的根结点B */     </span><br><span class="line"> </span><br><span class="line">    AVLTree B = A-&gt;Left;</span><br><span class="line">    A-&gt;Left = B-&gt;Right;</span><br><span class="line">    B-&gt;Right = A;</span><br><span class="line">    A-&gt;Height = Max( GetHeight(A-&gt;Left), GetHeight(A-&gt;Right) ) + 1;</span><br><span class="line">    B-&gt;Height = Max( GetHeight(B-&gt;Left), A-&gt;Height ) + 1;</span><br><span class="line">  </span><br><span class="line">    return B;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">AVLTree DoubleLeftRightRotation ( AVLTree A )</span><br><span class="line">&#123; /* 注意：A必须有一个左子结点B，且B必须有一个右子结点C */</span><br><span class="line">  /* 将A、B与C做两次单旋，返回新的根结点C */</span><br><span class="line">     </span><br><span class="line">    /* 将B与C做右单旋，C被返回 */</span><br><span class="line">    A-&gt;Left = SingleRightRotation(A-&gt;Left);</span><br><span class="line">    /* 将A与C做左单旋，C被返回 */</span><br><span class="line">    return SingleLeftRotation(A);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*************************************/</span><br><span class="line">/* 对称的右单旋与右-左双旋请自己实现 */</span><br><span class="line">/*************************************/</span><br><span class="line"> </span><br><span class="line">AVLTree Insert( AVLTree T, ElementType X )</span><br><span class="line">&#123; /* 将X插入AVL树T中，并且返回调整后的AVL树 */</span><br><span class="line">    if ( !T ) &#123; /* 若插入空树，则新建包含一个结点的树 */</span><br><span class="line">        T = (AVLTree)malloc(sizeof(struct AVLNode));</span><br><span class="line">        T-&gt;Data = X;</span><br><span class="line">        T-&gt;Height = 0;</span><br><span class="line">        T-&gt;Left = T-&gt;Right = NULL;</span><br><span class="line">    &#125; /* if (插入空树) 结束 */</span><br><span class="line"> </span><br><span class="line">    else if ( X &lt; T-&gt;Data ) &#123;</span><br><span class="line">        /* 插入T的左子树 */</span><br><span class="line">        T-&gt;Left = Insert( T-&gt;Left, X);</span><br><span class="line">        /* 如果需要左旋 */</span><br><span class="line">        if ( GetHeight(T-&gt;Left)-GetHeight(T-&gt;Right) == 2 )</span><br><span class="line">            if ( X &lt; T-&gt;Left-&gt;Data ) </span><br><span class="line">               T = SingleLeftRotation(T);      /* 左单旋 */</span><br><span class="line">            else </span><br><span class="line">               T = DoubleLeftRightRotation(T); /* 左-右双旋 */</span><br><span class="line">    &#125; /* else if (插入左子树) 结束 */</span><br><span class="line">     </span><br><span class="line">    else if ( X &gt; T-&gt;Data ) &#123;</span><br><span class="line">        /* 插入T的右子树 */</span><br><span class="line">        T-&gt;Right = Insert( T-&gt;Right, X );</span><br><span class="line">        /* 如果需要右旋 */</span><br><span class="line">        if ( GetHeight(T-&gt;Left)-GetHeight(T-&gt;Right) == -2 )</span><br><span class="line">            if ( X &gt; T-&gt;Right-&gt;Data ) </span><br><span class="line">               T = SingleRightRotation(T);     /* 右单旋 */</span><br><span class="line">            else </span><br><span class="line">               T = DoubleRightLeftRotation(T); /* 右-左双旋 */</span><br><span class="line">    &#125; /* else if (插入右子树) 结束 */</span><br><span class="line"> </span><br><span class="line">    /* else X == T-&gt;Data，无须插入 */</span><br><span class="line"> </span><br><span class="line">    /* 别忘了更新树高 */</span><br><span class="line">    T-&gt;Height = Max( GetHeight(T-&gt;Left), GetHeight(T-&gt;Right) ) + 1;</span><br><span class="line">     </span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_3</title>
    <url>/2019/03/18/2019-03-18-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_3/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="树与树的表示"><a href="#树与树的表示" class="headerlink" title="树与树的表示"></a>树与树的表示</h1><h2 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h2><p>分层次管理的结构，在管理上有更高的效率。<br><strong>树</strong>：n(n&gt;=0)个结点构成的有限子集。<br>当n=0时，称为空树；当n&gt;0时，具备以下性质：</p>
<ul>
<li>树中有一个特殊结点，称为“根root”；</li>
<li>其余结点可分为m个互不相交的有限集，其中每个集合本身又是一棵树，称为原来树的“子树”，子树是不相交的；</li>
</ul>
<p>以查找为例，查找分为静态查找（集合中记录是固定的，例如查字典）和动态查找（集合中记录是动态变化的）。<br><strong>静态查找</strong>：顺序查找（有哨兵和无哨兵）、二分查找<br>二分查找判定树：判定树上每个结点需要的查找次数刚好为该结点所在的层数===&gt;n个结点的判定树的深度为[log n]+1</p>
<h2 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h2><p>儿子兄弟表示法:每一个结点有两个指针域，FirstChild和NextSibling，分别指向第一个儿子和下一个兄弟。</p>
<h1 id="二叉树及存储结构"><a href="#二叉树及存储结构" class="headerlink" title="二叉树及存储结构#"></a>二叉树及存储结构#</h1><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>二叉树T是一个有穷的结点集合，这个集合可以为空；若不为空，则它是由根结点和称为其左子树和右子树的两个不相交的二叉树组成。二叉树的子树有左右顺序之分。<br>完美二叉树==满二叉树=/=完全二叉树<br>将满二叉树的结点按照从上到下，从左到右的顺序进行编号，如果此二叉树中所有结点编号和对应的满二叉树相同，则为完全二叉树，也就是满二叉树去掉最后几个结点即完全二叉树。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct TNode *Position;</span><br><span class="line">typedef Position BinTree; /* 二叉树类型 */</span><br><span class="line">struct TNode&#123; /* 树结点定义 */</span><br><span class="line">    ElementType Data; /* 结点数据 */</span><br><span class="line">    BinTree Left;     /* 指向左子树 */</span><br><span class="line">    BinTree Right;    /* 指向右子树 */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol>
<li>一个二叉树第i层的最大结点数为2^(i-1)，i&gt;=1。</li>
<li>深度为k的二叉树最大结点总数为(2^k)-1，k&gt;=1。</li>
<li>对任何非空二叉树T，若n0表示叶结点的个数，n2是度为2的非叶节点个数，那么有n0=n2+1。</li>
</ol>
<h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>适用于完全二叉树，用数组进行存储。非根结点（序号i&gt;1）的父结点的序号是[i/2]；结点（序号为i）的左孩子结点的序号为2i，右孩子结点序号为2i+1。一般二叉树也可以采取这种方法，补充成完全二叉树，但是会造成空间浪费。</p>
<h3 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h3><p>适用于一般完全二叉树。三个域，left/data/right。</p>
<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="先序"><a href="#先序" class="headerlink" title="先序"></a>先序</h2><p>递归：根结点-先序遍历左子树-先序遍历右子树<br>堆栈：参照中序</p>
<h2 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h2><p>递归：中序遍历左子树-根结点-中序遍历右子树<br>堆栈：遇到一个结点，就把它压栈，并去遍历它的左子树，当左子树遍历结束后，从栈顶弹出这个结点并访问它，然后按其右指针再去中序遍历该结点的右子树。</p>
<h2 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h2><p>递归：后序遍历左子树-后序遍历右子树-根结点<br>堆栈：参照中序</p>
<h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>从结点访问其左右儿子结点。访问左儿子后，右儿子结点需要用堆栈或队列暂时保存不访问的结点。<br>队列实现：遍历从根节点开始，首先将根节点入列，然后开始执行循环：结点出队、访问该结点、其左右儿子入队。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void InorderTraversal( BinTree BT )</span><br><span class="line">&#123;</span><br><span class="line">    if( BT ) &#123;</span><br><span class="line">        InorderTraversal( BT-&gt;Left );</span><br><span class="line">        /* 此处假设对BT结点的访问就是打印数据 */</span><br><span class="line">        printf(&quot;%d &quot;, BT-&gt;Data); /* 假设数据为整型 */</span><br><span class="line">        InorderTraversal( BT-&gt;Right );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void PreorderTraversal( BinTree BT )</span><br><span class="line">&#123;</span><br><span class="line">    if( BT ) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, BT-&gt;Data );</span><br><span class="line">        PreorderTraversal( BT-&gt;Left );</span><br><span class="line">        PreorderTraversal( BT-&gt;Right );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void PostorderTraversal( BinTree BT )</span><br><span class="line">&#123;</span><br><span class="line">    if( BT ) &#123;</span><br><span class="line">        PostorderTraversal( BT-&gt;Left );</span><br><span class="line">        PostorderTraversal( BT-&gt;Right );</span><br><span class="line">        printf(&quot;%d &quot;, BT-&gt;Data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void LevelorderTraversal ( BinTree BT )</span><br><span class="line">&#123; </span><br><span class="line">    Queue Q; </span><br><span class="line">    BinTree T;</span><br><span class="line"> </span><br><span class="line">    if ( !BT ) return; /* 若是空树则直接返回 */</span><br><span class="line">     </span><br><span class="line">    Q = CreatQueue(); /* 创建空队列Q */</span><br><span class="line">    AddQ( Q, BT );</span><br><span class="line">    while ( !IsEmpty(Q) ) &#123;</span><br><span class="line">        T = DeleteQ( Q );</span><br><span class="line">        printf(&quot;%d &quot;, T-&gt;Data); /* 访问取出队列的结点 */</span><br><span class="line">        if ( T-&gt;Left )   AddQ( Q, T-&gt;Left );</span><br><span class="line">        if ( T-&gt;Right )  AddQ( Q, T-&gt;Right );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_7</title>
    <url>/2019/03/12/2019-03-12-JavaScript%E5%88%9D%E6%8E%A2_7/</url>
    <content><![CDATA[<blockquote>
<p>这一部分主要新增了Setting.vue以及对Form.vue进行了改动。</p>
</blockquote>
<h1 id="Setting-vue"><a href="#Setting-vue" class="headerlink" title="Setting.vue"></a>Setting.vue</h1><p>主要功能有相片的上传（update），主要参照图片列表缩略图，同时加入了一些新的内容，例如判别图片类型是否合乎规范，上传张数是否超额等；另外一个功能为评分（rate），本来想用示例中笑脸的例子，可是当时安装element时没有void-icon-class所需要的库，所以改为了普通的星状，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-row style=&quot;margin-top:20px;margin-bottom:80px&quot;&gt;</span><br><span class="line">      &lt;div&gt;请上传头像!&lt;/div&gt;</span><br><span class="line">      &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">                 action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span><br><span class="line">                 :before-upload=&quot;beforeAvatarUpload&quot;</span><br><span class="line">                 :on-success=&quot;handleSuccess&quot;</span><br><span class="line">                 :on-remove=&quot;handleRemove&quot;</span><br><span class="line">                 :before-remove=&quot;beforeRemove&quot;</span><br><span class="line">                 :limit=&quot;3&quot;</span><br><span class="line">                 :on-exceed=&quot;handleExceed&quot;</span><br><span class="line">                 :file-list=&quot;fileList2&quot;</span><br><span class="line">                 list-type=&quot;picture&quot;&gt;</span><br><span class="line">        &lt;el-button size=&quot;small&quot;</span><br><span class="line">                   type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">        &lt;div slot=&quot;tip&quot;</span><br><span class="line">             class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">      &lt;el-dialog :visible.sync=&quot;dialogVisible&quot;&gt;</span><br><span class="line">        &lt;img width=&quot;100%&quot;</span><br><span class="line">             :src=&quot;dialogImageUrl&quot;</span><br><span class="line">             alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;div&gt;请对本系统进行评分！&lt;/div&gt;</span><br><span class="line">    &lt;el-rate v-model=&quot;value&quot;</span><br><span class="line">             show-text&gt;</span><br><span class="line">    &lt;/el-rate&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: null,</span><br><span class="line">      fileList2: [&#123; name: &apos;food.jpeg&apos;, url: &apos;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&apos; &#125;, &#123; name: &apos;food2.jpeg&apos;, url: &apos;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&apos; &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 判断上传文件类型</span><br><span class="line">    beforeAvatarUpload: function (file) &#123;</span><br><span class="line">      var me = this</span><br><span class="line">      var isJPG = file.type === &apos;image/jpeg&apos;</span><br><span class="line">      var isPNG = file.type === &apos;image/png&apos;</span><br><span class="line">      if (!(isJPG || isPNG)) &#123;</span><br><span class="line">        me.$message.error(&apos;上传的文件只能是 JPG 或者是 PNG 格式的&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">      else me.handlePreview(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleRemove(file, fileList) &#123;</span><br><span class="line">      console.log(file, fileList);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 文件超出个数限制时的钩子</span><br><span class="line">    handleExceed(file, fileList) &#123;</span><br><span class="line">      const me = this</span><br><span class="line">      me.$message.warning(&apos;只能上传一个文件&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //确认删除</span><br><span class="line">    beforeRemove(file, fileList) &#123;</span><br><span class="line">      return this.$confirm(`确定移除 $&#123;file.name&#125;？`);</span><br><span class="line">    &#125;,</span><br><span class="line">    //上传成功</span><br><span class="line">    handleSuccess(res, file) &#123;</span><br><span class="line">      this.imageUrl = URL.createObjectURL(file.raw);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Form-vue"><a href="#Form-vue" class="headerlink" title="Form.vue"></a>Form.vue</h1><p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_2</title>
    <url>/2019/03/09/2019-03-09-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_2/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="线性表及其实现"><a href="#线性表及其实现" class="headerlink" title="线性表及其实现"></a>线性表及其实现</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>以一元多项式表示及运算为例：</p>
<ol>
<li>顺序存储结构直接表示。数组各分量对应多项式各项，如a[i]表示项x^i的系数ai,表示方法简单，操作也很方便，但有时会造成空间的浪费，例如表示f(x)=x+x^2000，就要开辟一个2001大小的数组来表示；</li>
<li>顺序存储结构表示非零项。每个非零项ai*x^i涉及两个信息：系数ai和指数i，可以将一个多项式看作一个二元数组（ai,i）的集合，每一项按照指数大小顺序存储的话，进行加减操作也比较简单；</li>
<li>链表结构存储非零项。链表中每个结点存储一个非零项，包括系数和指数两个数据域以及一个指针域。</li>
</ol>
<p><strong>线性表</strong>：由同类型数据元素构成<strong>有序序列</strong>的线性结构。</p>
<h2 id="线性表的实现"><a href="#线性表的实现" class="headerlink" title="线性表的实现"></a>线性表的实现</h2><ol>
<li>线性表的顺序存储实现。利用数组的连续存储空间顺序存放线性表的各元素；</li>
<li>线性表的链式存储实现。不要求逻辑上相邻的两个元素物理上也相邻。</li>
</ol>
<p>两种方式都包括移动、查找、插入、删除等操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">typedef struct LNode *List;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/* 初始化 */</span><br><span class="line">List MakeEmpty()</span><br><span class="line">&#123;</span><br><span class="line">    List L;</span><br><span class="line"> </span><br><span class="line">    L = (List)malloc(sizeof(struct LNode));</span><br><span class="line">    L-&gt;Last = -1;</span><br><span class="line"> </span><br><span class="line">    return L;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* 查找 */</span><br><span class="line">#define ERROR -1</span><br><span class="line"> </span><br><span class="line">Position Find( List L, ElementType X )</span><br><span class="line">&#123;</span><br><span class="line">    Position i = 0;</span><br><span class="line"> </span><br><span class="line">    while( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )</span><br><span class="line">        i++;</span><br><span class="line">    if ( i &gt; L-&gt;Last )  return ERROR; /* 如果没找到，返回错误信息 */</span><br><span class="line">    else  return i;  /* 找到后返回的是存储位置 */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* 插入 */</span><br><span class="line">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span><br><span class="line">bool Insert( List L, ElementType X, Position P ) </span><br><span class="line">&#123; /* 在L的指定位置P前插入一个新元素X */</span><br><span class="line">    Position i;</span><br><span class="line"> </span><br><span class="line">    if ( L-&gt;Last == MAXSIZE-1) &#123;</span><br><span class="line">        /* 表空间已满，不能插入 */</span><br><span class="line">        printf(&quot;表满&quot;); </span><br><span class="line">        return false; </span><br><span class="line">    &#125;  </span><br><span class="line">    if ( P&lt;0 || P&gt;L-&gt;Last+1 ) &#123; /* 检查插入位置的合法性 */</span><br><span class="line">        printf(&quot;位置不合法&quot;);</span><br><span class="line">        return false; </span><br><span class="line">    &#125; </span><br><span class="line">    for( i=L-&gt;Last; i&gt;=P; i-- )</span><br><span class="line">        L-&gt;Data[i+1] = L-&gt;Data[i]; /* 将位置P及以后的元素顺序向后移动 */</span><br><span class="line">    L-&gt;Data[P] = X;  /* 新元素插入 */</span><br><span class="line">    L-&gt;Last++;       /* Last仍指向最后元素 */</span><br><span class="line">    return true; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">/* 删除 */</span><br><span class="line">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span><br><span class="line">bool Delete( List L, Position P )</span><br><span class="line">&#123; /* 从L中删除指定位置P的元素 */</span><br><span class="line">    Position i;</span><br><span class="line"> </span><br><span class="line">    if( P&lt;0 || P&gt;L-&gt;Last ) &#123; /* 检查空表及删除位置的合法性 */</span><br><span class="line">        printf(&quot;位置%d不存在元素&quot;, P ); </span><br><span class="line">        return false; </span><br><span class="line">    &#125;</span><br><span class="line">    for( i=P+1; i&lt;=L-&gt;Last; i++ )</span><br><span class="line">        L-&gt;Data[i-1] = L-&gt;Data[i]; /* 将位置P+1及以后的元素顺序向前移动 */</span><br><span class="line">    L-&gt;Last--; /* Last仍指向最后元素 */</span><br><span class="line">    return true;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct LNode *PtrToLNode;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToLNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToLNode Position;</span><br><span class="line">typedef PtrToLNode List;</span><br><span class="line"> </span><br><span class="line">/* 查找 */</span><br><span class="line">#define ERROR NULL</span><br><span class="line"> </span><br><span class="line">Position Find( List L, ElementType X )</span><br><span class="line">&#123;</span><br><span class="line">    Position p = L; /* p指向L的第1个结点 */</span><br><span class="line"> </span><br><span class="line">    while ( p &amp;&amp; p-&gt;Data!=X )</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line"> </span><br><span class="line">    /* 下列语句可以用 return p; 替换 */</span><br><span class="line">    if ( p )</span><br><span class="line">        return p;</span><br><span class="line">    else</span><br><span class="line">        return ERROR;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* 带头结点的插入 */</span><br><span class="line">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 */</span><br><span class="line">bool Insert( List L, ElementType X, Position P )</span><br><span class="line">&#123; /* 这里默认L有头结点 */</span><br><span class="line">    Position tmp, pre;</span><br><span class="line"> </span><br><span class="line">    /* 查找P的前一个结点 */        </span><br><span class="line">    for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            </span><br><span class="line">    if ( pre==NULL ) &#123; /* P所指的结点不在L中 */</span><br><span class="line">        printf(&quot;插入位置参数错误\n&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123; /* 找到了P的前一个结点pre */</span><br><span class="line">        /* 在P前插入新结点 */</span><br><span class="line">        tmp = (Position)malloc(sizeof(struct LNode)); /* 申请、填装结点 */</span><br><span class="line">        tmp-&gt;Data = X; </span><br><span class="line">        tmp-&gt;Next = P;</span><br><span class="line">        pre-&gt;Next = tmp;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* 带头结点的删除 */</span><br><span class="line">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 */</span><br><span class="line">bool Delete( List L, Position P )</span><br><span class="line">&#123; /* 这里默认L有头结点 */</span><br><span class="line">    Position tmp, pre;</span><br><span class="line"> </span><br><span class="line">    /* 查找P的前一个结点 */        </span><br><span class="line">    for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            </span><br><span class="line">    if ( pre==NULL || P==NULL) &#123; /* P所指的结点不在L中 */</span><br><span class="line">        printf(&quot;删除位置参数错误\n&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123; /* 找到了P的前一个结点pre */</span><br><span class="line">        /* 将P位置的结点删除 */</span><br><span class="line">        pre-&gt;Next = P-&gt;Next;</span><br><span class="line">        free(P);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p>广义表是线性表的推广，对于线性表而言，n个元素都是基本的单元素，而在广义表中，这些元素不仅可以是单元素也可以是另一个广义表。</p>
<h2 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h2><p>链表中的节点可能同时隶属于多个链，也就是说多重链表中结点的指针域会有多个，但包含两个指针域的链表并不一定是多重链表，例如双向链表不是多重链表。树、图等复杂的数据结构都可以采用多重链表来存储，<br>典型的多重链表：十字链表（用来存储稀疏矩阵等）</p>
<h1 id="堆栈及其实现"><a href="#堆栈及其实现" class="headerlink" title="堆栈及其实现#"></a>堆栈及其实现#</h1><h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><p>堆栈：具有一定操作约束的线性表。<br>只在一端（栈顶，Top）做插入（入栈，Push）、删除（出栈，Pop），后入先出（Last In First Out，LIFO）</p>
<h2 id="堆栈的实现"><a href="#堆栈的实现" class="headerlink" title="堆栈的实现"></a>堆栈的实现</h2><ol>
<li>顺序存储实现。用一个一维数组以及一个一个记录栈顶元素位置的变量组成。</li>
<li>链式存储实现。栈的链式存储结构实际上就是一个单项链，叫做链栈。插入和删除操作只能在链栈的栈顶进行，栈顶指针Top应该在链表的头。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">struct SNode &#123;</span><br><span class="line">    ElementType *Data; /* 存储元素的数组 */</span><br><span class="line">    Position Top;      /* 栈顶指针 */</span><br><span class="line">    int MaxSize;       /* 堆栈最大容量 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct SNode *Stack;</span><br><span class="line"> </span><br><span class="line">Stack CreateStack( int MaxSize )</span><br><span class="line">&#123;</span><br><span class="line">    Stack S = (Stack)malloc(sizeof(struct SNode));</span><br><span class="line">    S-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));</span><br><span class="line">    S-&gt;Top = -1;</span><br><span class="line">    S-&gt;MaxSize = MaxSize;</span><br><span class="line">    return S;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsFull( Stack S )</span><br><span class="line">&#123;</span><br><span class="line">    return (S-&gt;Top == S-&gt;MaxSize-1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool Push( Stack S, ElementType X )</span><br><span class="line">&#123;</span><br><span class="line">    if ( IsFull(S) ) &#123;</span><br><span class="line">        printf(&quot;堆栈满&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        S-&gt;Data[++(S-&gt;Top)] = X;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsEmpty( Stack S )</span><br><span class="line">&#123;</span><br><span class="line">    return (S-&gt;Top == -1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ElementType Pop( Stack S )</span><br><span class="line">&#123;</span><br><span class="line">    if ( IsEmpty(S) ) &#123;</span><br><span class="line">        printf(&quot;堆栈空&quot;);</span><br><span class="line">        return ERROR; /* ERROR是ElementType的特殊值，标志错误 */</span><br><span class="line">    &#125;</span><br><span class="line">    else </span><br><span class="line">        return ( S-&gt;Data[(S-&gt;Top)--] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct SNode *PtrToSNode;</span><br><span class="line">struct SNode &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToSNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToSNode Stack;</span><br><span class="line"> </span><br><span class="line">Stack CreateStack( ) </span><br><span class="line">&#123; /* 构建一个堆栈的头结点，返回该结点指针 */</span><br><span class="line">    Stack S;</span><br><span class="line"> </span><br><span class="line">    S = (Stack)malloc(sizeof(struct SNode));</span><br><span class="line">    S-&gt;Next = NULL;</span><br><span class="line">    return S;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsEmpty ( Stack S )</span><br><span class="line">&#123; /* 判断堆栈S是否为空，若是返回true；否则返回false */</span><br><span class="line">    return ( S-&gt;Next == NULL );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool Push( Stack S, ElementType X )</span><br><span class="line">&#123; /* 将元素X压入堆栈S */</span><br><span class="line">    PtrToSNode TmpCell;</span><br><span class="line"> </span><br><span class="line">    TmpCell = (PtrToSNode)malloc(sizeof(struct SNode));</span><br><span class="line">    TmpCell-&gt;Data = X;</span><br><span class="line">    TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">    S-&gt;Next = TmpCell;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ElementType Pop( Stack S )  </span><br><span class="line">&#123; /* 删除并返回堆栈S的栈顶元素 */</span><br><span class="line">    PtrToSNode FirstCell;</span><br><span class="line">    ElementType TopElem;</span><br><span class="line"> </span><br><span class="line">    if( IsEmpty(S) ) &#123;</span><br><span class="line">        printf(&quot;堆栈空&quot;); </span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        FirstCell = S-&gt;Next; </span><br><span class="line">        TopElem = FirstCell-&gt;Data;</span><br><span class="line">        S-&gt;Next = FirstCell-&gt;Next;</span><br><span class="line">        free(FirstCell);</span><br><span class="line">        return TopElem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="队列及其实现"><a href="#队列及其实现" class="headerlink" title="队列及其实现"></a>队列及其实现</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2>队列：具有一定操作约束的线性表。<br>只在一端插入（入队，AddQ），在另一端删除（出队，DeleteQ），先进先出（FIFO）。<h2 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h2></li>
<li>顺序存储实现。由一个一维数组和一个记录队列头元素位置的变量front以及一个记录队列尾元素位置的变量rear组成。</li>
<li>链式存储实现。队列的链式存储结构实际上也是一个单项链。插入和删除操作在链表的两头进行，队列指针front和rear分别指向链表的头和尾。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">struct QNode &#123;</span><br><span class="line">    ElementType *Data;     /* 存储元素的数组 */</span><br><span class="line">    Position Front, Rear;  /* 队列的头、尾指针 */</span><br><span class="line">    int MaxSize;           /* 队列最大容量 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct QNode *Queue;</span><br><span class="line"> </span><br><span class="line">Queue CreateQueue( int MaxSize )</span><br><span class="line">&#123;</span><br><span class="line">    Queue Q = (Queue)malloc(sizeof(struct QNode));</span><br><span class="line">    Q-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));</span><br><span class="line">    Q-&gt;Front = Q-&gt;Rear = 0;</span><br><span class="line">    Q-&gt;MaxSize = MaxSize;</span><br><span class="line">    return Q;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsFull( Queue Q )</span><br><span class="line">&#123;</span><br><span class="line">    return ((Q-&gt;Rear+1)%Q-&gt;MaxSize == Q-&gt;Front);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool AddQ( Queue Q, ElementType X )</span><br><span class="line">&#123;</span><br><span class="line">    if ( IsFull(Q) ) &#123;</span><br><span class="line">        printf(&quot;队列满&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Q-&gt;Rear = (Q-&gt;Rear+1)%Q-&gt;MaxSize;</span><br><span class="line">        Q-&gt;Data[Q-&gt;Rear] = X;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool IsEmpty( Queue Q )</span><br><span class="line">&#123;</span><br><span class="line">    return (Q-&gt;Front == Q-&gt;Rear);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ElementType DeleteQ( Queue Q )</span><br><span class="line">&#123;</span><br><span class="line">    if ( IsEmpty(Q) ) &#123; </span><br><span class="line">        printf(&quot;队列空&quot;);</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    else  &#123;</span><br><span class="line">        Q-&gt;Front =(Q-&gt;Front+1)%Q-&gt;MaxSize;</span><br><span class="line">        return  Q-&gt;Data[Q-&gt;Front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123; /* 队列中的结点 */</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToNode Position;</span><br><span class="line"> </span><br><span class="line">struct QNode &#123;</span><br><span class="line">    Position Front, Rear;  /* 队列的头、尾指针 */</span><br><span class="line">    int MaxSize;           /* 队列最大容量 */</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct QNode *Queue;</span><br><span class="line"> </span><br><span class="line">bool IsEmpty( Queue Q )</span><br><span class="line">&#123;</span><br><span class="line">    return ( Q-&gt;Front == NULL);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ElementType DeleteQ( Queue Q )</span><br><span class="line">&#123;</span><br><span class="line">    Position FrontCell; </span><br><span class="line">    ElementType FrontElem;</span><br><span class="line">     </span><br><span class="line">    if  ( IsEmpty(Q) ) &#123;</span><br><span class="line">        printf(&quot;队列空&quot;);</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        FrontCell = Q-&gt;Front;</span><br><span class="line">        if ( Q-&gt;Front == Q-&gt;Rear ) /* 若队列只有一个元素 */</span><br><span class="line">            Q-&gt;Front = Q-&gt;Rear = NULL; /* 删除后队列置为空 */</span><br><span class="line">        else                     </span><br><span class="line">            Q-&gt;Front = Q-&gt;Front-&gt;Next;</span><br><span class="line">        FrontElem = FrontCell-&gt;Data;</span><br><span class="line"> </span><br><span class="line">        free( FrontCell );  /* 释放被删除结点空间  */</span><br><span class="line">        return  FrontElem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_5</title>
    <url>/2019/03/08/2019-03-08-JavaScript%E5%88%9D%E6%8E%A2_6%20/</url>
    <content><![CDATA[<blockquote>
<p>最近几天改动比较大，改bug中间费了不少时间，也没有及时记录，补充一下。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>改动内容包括：</p>
<ol>
<li>改动登陆页面输入框；</li>
<li>Home页面新增页面导航栏；</li>
<li>Home页面新增表格、表单以及在对应页面的相关操作；</li>
</ol>
<h1 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h1><h2 id="Login-vue"><a href="#Login-vue" class="headerlink" title="Login.vue"></a>Login.vue</h2><p>引入scss（删掉node_modules重新cnpm install一下），为登陆页面输入框增加了框形阴影，新增部分具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.login_content &#123;</span><br><span class="line">  /*box-shadow: 0 0px 8px 0 rgba(0, 0, 0, 0.06), 0 1px 0px 0 rgba(0, 0, 0, 0.02);*/</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  background-clip: padding-box;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  width: 350px;</span><br><span class="line">  padding: 35px 35px 15px 35px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border: 1px solid #eaeaea;</span><br><span class="line">  box-shadow: 0 0 25px #cac6c6;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>此页相对简单，作者这里不具体展开。</p>
<h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><p>页面导航本身还比较好弄，element有相应模板，但是点击导航按钮出现相应界面这部分需要和路由配合，最初的想法在模板基础上进行小改动，click跳转即可，但是始终和路由配合不好，而且click事件发生，导航菜单各级之间的处理也比较混乱，最后还是进行了比较大的改动，注销按钮的位置等也做了调整，具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Home.vue:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;el-col :span=&quot;24&quot;</span><br><span class="line">            class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;aside :class=&quot;collapsed?&apos;menu-collapsed&apos;:&apos;menu-expanded&apos;&quot;&gt;</span><br><span class="line">        &lt;!--导航菜单--&gt;</span><br><span class="line">        &lt;el-menu :default-active=&quot;$route.path&quot;</span><br><span class="line">                 class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">                 @open=&quot;handleopen&quot;</span><br><span class="line">                 @close=&quot;handleclose&quot;</span><br><span class="line">                 @select=&quot;handleselect&quot;</span><br><span class="line">                 unique-opened</span><br><span class="line">                 router</span><br><span class="line">                 v-show=&quot;!collapsed&quot;&gt;</span><br><span class="line">          &lt;template v-for=&quot;(item,index) in $router.options.routes&quot;</span><br><span class="line">                    v-if=&quot;!item.hidden&quot;&gt;</span><br><span class="line">            &lt;el-submenu :index=&quot;index+&apos;&apos;&quot;</span><br><span class="line">                        v-if=&quot;!item.leaf&quot;&gt;</span><br><span class="line">              &lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&#123;&#123;item.name&#125;&#125;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item v-for=&quot;child in item.children&quot;</span><br><span class="line">                            :index=&quot;child.path&quot;</span><br><span class="line">                            :key=&quot;child.path&quot;</span><br><span class="line">                            v-if=&quot;!child.hidden&quot;&gt;&#123;&#123;child.name&#125;&#125;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-submenu&gt;</span><br><span class="line">            &lt;el-menu-item v-if=&quot;item.leaf&amp;&amp;item.children.length&gt;0&quot;</span><br><span class="line">                          :index=&quot;item.children[0].path&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;item.iconCls&quot;&gt;</span><br><span class="line">              &lt;/i&gt;&#123;&#123;item.children[0].name&#125;&#125;</span><br><span class="line">            &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">        &lt;!--导航菜单-折叠后--&gt;</span><br><span class="line">        &lt;ul class=&quot;el-menu el-menu-vertical-demo collapsed&quot;</span><br><span class="line">            v-show=&quot;collapsed&quot;</span><br><span class="line">            ref=&quot;menuCollapsed&quot;&gt;</span><br><span class="line">          &lt;li v-for=&quot;(item,index) in $router.options.routes&quot;</span><br><span class="line">              v-if=&quot;!item.hidden&quot;</span><br><span class="line">              class=&quot;el-submenu item&quot;&gt;</span><br><span class="line">            &lt;template v-if=&quot;!item.leaf&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;el-submenu__title&quot;</span><br><span class="line">                   style=&quot;padding-left: 20px;&quot;</span><br><span class="line">                   @mouseover=&quot;showMenu(index,true)&quot;</span><br><span class="line">                   @mouseout=&quot;showMenu(index,false)&quot;&gt;</span><br><span class="line">                &lt;i :class=&quot;item.iconCls&quot;&gt;</span><br><span class="line">                &lt;/i&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;ul class=&quot;el-menu submenu&quot;</span><br><span class="line">                  :class=&quot;&apos;submenu-hook-&apos;+index&quot;</span><br><span class="line">                  @mouseover=&quot;showMenu(index,true)&quot;</span><br><span class="line">                  @mouseout=&quot;showMenu(index,false)&quot;&gt;</span><br><span class="line">                &lt;li v-for=&quot;child in item.children&quot;</span><br><span class="line">                    v-if=&quot;!child.hidden&quot;</span><br><span class="line">                    :key=&quot;child.path&quot;</span><br><span class="line">                    class=&quot;el-menu-item&quot;</span><br><span class="line">                    style=&quot;padding-left: 40px;&quot;</span><br><span class="line">                    :class=&quot;$route.path==child.path?&apos;is-active&apos;:&apos;&apos;&quot;</span><br><span class="line">                    @click=&quot;$router.push(child.path)&quot;&gt;&#123;&#123;child.name&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else&gt;</span><br><span class="line">          &lt;li class=&quot;el-submenu&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;el-submenu__title el-menu-item&quot;</span><br><span class="line">                 style=&quot;padding-left: 20px;height: 56px;line-height: 56px;padding: 0 20px;&quot;</span><br><span class="line">                 :class=&quot;$route.path==item.children[0].path?&apos;is-active&apos;:&apos;&apos;&quot;</span><br><span class="line">                 @click=&quot;$router.push(item.children[0].path)&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;item.iconCls&quot;&gt;</span><br><span class="line">              &lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/aside&gt;</span><br><span class="line">&lt;section class=&quot;content-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;grid-content bg-purple-light&quot;&gt;</span><br><span class="line">    &lt;el-col :span=&quot;24&quot;</span><br><span class="line">            class=&quot;breadcrumb-container&quot;&gt;</span><br><span class="line">      &lt;strong class=&quot;title&quot;&gt;&#123;&#123;$route.name&#125;&#125;</span><br><span class="line">      &lt;/strong&gt;</span><br><span class="line">      &lt;el-breadcrumb separator=&quot;/&quot;</span><br><span class="line">                     class=&quot;breadcrumb-inner&quot;&gt;</span><br><span class="line">        &lt;el-breadcrumb-item v-for=&quot;item in $route.matched&quot;</span><br><span class="line">                            :key=&quot;item.path&quot;&gt;</span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/el-breadcrumb-item&gt;</span><br><span class="line">      &lt;/el-breadcrumb&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">    &lt;el-col :span=&quot;24&quot;</span><br><span class="line">            class=&quot;content-wrapper&quot;&gt;</span><br><span class="line">      &lt;transition name=&quot;fade&quot;</span><br><span class="line">                  mode=&quot;out-in&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/transition&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br><span class="line">&lt;!--注销按钮--&gt;</span><br><span class="line">&lt;el-row type=&quot;flex&quot;</span><br><span class="line">        justify=&quot;center&quot;</span><br><span class="line">        style=&quot;margin-top:25px&quot;&gt;</span><br><span class="line">  &lt;el-col :span=&quot;1&quot;</span><br><span class="line">          offset=&quot;22&quot;&gt;</span><br><span class="line">    &lt;el-popover placement=&quot;left-start&quot;</span><br><span class="line">                width=&quot;160&quot;</span><br><span class="line">                v-model=&quot;visible&quot;&gt;</span><br><span class="line">      &lt;el-button slot=&quot;reference&quot;&gt;注销&lt;/el-button&gt;</span><br><span class="line">      &lt;p&gt;确定注销并退出吗？&lt;/p&gt;</span><br><span class="line">      &lt;div style=&quot;text-align: right; margin: 0&quot;&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot;</span><br><span class="line">                   type=&quot;text&quot;</span><br><span class="line">                   @click=&quot;visible = false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                   size=&quot;mini&quot;</span><br><span class="line">                   @click=&quot;logout&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-popover&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    logout() &#123;</span><br><span class="line">      this.$router.replace(&apos;/&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleopen() &#123;</span><br><span class="line">      console.log(&apos;handleopen&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleclose() &#123;</span><br><span class="line">      console.log(&apos;handleclose&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleselect: function (a, b) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    //折叠导航栏</span><br><span class="line">    collapse: function () &#123;</span><br><span class="line">      this.collapsed = !this.collapsed;</span><br><span class="line">    &#125;,</span><br><span class="line">    showMenu(i, status) &#123;</span><br><span class="line">      this.$refs.menuCollapsed.getElementsByClassName(&apos;submenu-hook-&apos; + i)[0].style.display = status ? &apos;block&apos; : &apos;none&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      visible: false,  //注销弹出框</span><br><span class="line">      collapsed: false,   //菜单折叠</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0px;</span><br><span class="line">  bottom: 0px;</span><br><span class="line">  width: 95%;</span><br><span class="line"></span><br><span class="line">  .main &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    // background: #324057;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 110px;</span><br><span class="line">    bottom: 0px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    aside &#123;</span><br><span class="line">      flex: 0 0 230px;</span><br><span class="line">      width: 230px;</span><br><span class="line">      // position: absolute;</span><br><span class="line">      // top: 0px;</span><br><span class="line">      // bottom: 0px;</span><br><span class="line">      .el-menu &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .collapsed &#123;</span><br><span class="line">        width: 60px;</span><br><span class="line">        .item &#123;</span><br><span class="line">          position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .submenu &#123;</span><br><span class="line">          position: absolute;</span><br><span class="line">          top: 0px;</span><br><span class="line">          left: 60px;</span><br><span class="line">          z-index: 99999;</span><br><span class="line">          height: auto;</span><br><span class="line">          display: none;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu-collapsed &#123;</span><br><span class="line">      flex: 0 0 60px;</span><br><span class="line">      width: 60px;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu-expanded &#123;</span><br><span class="line">      flex: 0 0 230px;</span><br><span class="line">      width: 230px;</span><br><span class="line">    &#125;</span><br><span class="line">    .content-container &#123;</span><br><span class="line">      // background: #f1f2f7;</span><br><span class="line">      flex: 1;</span><br><span class="line">      // position: absolute;</span><br><span class="line">      // right: 0px;</span><br><span class="line">      // top: 0px;</span><br><span class="line">      // bottom: 0px;</span><br><span class="line">      // left: 230px;</span><br><span class="line">      overflow-y: scroll;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .breadcrumb-container &#123;</span><br><span class="line">        //margin-bottom: 15px;</span><br><span class="line">        .title &#123;</span><br><span class="line">          width: 200px;</span><br><span class="line">          float: left;</span><br><span class="line">          color: #475669;</span><br><span class="line">        &#125;</span><br><span class="line">        .breadcrumb-inner &#123;</span><br><span class="line">          float: right;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .content-wrapper &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路由的index.js:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">//import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class="line">import Main from &apos;@/components/Main.vue&apos;</span><br><span class="line">import Login from &apos;@/components/Login.vue&apos;</span><br><span class="line">import Home from &apos;@/components/Home.vue&apos;</span><br><span class="line">import Form from &apos;@/components/Form.vue&apos;</span><br><span class="line">import Table from &apos;@/components/Table.vue&apos;</span><br><span class="line">import Setting from &apos;@/components/Setting.vue&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)   //注册vue-router</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    /*&#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;HelloWorld&apos;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,*/</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;Main&apos;,</span><br><span class="line">      component: Main,</span><br><span class="line">      hidden: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/login&apos;,</span><br><span class="line">      name: &apos;Login&apos;,</span><br><span class="line">      component: Login,</span><br><span class="line">      hidden: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/home&apos;,</span><br><span class="line">      name: &apos;Home&apos;,</span><br><span class="line">      component: Home,</span><br><span class="line">      hidden: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      component: Home,</span><br><span class="line">      name: &apos;导航一&apos;,</span><br><span class="line">      iconCls: &apos;el-icon-message&apos;,//图标样式class</span><br><span class="line">      children: [</span><br><span class="line">        &#123; path: &apos;/home/form&apos;, component: Form, name: &apos;表单&apos; &#125;,</span><br><span class="line">        &#123; path: &apos;/home/table&apos;, component: Table, name: &apos;表格&apos; &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      component: Home,</span><br><span class="line">      name: &apos;导航二&apos;,</span><br><span class="line">      iconCls: &apos;el-icon-setting&apos;,//图标样式class</span><br><span class="line">      children: [</span><br><span class="line">        &#123; path: &apos;/home/setting&apos;, component: Setting, name: &apos;设置&apos; &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Form-vue"><a href="#Form-vue" class="headerlink" title="Form.vue"></a>Form.vue</h2><p>在Home.vue和index.js配置好之后，Form.vue这里需要做的事情比较少，作者这里也只是体验一下，直接用了element里的示例，之后在做修改，具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form :model=&quot;ruleForm&quot;</span><br><span class="line">           :rules=&quot;rules&quot;</span><br><span class="line">           ref=&quot;ruleForm&quot;</span><br><span class="line">           label-width=&quot;100px&quot;</span><br><span class="line">           class=&quot;demo-ruleForm&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动名称&quot;</span><br><span class="line">                  prop=&quot;name&quot;&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;ruleForm.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动区域&quot;</span><br><span class="line">                  prop=&quot;region&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;ruleForm.region&quot;</span><br><span class="line">                 placeholder=&quot;请选择活动区域&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域一&quot;</span><br><span class="line">                   value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域二&quot;</span><br><span class="line">                   value=&quot;beijing&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动时间&quot;</span><br><span class="line">                  required&gt;</span><br><span class="line">      &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;date1&quot;&gt;</span><br><span class="line">          &lt;el-date-picker type=&quot;date&quot;</span><br><span class="line">                          placeholder=&quot;选择日期&quot;</span><br><span class="line">                          v-model=&quot;ruleForm.date1&quot;</span><br><span class="line">                          style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col class=&quot;line&quot;</span><br><span class="line">              :span=&quot;2&quot;&gt;-&lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;date2&quot;&gt;</span><br><span class="line">          &lt;el-time-picker type=&quot;fixed-time&quot;</span><br><span class="line">                          placeholder=&quot;选择时间&quot;</span><br><span class="line">                          v-model=&quot;ruleForm.date2&quot;</span><br><span class="line">                          style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;即时配送&quot;</span><br><span class="line">                  prop=&quot;delivery&quot;&gt;</span><br><span class="line">      &lt;el-switch v-model=&quot;ruleForm.delivery&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动性质&quot;</span><br><span class="line">                  prop=&quot;type&quot;&gt;</span><br><span class="line">      &lt;el-checkbox-group v-model=&quot;ruleForm.type&quot;&gt;</span><br><span class="line">        &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot;</span><br><span class="line">                     name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">        &lt;el-checkbox label=&quot;地推活动&quot;</span><br><span class="line">                     name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">        &lt;el-checkbox label=&quot;线下主题活动&quot;</span><br><span class="line">                     name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">        &lt;el-checkbox label=&quot;单纯品牌曝光&quot;</span><br><span class="line">                     name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">      &lt;/el-checkbox-group&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;特殊资源&quot;</span><br><span class="line">                  prop=&quot;resource&quot;&gt;</span><br><span class="line">      &lt;el-radio-group v-model=&quot;ruleForm.resource&quot;&gt;</span><br><span class="line">        &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">        &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">        &lt;el-radio label=&quot;无&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">      &lt;/el-radio-group&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动形式&quot;</span><br><span class="line">                  prop=&quot;desc&quot;&gt;</span><br><span class="line">      &lt;el-input type=&quot;textarea&quot;</span><br><span class="line">                v-model=&quot;ruleForm.desc&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                 @click=&quot;submitForm(&apos;ruleForm&apos;)&quot;&gt;立即创建&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;resetForm(&apos;ruleForm&apos;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ruleForm: &#123;</span><br><span class="line">        name: &apos;&apos;,</span><br><span class="line">        region: &apos;&apos;,</span><br><span class="line">        date1: &apos;&apos;,</span><br><span class="line">        date2: &apos;&apos;,</span><br><span class="line">        delivery: false,</span><br><span class="line">        type: [],</span><br><span class="line">        resource: &apos;&apos;,</span><br><span class="line">        desc: &apos;&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123; required: true, message: &apos;请输入活动名称&apos;, trigger: &apos;blur&apos; &#125;,</span><br><span class="line">          &#123; min: 3, max: 5, message: &apos;长度在 3 到 5 个字符&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        region: [</span><br><span class="line">          &#123; required: true, message: &apos;请选择活动区域&apos;, trigger: &apos;change&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        date1: [</span><br><span class="line">          &#123; type: &apos;date&apos;, required: true, message: &apos;请选择日期&apos;, trigger: &apos;change&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        date2: [</span><br><span class="line">          &#123; type: &apos;date&apos;, required: true, message: &apos;请选择时间&apos;, trigger: &apos;change&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        type: [</span><br><span class="line">          &#123; type: &apos;array&apos;, required: true, message: &apos;请至少选择一个活动性质&apos;, trigger: &apos;change&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        resource: [</span><br><span class="line">          &#123; required: true, message: &apos;请选择活动资源&apos;, trigger: &apos;change&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        desc: [</span><br><span class="line">          &#123; required: true, message: &apos;请填写活动形式&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          alert(&apos;创建成功!&apos;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&apos;创建失败!!&apos;);</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    resetForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].resetFields();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Table-vue"><a href="#Table-vue" class="headerlink" title="Table.vue"></a>Table.vue</h2><p>这一部分相对Form.vue而言，相对复杂了一些，表格建立还算简单，时间主要用在了“编辑”、“删除”两个按钮的实现以及对应Dialog的弹出的问题上，对于这两项操作需要对表格中单元的位置进行定位，这里用到了scope的相关内容。在“编辑”按钮的弹窗中，由于忘记了<div>标签耽误了大量时间（也没有报错，就是弹窗不出来）；在“删除”按钮中，如果直接点击即删除将获得的行号直接传给deleteRow函数即可，但是这里添加了确认是否删除的Dialog，所以定义了一个全局变量_index，点击按钮执行handleDelete函数，将获取的行数传给_index，同时打开Dialog，在Dialog中再将_index传给deleteRow函数，具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table :data=&quot;tableData&quot;</span><br><span class="line">              border</span><br><span class="line">              style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column fixed</span><br><span class="line">                       prop=&quot;date&quot;</span><br><span class="line">                       label=&quot;日期&quot;</span><br><span class="line">                       width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;el-icon-time&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span style=&quot;margin-left: 10px&quot;&gt;&#123;&#123; scope.row.date &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot;</span><br><span class="line">                       label=&quot;姓名&quot;</span><br><span class="line">                       width=&quot;80&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-popover trigger=&quot;hover&quot;</span><br><span class="line">                      placement=&quot;top&quot;&gt;</span><br><span class="line">            &lt;p&gt;姓名: &#123;&#123; scope.row.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;住址: &#123;&#123; scope.row.address &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;div slot=&quot;reference&quot;</span><br><span class="line">                 class=&quot;name-wrapper&quot;&gt;</span><br><span class="line">              &lt;el-tag size=&quot;medium&quot;&gt;&#123;&#123; scope.row.name &#125;&#125;&lt;/el-tag&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/el-popover&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-table-column prop=&quot;province&quot;</span><br><span class="line">                       label=&quot;省份&quot;</span><br><span class="line">                       width=&quot;60&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;city&quot;</span><br><span class="line">                       label=&quot;市区&quot;</span><br><span class="line">                       width=&quot;80&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;address&quot;</span><br><span class="line">                       label=&quot;地址&quot;</span><br><span class="line">                       width=&quot;300&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;zip&quot;</span><br><span class="line">                       label=&quot;邮编&quot;</span><br><span class="line">                       width=&quot;80&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column fixed=&quot;right&quot;</span><br><span class="line">                       label=&quot;操作&quot;</span><br><span class="line">                       width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button @click=&quot;handleEdit(scope.$index, scope.row)&quot;</span><br><span class="line">                     size=&quot;small&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button @click=&quot;handleDelete(scope.$index,scope.row)&quot;</span><br><span class="line">                     type=&quot;danger&quot;</span><br><span class="line">                     size=&quot;small&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!--删除界面--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;确认&quot;</span><br><span class="line">               :visible.sync=&quot;deleteFormVisible&quot;</span><br><span class="line">               width=&quot;30%&quot;</span><br><span class="line">               :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;确认删除改用户？&lt;/span&gt;</span><br><span class="line">      &lt;span slot=&quot;footer&quot;</span><br><span class="line">            class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;deleteFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                   @click.native.prevent=&quot;deleteRow(_index, tableData)&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--编辑界面--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;编辑&quot;</span><br><span class="line">               :visible.sync=&quot;editFormVisible&quot;</span><br><span class="line">               :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;editForm&quot;</span><br><span class="line">               label-width=&quot;80px&quot;</span><br><span class="line">               :rules=&quot;editFormRules&quot;</span><br><span class="line">               ref=&quot;editForm&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;日期&quot;&gt;</span><br><span class="line">          &lt;el-date-picker type=&quot;date&quot;</span><br><span class="line">                          placeholder=&quot;选择日期&quot;</span><br><span class="line">                          v-model=&quot;editForm.date&quot;&gt;&lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;姓名&quot;</span><br><span class="line">                      prop=&quot;name&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;editForm.name&quot;</span><br><span class="line">                    auto-complete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;省份&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;province&quot;</span><br><span class="line">                    v-model=&quot;editForm.province&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;市区&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;city&quot;</span><br><span class="line">                    v-model=&quot;editForm.city&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;地址&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;address&quot;</span><br><span class="line">                    v-model=&quot;editForm.address&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;邮编&quot;&gt;</span><br><span class="line">          &lt;el-input type=&quot;zip&quot;</span><br><span class="line">                    v-model=&quot;editForm.zip&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot;</span><br><span class="line">           class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click.native=&quot;editFormVisible = false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                   @click=&quot;editFormVisible = false&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleDelete(index, row) &#123;</span><br><span class="line">      this._index = index;</span><br><span class="line">      //console.log(index);</span><br><span class="line">      this.deleteFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleEdit(index, row) &#123;</span><br><span class="line">      this.editFormVisible = true;</span><br><span class="line">      //console.log(index, row);</span><br><span class="line">      //将每一行的数据赋值给Dialog弹框（这里是重点）</span><br><span class="line">      this.editForm = Object.assign(&#123;&#125;, row);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteRow(index, rows) &#123;</span><br><span class="line">      rows.splice(index, 1);</span><br><span class="line">      this.deleteFormVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      _index: &apos;&apos;,</span><br><span class="line">      editFormVisible: false,//编辑界面是否显示</span><br><span class="line">      deleteFormVisible: false,//删除确定界面</span><br><span class="line">      editFormRules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123; required: true, message: &apos;请输入姓名&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      //编辑界面数据</span><br><span class="line">      editForm: &#123;</span><br><span class="line">        name: &apos;&apos;,</span><br><span class="line">        date: &apos;&apos;,</span><br><span class="line">        province: &apos;&apos;,</span><br><span class="line">        city: &apos;&apos;,</span><br><span class="line">        address: &apos;&apos;,</span><br><span class="line">        zip: &apos;&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      tableData: [&#123;</span><br><span class="line">        date: &apos;2016-05-02&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1519 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &apos;2016-05-04&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1518 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &apos;2016-05-01&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1517 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1516 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1515 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1514 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1513 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1512 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        date: &apos;2016-05-03&apos;,</span><br><span class="line">        name: &apos;王小虎&apos;,</span><br><span class="line">        province: &apos;上海&apos;,</span><br><span class="line">        city: &apos;普陀区&apos;,</span><br><span class="line">        address: &apos;上海市普陀区金沙江路 1511 弄&apos;,</span><br><span class="line">        zip: 200333</span><br><span class="line">      &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>文明的滴定</title>
    <url>/2019/03/08/2019-03-08-%E6%96%87%E6%98%8E%E7%9A%84%E6%BB%B4%E5%AE%9A/</url>
    <content><![CDATA[<blockquote>
<p>《文明的滴定》由李约瑟著，张卜天译，商务印书馆出版，在此感谢！<br>注：除<strong>序</strong>外，其余部分均为原作者第一人称</p>
</blockquote>
<p>2019/3/8 18:56:58 </p>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>谈李约瑟的《文明的滴定》，须从其鸿篇巨制《中国的科学与文明》（1954年，<em>Science and Civilisaton in China</em>，缩写SCC）谈起，在这本书首卷的序言中，李约瑟就开宗明义的提出了一串问题，并且在十年后出版的《东西方的科学与社会》一书中，李约瑟将这些问题凝炼为两个：<br>“为什么现在科学没有在中国文明中发展，而只在欧洲发展出来？”、“为什么从公元前1世纪到公元15世纪，在把人类的自然知识应用于人的实际需求方面，中国文明要比西方文明有效的多？”—-这就是“李约瑟问题”。它并不是一个像数学中那样存在定解乃至多解的智力问题，而是一个高度凝练、借以展开宏大叙事的启发式论纲。<br>《文明的滴定》由李约瑟在1944至1966年间陆续发表的八篇论文组成，至于“滴定”一词，原作者本人也给出了清楚交代，它来源于作者的老本行生物化学，用来表达借助分析不同文明在社会或思想中的成分展开宏大叙事的一种历史研究方法或风格。</p>
<h1 id="一、中国科学传统的不足与成就"><a href="#一、中国科学传统的不足与成就" class="headerlink" title="一、中国科学传统的不足与成就"></a>一、中国科学传统的不足与成就</h1><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>先描述一下中国和欧洲传统在自然科学方面的明显差异，再谈谈科学家和工匠在中国古代的社会地位，最后联系哲学、宗教、法律、语言以及具体生产环境和商品交换来探讨科学的某些方面。</p>
<h2 id="传统中国的科技面貌"><a href="#传统中国的科技面貌" class="headerlink" title="传统中国的科技面貌"></a>传统中国的科技面貌</h2><p>在数学、天文学、光学、声学、磁学、地质学、气象学、工程学、军事技术、生物学、医学等各个方面，中国几乎都远远领先于同时期的欧洲。</p>
<h2 id="中国与西方的对比"><a href="#中国与西方的对比" class="headerlink" title="中国与西方的对比"></a>中国与西方的对比</h2><ol>
<li>中国思想家普遍持一种有机论观点，认为现象与现象按照等级秩序彼此关联，而非机械论；</li>
<li>中国数学的思想和做法是代数式的，而非几何式的；</li>
<li>存在着波与粒子的对立；</li>
</ol>
<p>总之，中国人注重实用，不愿重视理论，但这也带来了好处，这也没有影响中国在各个领域的发明创造。</p>
<h2 id="科学家和工匠在传统中国的社会地位"><a href="#科学家和工匠在传统中国的社会地位" class="headerlink" title="科学家和工匠在传统中国的社会地位"></a>科学家和工匠在传统中国的社会地位</h2><p>中国科学，无论是纯粹的还是应用的，都是较为“官方”的。至于社会地位，这很难回答，按照他们的生活史，大致可以分为五类：高级官员；平民；准奴隶；奴隶；小官吏。</p>
<h2 id="封建官僚社会"><a href="#封建官僚社会" class="headerlink" title="封建官僚社会"></a>封建官僚社会</h2><p>在传统中国社会，有些科学是正统的，如天文学、水力学、数学等，这些科学都服务于统治者巩固政权；有些科学是非正统的，如炼丹术，通常道士和隐者才会追求它。</p>
<h2 id="发明与劳动力"><a href="#发明与劳动力" class="headerlink" title="发明与劳动力"></a>发明与劳动力</h2><p>尽管中国似乎有用不尽的劳动力，但这并不妨碍中国人做出一系列“省力”的发明。</p>
<h2 id="哲学和神学的因素"><a href="#哲学和神学的因素" class="headerlink" title="哲学和神学的因素"></a>哲学和神学的因素</h2><p>西方文明认为正如人间的帝王立法者能够颁布法典让人们遵守，天界最高的理性造物者必定也颁布了一系列法典让万物遵守；中国人的世界观则认为万物之所以能够和谐并作，是因为他们都属于一个等级分明的整体，他们服从的乃是自身本性的内在命令。<br>2019/3/9 18:49:14 </p>
<h2 id="语言因素"><a href="#语言因素" class="headerlink" title="语言因素"></a>语言因素</h2><p>通常认为，表意语言是中国发展现代科学的强大阻碍，但我们并不这样认为，中文不但没有构成阻碍，而且富于锦言隽语，适合做最好的哲学思考。</p>
<h2 id="商人的角色"><a href="#商人的角色" class="headerlink" title="商人的角色"></a>商人的角色</h2><p>两千多年的官吏制度使得商人即使拥有大量财富也没有安全保障，只有士大夫阶层才是光明前景。这也决定了中国文化下的商人不可能获得欧洲文艺复兴时期商人在国家中的权势和地位，也就无法发展出商业和工业的资本主义。</p>
<h2 id="新科学在旧世界的起源"><a href="#新科学在旧世界的起源" class="headerlink" title="新科学在旧世界的起源"></a>新科学在旧世界的起源</h2><p>很多观点乃至很多博学的人都片面的认为现代科学乃至科学本身都是欧洲的特色，而且仅仅是欧洲的特色，非欧洲文明的科学不过是技术而已，事实上，应该放弃这些思想上的傲慢，非欧洲文明的高贵和启发性绝不在欧洲文明之下。<br>2019/3/10 10:55:00 </p>
<h1 id="二、科学和中国对世界的影响"><a href="#二、科学和中国对世界的影响" class="headerlink" title="二、科学和中国对世界的影响"></a>二、科学和中国对世界的影响</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>关于中国的“遗产”，必须考虑三种不同的价值：直接有助于产生伽利略式突破的那些东西的价值；后来才合并到现代科学的那些东西的价值；使中国的科学技术和欧洲的科学技术一样值得被赞赏和研究的那些东西的价值。第一条仅限于欧洲，第二条是现代的普遍科学，第三条是全人类。</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>中国的成就并非全是技术方面，也有很多在科学方面，但现在有很多欧洲学者都会选择性的忽视这些。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>中国的火药对世界产生的巨大影响。</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>中国的磁学研究对世界产生的巨大影响。</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>中国的天文坐标、天文仪器、开放的“宇宙论”对世界科学的贡献。</p>
<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>颇具独创性的中国人贡献给世界的一些更平凡实用的技术，如畜力的使用以及马镫、有效挽具、独轮车</p>
<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>中国人对水利的使用以及传送带、龙骨车、曲柄等相关发明。</p>
<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>钢铁技术、造桥和深钻。</p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>航海技术的发明，如船尾舵、纵帆、浆轮船和水密舱。</p>
<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>首先，并非像某些学者的观点一样，中国人没有科学，之所以有这种悖论，是对“科学”的定义出现了混乱，科学不单单指现代科学，古代和中世纪的各个名族都为现代科学的大厦奠定了基础。另外，中国有如此多的发明，可为什么西方还认为中国是“停滞的”，这是由于地理等各方面因素所决定，中国社会有某种自发趋于稳态的倾向，善于自我调节，而欧洲则有一种内在的不稳定性，所以中国一直缓慢而稳定的发展着，但是欧洲由于自己的这种“蠢蠢欲动”，才有了文艺复兴之后指数式的发展。</p>
<h1 id="三、科学与社会变迁"><a href="#三、科学与社会变迁" class="headerlink" title="三、科学与社会变迁"></a>三、科学与社会变迁</h1><h1 id="四、中国古代的科学与社会"><a href="#四、中国古代的科学与社会" class="headerlink" title="四、中国古代的科学与社会"></a>四、中国古代的科学与社会</h1><h1 id="五、论中国科学与技术与社会的关系"><a href="#五、论中国科学与技术与社会的关系" class="headerlink" title="五、论中国科学与技术与社会的关系"></a>五、论中国科学与技术与社会的关系</h1><h1 id="六、东西方的科学与社会"><a href="#六、东西方的科学与社会" class="headerlink" title="六、东西方的科学与社会"></a>六、东西方的科学与社会</h1><p>以上四章针对“李约瑟问题”的回答，从社会方面进行阐述。<br>总体观点：商人阶级掌权以及他们的民主口号是西方现代科学兴起的必要条件。为何商人阶级不能掌权就无法产生科学，李约瑟也承认其“确切关系尚未得到充分阐明，似乎并非所有科学都与商业活动有同样直接的关联”。但他指出，商人需要精确度量，因此与物理学联系特别紧密。此外，只有商人阶级能够打破“理论”与“实践”的对立，将手和脑成功地结合起来。<br>欧洲的资本主义、文艺复兴、宗教改革和现代科学是一体的，中国不存在西方式的封建制度。两千多年的官吏制度使得商人即使拥有大量财富也没有安全保障，只有士大夫阶层才是光明前景。中国文化下的商人不可能获得欧洲文艺复兴时期商人在国家中的权势和地位，也就无法发展出商业和工业的资本主义。<br>在中国，官僚制度导致歧视商人，现代科学之所以没有在中国社会兴起，很可能是因为官僚封建制度有效地阻止了商人阶层掌权或执政。只要“官僚封建制度”没有改变，数学就不可能与经验性的自然观察和实验相结合，从而无法产生某种全新的东西。</p>
<h1 id="七、时间与东方人"><a href="#七、时间与东方人" class="headerlink" title="七、时间与东方人"></a>七、时间与东方人</h1><p>传统自然哲学把时间设想成一格格或一段段的，所以可能更难产生伽利略式的人物把时间均一化为一种抽象的几何坐标、一个可以做数学处理的连续维度。</p>
<h1 id="八、人法与自然法则"><a href="#八、人法与自然法则" class="headerlink" title="八、人法与自然法则"></a>八、人法与自然法则</h1><p>西方文明认为正如人间的帝王立法者能够颁布法典让人们遵守，天界最高的理性造物者必定也颁布了一系列法典让万物遵守；中国人的世界观则认为万物之所以能够和谐并作，是因为他们都属于一个等级分明的整体，他们服从的乃是自身本性的内在命令。</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_1</title>
    <url>/2019/03/03/2019-03-03-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_1/</url>
    <content><![CDATA[<blockquote>
<p>学习过程主要依照中国MOOC<a href="https://www.icourse163.org/learn/ZJU-93001?tid=1003997005#/learn/announce" target="_blank" rel="noopener">课程</a>，感谢MOOC，感谢浙大授课大佬。</p>
</blockquote>
<h1 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h1><p>首先，何为数据结构？官方目前没有统一的定义，但数据结构常和算法结合在一起，“精心选择的数据结构可以带来最优效率的算法”。</p>
<ol>
<li>图书的摆放：解决问题方法的效率，和数据的组织方式有关。</li>
<li>循环与递归：解决问题方法的效率，和空间的利用效率有关。</li>
<li>多项式计算：解决问题方法的效率，和算法的巧妙程度有关。<br>所以，到底什么是数据结构？数据结构是数据在计算机中的组织方式。数据对象必定与一系列加在其上的操作相关联，这些操作就是“算法”。</li>
</ol>
<ul>
<li>抽象数据类型：首先，数据类型包括数据对象集和相关联的操作集，而抽象指的是只描述数据类型的方法而不涉及具体实现，也就是只描述数据集和操作集“是什么”，而不管“如何实现”。</li>
</ul>
<h1 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h1><ul>
<li>一个<strong>有限</strong>指令集</li>
<li>有或没有输入，但<strong>必须有输出</strong></li>
<li>每一条指令有<strong>明确</strong>目标，在计算机<strong>可处理</strong>范围之内<br>算法衡量指标</li>
<li>空间复杂度S(n)</li>
<li>时间复杂度T(n)</li>
</ul>
<p>2019/3/5 10:56:00 </p>
<h1 id="课后编程题"><a href="#课后编程题" class="headerlink" title="课后编程题"></a>课后编程题</h1><h2 id="最大子序列"><a href="#最大子序列" class="headerlink" title="最大子序列"></a>最大子序列</h2><p>第一题只需要给出最大子序列的和，按照授课视频讲的在线处理方法还是比较简单；第二题在此基础上还要求给出最大子序列的首尾元素，作者的想法就是继续按照刚才在线处理的思想，当ThisSum &gt; MaxSum要更新MaxSum时，这时更新last，同时，只要ThisSum没有被重新置为0，说明当前的最大子序列仍在增长，计数的num继续++，最后last的位置减去num也就是first的位置。另外还有一些如全为负数，存在零等情况需要特殊考虑一下，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// MaxSubSum.cpp : 定义控制台应用程序的入口点。</span><br><span class="line">//思想：在线处理</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int K;//输入序列长度</span><br><span class="line">	int num = 0;//最大子序列元素个数统计</span><br><span class="line">	int temp = 0;//负数元素统计</span><br><span class="line">	int first=0,last = 0;//最大子序列起始、结尾序号</span><br><span class="line">	int L[100000];</span><br><span class="line">	int ThisSum=0, MaxSum= 0 ;</span><br><span class="line">	cin &gt;&gt; K;</span><br><span class="line">	for (int i=0; i &lt; K; i++)</span><br><span class="line">		cin &gt;&gt; L[i];</span><br><span class="line">	for (int i = 0; i &lt; K; i++) &#123;</span><br><span class="line">		if (L[i] &lt; 0) temp++;</span><br><span class="line">	&#125;</span><br><span class="line">	if (temp == K) </span><br><span class="line">		printf(&quot;%d %d %d&quot;, 0, L[0], L[K-1]);</span><br><span class="line">	else&#123;</span><br><span class="line">		for (int i = 0; i &lt; K; i++) &#123;</span><br><span class="line">			ThisSum += L[i];</span><br><span class="line">			if (ThisSum &gt; MaxSum) &#123;</span><br><span class="line">				MaxSum = ThisSum;</span><br><span class="line">				last = L[i];</span><br><span class="line">				num += 1;</span><br><span class="line">				first = L[i - num + 1];</span><br><span class="line">			&#125;</span><br><span class="line">			else if (ThisSum &lt;= MaxSum &amp;&amp; ThisSum &gt;= 0) &#123;</span><br><span class="line">				num += 1;</span><br><span class="line">			&#125;</span><br><span class="line">			else if (ThisSum &lt; 0) &#123;</span><br><span class="line">				ThisSum = 0;</span><br><span class="line">				num = 0;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%d %d %d&quot;, MaxSum, first, last);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>这道题已经给出了其他代码，只需要写一个二分查找的函数，由于函数给出的是链表，所以在写的时候绕了一些弯子，这里不表，注意学习一下链表的相关内容，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Position BinarySearch(List Tbl, ElementType K) &#123;</span><br><span class="line">	int left;</span><br><span class="line">	int right;</span><br><span class="line">	if (Tbl-&gt;Last) &#123;</span><br><span class="line">		left = 1;</span><br><span class="line">		right = Tbl-&gt;Last; </span><br><span class="line">		while(left &lt;= right) &#123;</span><br><span class="line">			if (K == Tbl-&gt;Data[(left + right) / 2])</span><br><span class="line">				return (left + right) / 2;</span><br><span class="line">			else &#123;</span><br><span class="line">				if (K &lt; Tbl-&gt;Data[(left + right) / 2])</span><br><span class="line">					right = (left + right) / 2 - 1;</span><br><span class="line">				else </span><br><span class="line">					left = (left + right) / 2 + 1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return NotFound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_5</title>
    <url>/2019/03/02/2019-03-02-JavaScript%E5%88%9D%E6%8E%A2_5/</url>
    <content><![CDATA[<blockquote>
<p>本文主要参考这里：<a href="https://blog.csdn.net/qq_39009348/article/details/81411432#commentsedit" target="_blank" rel="noopener">参考地址</a>，感谢博主。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新增内容包括两部分：</p>
<ol>
<li>登陆成功之后进入home页面，home页面有注销按钮可回到第一页；</li>
<li>登陆页面新增验证码功能</li>
</ol>
<h1 id="注销按钮"><a href="#注销按钮" class="headerlink" title="注销按钮"></a>注销按钮</h1><h2 id="Home-vue"><a href="#Home-vue" class="headerlink" title="Home.vue"></a>Home.vue</h2><p>由于要新增加页面，和之前一样，在src/components下新增Home.vue，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-row type=&quot;flex&quot;</span><br><span class="line">            justify=&quot;center&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;2&quot;&gt;</span><br><span class="line">        &lt;el-popover placement=&quot;top&quot;</span><br><span class="line">                    width=&quot;160&quot;</span><br><span class="line">                    v-model=&quot;visible&quot;&gt;</span><br><span class="line">          &lt;p&gt;确定注销并退出吗？&lt;/p&gt;</span><br><span class="line">          &lt;div style=&quot;text-align: right; margin: 0&quot;&gt;</span><br><span class="line">            &lt;el-button size=&quot;mini&quot;</span><br><span class="line">                       type=&quot;text&quot;</span><br><span class="line">                       @click=&quot;visible = false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                       size=&quot;mini&quot;</span><br><span class="line">                       @click=&quot;logout&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;el-button slot=&quot;reference&quot;&gt;注销&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-popover&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    logout() &#123;</span><br><span class="line">      this.$router.replace(&apos;/&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      visible: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此页相对简单，只增加了一个注销按钮，并且点击会有Popover弹出框，在element有示例，这里就不具体展开讲了。</p>
<p>具体效果：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/%E6%B3%A8%E9%94%80.JPG" alt="注销界面"></p>
<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>验证码这一功能增加过程相对复杂，也比较费时间，最先开始参考了一个最普通的验证码形式，但始终弄不好，后来找到了上述博客，讲解比较详细，经过改动（原博主用到了较为复杂的表单验证，我这里删减了一部分），最后得以实现，首先新建了一个Identify.vue，主要作用是绘制验证码生成图片，具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;s-canvas&quot;&gt;</span><br><span class="line">    &lt;canvas id=&quot;s-canvas&quot;</span><br><span class="line">            :width=&quot;contentWidth&quot;</span><br><span class="line">            :height=&quot;contentHeight&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;SIdentify&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    identifyCode: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;1234&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    fontSizeMin: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 16</span><br><span class="line">    &#125;,</span><br><span class="line">    fontSizeMax: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 40</span><br><span class="line">    &#125;,</span><br><span class="line">    backgroundColorMin: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 180</span><br><span class="line">    &#125;,</span><br><span class="line">    backgroundColorMax: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 240</span><br><span class="line">    &#125;,</span><br><span class="line">    colorMin: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 50</span><br><span class="line">    &#125;,</span><br><span class="line">    colorMax: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 160</span><br><span class="line">    &#125;,</span><br><span class="line">    lineColorMin: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 40</span><br><span class="line">    &#125;,</span><br><span class="line">    lineColorMax: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 180</span><br><span class="line">    &#125;,</span><br><span class="line">    dotColorMin: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    dotColorMax: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 255</span><br><span class="line">    &#125;,</span><br><span class="line">    contentWidth: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 112</span><br><span class="line">    &#125;,</span><br><span class="line">    contentHeight: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 38</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 生成一个随机数</span><br><span class="line">    randomNum(min, max) &#123;</span><br><span class="line">      return Math.floor(Math.random() * (max - min) + min)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 生成一个随机的颜色</span><br><span class="line">    randomColor(min, max) &#123;</span><br><span class="line">      var r = this.randomNum(min, max)</span><br><span class="line">      var g = this.randomNum(min, max)</span><br><span class="line">      var b = this.randomNum(min, max)</span><br><span class="line">      return &apos;rgb(&apos; + r + &apos;,&apos; + g + &apos;,&apos; + b + &apos;)&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPic() &#123;</span><br><span class="line">      var canvas = document.getElementById(&apos;s-canvas&apos;)</span><br><span class="line">      var ctx = canvas.getContext(&apos;2d&apos;)</span><br><span class="line">      ctx.textBaseline = &apos;bottom&apos;</span><br><span class="line">      // 绘制背景</span><br><span class="line">      ctx.fillStyle = this.randomColor(</span><br><span class="line">        this.backgroundColorMin,</span><br><span class="line">        this.backgroundColorMax</span><br><span class="line">      )</span><br><span class="line">      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight)</span><br><span class="line">      // 绘制文字</span><br><span class="line">      for (let i = 0; i &lt; this.identifyCode.length; i++) &#123;</span><br><span class="line">        this.drawText(ctx, this.identifyCode[i], i)</span><br><span class="line">      &#125;</span><br><span class="line">      this.drawLine(ctx)</span><br><span class="line">      this.drawDot(ctx)</span><br><span class="line">    &#125;,</span><br><span class="line">    drawText(ctx, txt, i) &#123;</span><br><span class="line">      ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax)</span><br><span class="line">      ctx.font =</span><br><span class="line">        this.randomNum(this.fontSizeMin, this.fontSizeMax) + &apos;px SimHei&apos;</span><br><span class="line">      var x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1))</span><br><span class="line">      var y = this.randomNum(this.fontSizeMax, this.contentHeight - 5)</span><br><span class="line">      var deg = this.randomNum(-45, 45)</span><br><span class="line">      // 修改坐标原点和旋转角度</span><br><span class="line">      ctx.translate(x, y)</span><br><span class="line">      ctx.rotate(deg * Math.PI / 180)</span><br><span class="line">      ctx.fillText(txt, 0, 0)</span><br><span class="line">      // 恢复坐标原点和旋转角度</span><br><span class="line">      ctx.rotate(-deg * Math.PI / 180)</span><br><span class="line">      ctx.translate(-x, -y)</span><br><span class="line">    &#125;,</span><br><span class="line">    drawLine(ctx) &#123;</span><br><span class="line">      // 绘制干扰线</span><br><span class="line">      for (let i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">        ctx.strokeStyle = this.randomColor(</span><br><span class="line">          this.lineColorMin,</span><br><span class="line">          this.lineColorMax</span><br><span class="line">        )</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.moveTo(</span><br><span class="line">          this.randomNum(0, this.contentWidth),</span><br><span class="line">          this.randomNum(0, this.contentHeight)</span><br><span class="line">        )</span><br><span class="line">        ctx.lineTo(</span><br><span class="line">          this.randomNum(0, this.contentWidth),</span><br><span class="line">          this.randomNum(0, this.contentHeight)</span><br><span class="line">        )</span><br><span class="line">        ctx.stroke()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    drawDot(ctx) &#123;</span><br><span class="line">      // 绘制干扰点</span><br><span class="line">      for (let i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">        ctx.fillStyle = this.randomColor(0, 255)</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.arc(</span><br><span class="line">          this.randomNum(0, this.contentWidth),</span><br><span class="line">          this.randomNum(0, this.contentHeight),</span><br><span class="line">          1,</span><br><span class="line">          0,</span><br><span class="line">          2 * Math.PI</span><br><span class="line">        )</span><br><span class="line">        ctx.fill()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    identifyCode() &#123;</span><br><span class="line">      this.drawPic()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.drawPic()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>Login.vue同样进行了比较大的修改，最后具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login_content1 &quot;&gt;</span><br><span class="line">    &lt;el-row type=&quot;flex&quot;</span><br><span class="line">            justify=&quot;center&quot;&gt;</span><br><span class="line">      &lt;el-form ref=&quot;loginForm&quot;</span><br><span class="line">               :model=&quot;user&quot;</span><br><span class="line">               :rules=&quot;loginRules&quot;</span><br><span class="line">               status-icon</span><br><span class="line">               label-width=&quot;80px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户名&quot;</span><br><span class="line">                      prop=&quot;name&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;密码&quot;</span><br><span class="line">                      prop=&quot;pass&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.pass&quot;</span><br><span class="line">                    type=&quot;password&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;验证码&quot;</span><br><span class="line">                      prop=&quot;verifycode&quot;&gt;</span><br><span class="line">          &lt;!-- 注意：prop与input绑定的值一定要一致，否则验证规则中的value会报undefined，因为value即为绑定的input输入值 --&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.verifycode&quot;</span><br><span class="line">                    placeholder=&quot;请输入验证码&quot;</span><br><span class="line">                    class=&quot;identifyinput&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;div class=&quot;identifybox&quot;&gt;</span><br><span class="line">            &lt;div @click=&quot;refreshCode&quot;&gt;</span><br><span class="line">              &lt;s-identify :identifyCode=&quot;identifyCode&quot;&gt;&lt;/s-identify&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;el-button @click=&quot;refreshCode&quot;</span><br><span class="line">                       type=&apos;text&apos;</span><br><span class="line">                       class=&quot;textbtn&quot;&gt;看不清，换一张&lt;/el-button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                     icon=&quot;el-icon-upload&quot;</span><br><span class="line">                     @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SIdentify from &apos;@/components/identify.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    SIdentify</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 验证码初始化</span><br><span class="line">    this.identifyCode = &apos;&apos;</span><br><span class="line">    this.makeCode(this.identifyCodes, 4)</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$refs.loginForm.validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          if (this.user.name === &apos;admin&apos; &amp;&amp; this.user.pass === &apos;123&apos;) &#123;</span><br><span class="line">            this.$notify(&#123;</span><br><span class="line">              type: &apos;success&apos;,</span><br><span class="line">              message: &apos;欢迎你,&apos; + this.user.name + &apos;!&apos;,</span><br><span class="line">              duration: 3000</span><br><span class="line">            &#125;)</span><br><span class="line">            this.$router.replace(&apos;/home&apos;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              type: &apos;error&apos;,</span><br><span class="line">              message: &apos;用户名或密码错误&apos;,</span><br><span class="line">              showClose: true</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 生成随机数</span><br><span class="line">    randomNum(min, max) &#123;</span><br><span class="line">      return Math.floor(Math.random() * (max - min) + min)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 切换验证码</span><br><span class="line">    refreshCode() &#123;</span><br><span class="line">      this.identifyCode = &apos;&apos;</span><br><span class="line">      this.makeCode(this.identifyCodes, 4)</span><br><span class="line">    &#125;,</span><br><span class="line">    makeCode(o, l) &#123;</span><br><span class="line">      for (let i = 0; i &lt; l; i++) &#123;</span><br><span class="line">        this.identifyCode += this.identifyCodes[</span><br><span class="line">          this.randomNum(0, this.identifyCodes.length)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(this.identifyCode)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    // 验证码自定义验证规则</span><br><span class="line">    const validateVerifycode = (rule, value, callback) =&gt; &#123;</span><br><span class="line">      if (value === &apos;&apos;) &#123;</span><br><span class="line">        callback(new Error(&apos;验证码不能为空&apos;))</span><br><span class="line">      &#125; else if (value !== this.identifyCode) &#123;</span><br><span class="line">        console.log(&apos;validateVerifycode:&apos;, value)</span><br><span class="line">        callback(new Error(&apos;验证码不正确!&apos;))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        callback()</span><br><span class="line">        console.log(&apos;validateVerifycode:&apos;, value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      fontstyle: &#123;&#125;,</span><br><span class="line">      checked: false,</span><br><span class="line">      identifyCodes: &apos;1234567890&apos;,</span><br><span class="line">      identifyCode: &apos;&apos;,</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      loginRules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123; required: true, message: &apos;用户名不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        pass: [</span><br><span class="line">          &#123; required: true, message: &apos;密码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        verifycode: [</span><br><span class="line">          &#123; required: true, trigger: &apos;blur&apos;, validator: validateVerifycode &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>具体效果：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Login3.JPG" alt="验证码登陆"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_4</title>
    <url>/2019/03/01/2019-03-01-JavaScript%E5%88%9D%E6%8E%A2_4/</url>
    <content><![CDATA[<blockquote>
<p>本文主要参考这里：<a href="https://blog.csdn.net/sps900608/article/details/79502171" target="_blank" rel="noopener">参考地址</a>，感谢博主。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Element组件安装配置完成之后，就可以开始利用它来美化界面了。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Main-vue"><a href="#Main-vue" class="headerlink" title="Main.vue"></a>Main.vue</h2><p>主界面怎么改进一下呢？突发奇想，可以参考平时安装软件，做一个协议，只有同意协议才可以进入登陆界面，最初的想法是界面上加一个文本框，文本框内有协议内容，下边有两个Radio单选框，最后使用的方案是只有一个多选框Checkbox，后边有文字按钮，弹出Dialog对话框，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-row type=&quot;flex&quot;</span><br><span class="line">            justify=&quot;center&quot;</span><br><span class="line">            align=&quot;middle&quot;</span><br><span class="line">            style=&quot;margin-top:100px;margin-bottom:80px&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;5&quot;&gt;</span><br><span class="line">        &lt;div&gt;使用规定&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;4&quot;&gt;</span><br><span class="line">        &lt;el-checkbox v-model=&quot;checked&quot;&gt;我已知晓并同意相关协议。&lt;/el-checkbox&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;text&quot;</span><br><span class="line">                   @click=&quot;dialogVisible = true&quot;&gt;阅读协议&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-dialog title=&quot;协议&quot;</span><br><span class="line">                 :visible.sync=&quot;dialogVisible&quot;</span><br><span class="line">                 width=&quot;30%&quot;</span><br><span class="line">                 :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">        &lt;span&gt;这是一段协议&lt;br&gt;&lt;/br&gt;</span><br><span class="line">          aaaaaaaaaa&lt;br&gt;</span><br><span class="line">          bbbbbbbbb&lt;br&gt;</span><br><span class="line">          ccccccccc&lt;br&gt;&lt;/br&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span slot=&quot;footer&quot;</span><br><span class="line">              class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                     @click=&quot;dialogVisible = false&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-row type=&quot;flex&quot;</span><br><span class="line">            justify=&quot;center&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;2&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                   @click=&quot;login&quot;</span><br><span class="line">                   plain</span><br><span class="line">                   :disabled=&quot;!checked&quot;&gt;点此登陆&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$router.replace(&apos;/login&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClose(done) &#123;</span><br><span class="line">      this.$confirm(&apos;确认关闭？&apos;)</span><br><span class="line">        .then(_ =&gt; &#123;</span><br><span class="line">          done();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(_ =&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      checked: false,</span><br><span class="line">      dialogVisible: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>主要用到的几项：</p>
<ul>
<li>Layout布局-分栏间隔（主要控制了一行中几列之间的左右位置）</li>
<li>Checkbox多选框-禁用状态（利用了Checkbox中checked这个变量来控制“点击登陆”按钮的状态，checkbox不选中时v-model绑定的值，即checked，是其默认值false；选中时v-model绑定的值，即checked，是true，而“点击登陆”按钮的禁用指令为disabled=”!checked”）</li>
<li>Button按钮-基础用法/文字按钮（“点击登陆”按钮以及“阅读协议”按钮）</li>
<li>Dialog对话框-基本用法（弹出协议框以及确认关闭框）</li>
</ul>
<p>具体效果：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Main2.JPG" alt="主界面2"></p>
<h2 id="Login-vue"><a href="#Login-vue" class="headerlink" title="Login.vue"></a>Login.vue</h2><p>Login界面相对于之前而言主要是增加了登陆成功的限制条件，如用户名密码不为空且正确（这里只是存了一组）；增加了用户名密码错误的提示框；增加了登陆成功的欢迎提示框等，具体代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row type=&quot;flex&quot;</span><br><span class="line">          justify=&quot;center&quot;&gt;</span><br><span class="line">    &lt;el-form ref=&quot;loginForm&quot;</span><br><span class="line">             :model=&quot;user&quot;</span><br><span class="line">             :rules=&quot;rules&quot;</span><br><span class="line">             status-icon</span><br><span class="line">             label-width=&quot;80px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户名&quot;</span><br><span class="line">                    prop=&quot;name&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;user.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;密码&quot;</span><br><span class="line">                    prop=&quot;pass&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;user.pass&quot;</span><br><span class="line">                  type=&quot;password&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot;</span><br><span class="line">                   icon=&quot;el-icon-upload&quot;</span><br><span class="line">                   @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$refs.loginForm.validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          if (this.user.name === &apos;admin&apos; &amp;&amp; this.user.pass === &apos;123&apos;) &#123;</span><br><span class="line">            this.$notify(&#123;</span><br><span class="line">              type: &apos;success&apos;,</span><br><span class="line">              message: &apos;欢迎你,&apos; + this.user.name + &apos;!&apos;,</span><br><span class="line">              duration: 3000</span><br><span class="line">            &#125;)</span><br><span class="line">            this.$router.replace(&apos;/&apos;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              type: &apos;error&apos;,</span><br><span class="line">              message: &apos;用户名或密码错误&apos;,</span><br><span class="line">              showClose: true</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123; required: true, message: &apos;用户名不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        pass: [</span><br><span class="line">          &#123; required: true, message: &apos;密码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>具体效果：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Login2.JPG" alt="用户名密码错误"><br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Login_welcome.JPG" alt="登陆成功欢迎"></p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_3</title>
    <url>/2019/02/28/2019-02-28-JavaScript%E5%88%9D%E6%8E%A2_3/</url>
    <content><![CDATA[<blockquote>
<p>本文主要参考这里：<a href="https://blog.csdn.net/sps900608/article/details/79489544" target="_blank" rel="noopener">参考地址</a>，感谢博主。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://gsynf.github.io/2019/02/27/JavaScript%E5%88%9D%E6%8E%A2_2/">上一篇博客</a>中通过“麻将”的实例已经简单了解了vue工程中helloword.vue的结构以及部分vue指令，那么从这篇博客开始，将进行一些小模块的实现，首先是登陆界面的制作。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>新建工程已经讲过，这里需要说明一点的是，由于这里制作登陆界面，登陆跳转需要用到路由功能，也就是vue-router，为了后续不用再手动添加，所以在创建工程时候这一项就设为yes。</p>
<h2 id="添加vue"><a href="#添加vue" class="headerlink" title="添加vue"></a>添加vue</h2><p>在src/components目录下新建两个.vue文件，分别起名为Main.vue和Login.vue，分别用于制作主页面和跳转后的登陆页面。</p>
<h2 id="修改index-js"><a href="#修改index-js" class="headerlink" title="修改index.js"></a>修改index.js</h2><p>在src/router目录下修改index.js文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">//import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class="line">import Main from &apos;@/components/Main.vue&apos;</span><br><span class="line">import Login from &apos;@/components/Login.vue&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)   //注册vue-router</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    /*&#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;HelloWorld&apos;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,*/</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;Main&apos;,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/login&apos;,</span><br><span class="line">      name: &apos;Login&apos;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>主要是注销掉工程自带的helloworld相关内容，改为新建的Main和Login相关页面。这样路由就设置好了，再在main.js中引入路由即可（原main.js已引入，故这里无需更改）。</p>
<h2 id="修改vue"><a href="#修改vue" class="headerlink" title="修改vue"></a>修改vue</h2><p>接下来就是修改界面，其实也就是对三个.vue文件的操作，分别为：</p>
<blockquote>
<p>App.vue</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Main.vue</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;主页面&lt;/h1&gt; 欢迎!&lt;b @click=&quot;login&quot;&gt;点这里登录&lt;/b&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$router.replace(&apos;/login&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Login.vue</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;登录界面&lt;/h1&gt; 用户名：&lt;Input /&gt;&lt;br /&gt; 密码：&lt;Input /&gt;&lt;br /&gt; &lt;button @click=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$router.replace(&apos;/&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>保存运行之后可以看到如下界面：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Main1.JPG" alt="主页面"><br>点击黑色粗体字，可跳转到如下页面：<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/Login1.JPG" alt="登陆界面"><br>点击登陆按钮，可跳转回主页面，所以初步实现了页面的跳转。<br>注意一下两个页面的url，可以发现这个和index.js中的设置有关。</p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>实现了上述跳转功能，但是很明显，页面特点一个字：丑。<br>如何变好看呢？需要用到一个UI框架，Element。</p>
<h2 id="安装Element"><a href="#安装Element" class="headerlink" title="安装Element"></a>安装Element</h2><p>安装指导<a href="http://element-cn.eleme.io/#/zh-CN/component/installation" target="_blank" rel="noopener">Element官网</a>有说明文档，可以参考，但作者建的工程和官网稍有不同，故有些地方有所不同，请自行参考，并且element的使用教程官网也很详细，建议参考。</p>
<ul>
<li>在工程目录下cnpm安装，命令为<br>  <code>npm i element-ui -S</code></li>
<li>在src目录下新建element文件夹，文件夹内新建index.js文件，文件内代码引入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//注意这里的代码和官网的有不同</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import ElementUI from &apos;element-ui&apos;;</span><br><span class="line">import &apos;../../node_modules/element-ui/lib/theme-chalk/index.css&apos;;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>
<ul>
<li>在main.js引入<br>  <code>import &#39;./element&#39;</code></li>
</ul>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_2</title>
    <url>/2019/02/27/2019-02-27-JavaScript%E5%88%9D%E6%8E%A2_2/</url>
    <content><![CDATA[<blockquote>
<p>本文主要参考这里：<a href="https://www.cnblogs.com/rik28/p/6024425.html" target="_blank" rel="noopener">参考地址</a>，感谢博主。</p>
<p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">廖雪峰</a>这里讲JavaScript讲的很详细，长期学习可参考。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，应该弄清楚vue到底是什么，其实，Vue.js是一个目前应用很广的JavaScript MVVM库，以数据驱动和组件化的思维构建。那么什么是MVVM呢？MVVM是Model-View-ViewModel的简称，由微软最先提出，它借鉴了桌面应用程序的MVC思想，在前端页面中，把Model用纯JavaScript对象表示，View负责显示，两者做到了最大限度的分离。把Model和View关联起来的就是ViewModel。ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。<strong>ViewModel是Vue.js的核心，它是一个Vue实例。使用Vue的过程就是定义MVVM各个组成部分的过程的过程。</strong>这里不展开多讲，以后在使用过程中会逐渐清晰这个概念。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="先来感受一下"><a href="#先来感受一下" class="headerlink" title="先来感受一下"></a>先来感受一下</h2><p>为了更好的理解，可以先来感受一下实例。<a href="https://gsynf.github.io/2019/02/26/JavaScript%E5%88%9D%E6%8E%A2/">上一篇博客</a>中已经介绍了如何新建一个vue工程，当时已经新建了一个firstVue的工程，我们在VS Code中将整个文件夹加载，修改页面所要进行的工作主要在src–&gt;components–&gt;helloworld.vue中进行。<br>可以打开helloworld.vue看一下，主要分为三部分：template、script、style。这三部分分别有各自的功能，template，这是html部分，用来显示；script，类似js，用来做一些数据绑定和方法；style，就是css部分，用来定义html中元素的样式尺寸大小之类的。（胖丫告我的，有误概不负责）</p>
<blockquote>
<p>此处实例参考：<a href="https://blog.csdn.net/Lisunlight/article/details/81221017" target="_blank" rel="noopener">戳</a>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--表单的增删和修改--&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;caption&gt;麻将&lt;/caption&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;条&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;筒&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;万&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">      &lt;tr v-for=&quot;(mj,index) in mjs&quot;&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;mj.tiao&quot; v-if=&quot;edi===index&quot;&gt;</span><br><span class="line">          &lt;span v-else&gt;&#123;&#123;mj.tiao&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;mj.tong&quot; v-if=&quot;edi===index&quot;&gt;</span><br><span class="line">          &lt;span v-else&gt;&#123;&#123;mj.tong&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;mj.wan&quot; v-if=&quot;edi===index&quot;&gt;</span><br><span class="line">          &lt;span v-else&gt;&#123;&#123;mj.wan&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button @click=&quot;mod(index)&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;save(index)&quot;&gt;确定&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">      &lt;tfoot&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot;&gt;</span><br><span class="line">          &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;submit&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tfoot&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;HelloWorld&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        edi:&apos;&apos;,</span><br><span class="line">        mjs: [</span><br><span class="line">          &#123;tiao:&apos;一条&apos;,tong:&apos;一筒&apos;,wan:&apos;壹万&apos;&#125;,</span><br><span class="line">          &#123;tiao:&apos;二条&apos;,tong:&apos;二筒&apos;,wan:&apos;贰万&apos;&#125;,</span><br><span class="line">          &#123;tiao:&apos;三条&apos;,tong:&apos;三筒&apos;,wan:&apos;叁万&apos;&#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      mod:function(index)&#123;</span><br><span class="line">        this.edi=index;</span><br><span class="line">      &#125;,</span><br><span class="line">      del: function (index) &#123;</span><br><span class="line">        this.mjs.splice(index, 1);</span><br><span class="line">      &#125;,</span><br><span class="line">      save:function(index)&#123;</span><br><span class="line">        this.edi=!index;</span><br><span class="line">      &#125;,</span><br><span class="line">      add:function()&#123;</span><br><span class="line">        this.mjs.push(&#123;tiao:&apos;&apos;,tong:&apos;&apos;,wan:&apos;&apos;&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      submit:function () &#123;</span><br><span class="line">        this.edi=&apos;&apos;;</span><br><span class="line">        console.log(JSON.stringify(this.mjs))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  input&#123;</span><br><span class="line">    border:none;</span><br><span class="line">    width:150px;</span><br><span class="line">  &#125;</span><br><span class="line">  table&#123;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  border:1px solid black</span><br><span class="line">  &#125;</span><br><span class="line">  td&#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height:30px;</span><br><span class="line">    border:1px solid black</span><br><span class="line">  &#125;</span><br><span class="line">  button&#123;</span><br><span class="line">    border: none;</span><br><span class="line">    background-color:deepskyblue;</span><br><span class="line">    color:white;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>结合上边实例的代码，学习一些vue指令。</p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>首先出现的指令是v-for指令，v-for指令其实就是遍历，基本语法：<br>v-for=”item in items”,items是一个数组，item是当前被遍历的数组元素。</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>v-if是条件渲染指令，根据条件的真假来删除或者插入元素，基本语法：<br>v-if=”expression”,expression是一个返回bool值的表达式，表达式可以是一个bool属性，也可以是一个返回bool的运算式。</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show指令也是条件渲染指令，和v-if不同点在于它的元素始终会被渲染到html，只是简单的为元素设置CSS的style类型，若条件为false，元素会被设置了style=”display:none”样式。</p>
<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面,否则它不能被识别。<br>v-else元素是否渲染在HTML中，取决于前面使用的是v-if还是v-show指令。这段代码中v-if为true，后面的v-else不会渲染到HTML；v-show为true，但是后面的v-else仍然渲染到HTML。</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>v-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：v-bind:class,基本语法：<br>v-bind:argument=”expression”</p>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听a元素的点击事件：<br>    <code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code><br>有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。</p>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>Vue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;a href=&quot;javascripit:void(0)&quot; v-bind:class=&quot;activeNumber === n + 1 ? &apos;active&apos; : &apos;&apos;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;!--缩写语法--&gt;</span><br><span class="line">&lt;a href=&quot;javascripit:void(0)&quot; :class=&quot;activeNumber=== n + 1 ? &apos;active&apos; : &apos;&apos;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;!--缩写语法--&gt;</span><br><span class="line">&lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p><em>tips：</em><br>补充几点JavaScript和其他语言相比，比较特殊的地方：</p>
<ol>
<li><strong>Number</strong><br>JavaScript不区分整数和浮点数，统一用Number表示。<br>需要注意一下的是NaN(Not a Number，当无法计算结果时用NaN表示)这个特殊的Number与所有其他值都不相等，包括它自己：<br> <code>NaN === NaN; // false</code></li>
<li><strong>相等运算符</strong><br>JavaScript在设计时，有两种比较运算符：<br>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。<br>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。</li>
<li><strong>变量申明</strong><br>变量在JavaScript中就是用一个变量名表示，申明一个变量用var语句。需要注意的是如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量，为了防止出现混乱，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。<br>启用strict模式的方法是在JavaScript代码的第一行写上：<br> <code>&#39;use strict&#39;;</code></li>
<li><strong>字符串</strong><br>字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：<pre><code>var s = &apos;Test&apos;;
s[0] = &apos;X&apos;;
alert(s); // s仍然为&apos;Test&apos;</code></pre></li>
</ol>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript初探_1</title>
    <url>/2019/02/26/2019-02-26-JavaScript%E5%88%9D%E6%8E%A2_1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，感谢<a href="https://github.com/liuqiangh" target="_blank" rel="noopener">小胖丫</a>对我的帮助，毕竟是将来要赚钱养我的女人~</p>
<h1 id="开始JavaScript探索之路了！"><a href="#开始JavaScript探索之路了！" class="headerlink" title="开始JavaScript探索之路了！"></a>开始JavaScript探索之路了！</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装node,vue及git,其中node及git需要下载安装文件进行安装,之前已经装过，此处不加赘述，vue可以在命令行中进行安装，具体参考这里，<a href="https://segmentfault.com/a/1190000009871504/" target="_blank" rel="noopener">戳戳戳</a>，按照步骤一步一步的来即可，cmd中一直保持运行，这样就可以实时查看自己修改效果。</p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>编辑器使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>，其中注意为了保证代码格式规范，将文件夹中.eslintrc.js中进行修改，改为如下：</p>
<pre><code>module.exports = {
  &quot;extends&quot;: &quot;standard&quot;
      };</code></pre><p>2019/2/27 15:13:33 一切太过顺利意味着什么？意味着终究要返工。不知道什么神奇的原因，昨天的工程今天再运行就报错<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/eslint--error.png" alt="报错截图"><br>关于eslint的，万般无奈之下就删了工程重新建了一次，之间是在建工程时候就选择了添加eslint，所以这次决定先不选，建好之后运行，是可以的。那么接下来添加eslint，首先在VS Code中搜索添加控件，这个是没问题的，接下来在cmd中添加全局eslint，</p>
<ol>
<li><code>npm install eslint -g</code>这一步是没有问题的；</li>
<li><code>eslint --init</code>哇，这一步真的是一言难尽，别人运行完都是这样的<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/eslint--init.png" alt="eslint--init"><br>而我第一个问题就和别人不一样<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/eslint--init_1.JPG" alt="eslint--init_1"><br>还真是奇葩，全网都没找到同意问题的，翻墙终于找到一个，但也没说每个问题怎么选：<a href="https://dev.to/iamdammak/setting-up-eslint-in-your-javascript-project-with-vs-code-2amf" target="_blank" rel="noopener">戳</a>。既然找不到，那索性按(X)感(J)觉(B)选，到了最后<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/eslint--install_1.png" alt="npm install 出现 error"><br>好吧，重来一次，这次选no，好嘛，直接退了，不过文件夹中已经有了eslintrc.js了，不管了，打开，再把那三行粘进去，再运行一下，可以，OK，那就（假装）没问题了，以后有情况，我还会回来的，希望不要了。。。<br>另外，在编辑器左下角点击齿轮-设置-右上角{}，添加如下代码，同意是为了保证代码缩进等规范。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    //使用eslint规则重新格式化代码</span><br><span class="line">    &quot;eslint.enable&quot;: false,</span><br><span class="line">    &quot;eslint.autoFixOnSave&quot;: true,</span><br><span class="line">    &quot;eslint.validate&quot;: [</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;javascriptreact&quot;,</span><br><span class="line">        &quot;html&quot;,</span><br><span class="line">        &quot;vue&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;eslint.options&quot;: &#123;</span><br><span class="line">        &quot;plugins&quot;: [</span><br><span class="line">            &quot;html&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //关闭自动文件自动存储</span><br><span class="line">    &quot;files.autoSave&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;vetur.validation.template&quot;: false,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatterOptions&quot;: &#123;</span><br><span class="line">        &quot;js-beautify-html&quot;: &#123;</span><br><span class="line">            &quot;wrap_attributes&quot;: &quot;force-aligned&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    //为了符合eslint的两个空格间隔原则</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;git.autofetch&quot;: true,</span><br><span class="line">    &quot;window.zoomLevel&quot;: 0,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>下一次将具体阐述vue进阶学习，<a href="https://www.cnblogs.com/rik28/p/6024425.html" target="_blank" rel="noopener">学习参考</a>。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkdownPad试用</title>
    <url>/2019/02/25/2019-02-25-MarkdownPad%E8%AF%95%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>正所谓前人栽树，后人乘凉。</p>
<p>感谢<a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">BY</a>提供的博客模板</p>
<p><a href="https://www.jianshu.com/p/e68fba58f75c" target="_blank" rel="noopener">博客搭建参考戳这里</a></p>
<p><a href="https://gsynf.github.io/">这是我的博客主页，欢迎访问留言</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尽管参照了博客模板，但在改动过程中仍出现了不少问题，例如界面的改动、评论系统的设置等等，目前博客大致框架已经搭好，所以准备写一些零碎的东西，有空的话将之前CSDN的博客迁移过来。</p>
<p>废话不多说了，开始进入正文。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要做的就是Markdown文件的编写，之前在CSDN上使用的网页版很好，可是和简书一样，都没有办法保存到本地，所以需要一款称心的本地编辑器。首先尝试了小书匠，可是没有办法实时预览，所以最后还是选择了windows下最方便强大的<a href="http://markdownpad.com/download.html" target="_blank" rel="noopener">MarkdownPad</a></p>
<h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>全功能需要破解，在安装完成打开时：<br><img src="https://i.imgur.com/4XONEDR.png" alt=""><br>账户：<code>Soar360@live.com</code></p>
<p>密钥：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure>

<h2 id="修改中文"><a href="#修改中文" class="headerlink" title="修改中文"></a>修改中文</h2><p>工具栏Tool-Options-Editor即可。</p>
<h2 id="无法渲染"><a href="#无法渲染" class="headerlink" title="无法渲染"></a>无法渲染</h2><p>安装完成之后，在win10环境下容易出现无法渲染html，也就是无法实时预览，系统崩溃的情况，这一点官网的FAQ中给出了<a href="http://markdownpad.com/faq.html#livepreview-directx" target="_blank" rel="noopener">解决方案</a>。需要安装Awesomium 1.6.6 SDK，点击下载安装之后重启电脑即可。<br><img src="https://raw.githubusercontent.com/Gsynf/BlogImg/master/markdown_crashed.JPG" alt="下载地址"></p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>安装GLPK</title>
    <url>/2018/12/12/2018-12-12-%E5%AE%89%E8%A3%85GLPK/</url>
    <content><![CDATA[<p>写卜老师算法关于LP部分作业，需要用到GLPK，简单安装一下，需要用到VS环境，网上教程比较简单，但是我之前安装VS2017社区版，按照通用教程安装时候，在修改vs安装包下VC路径时一直出问题，弄了挺久一直不行，无奈重装了VS2015，这里简单记录一下过程。</p>
<ul>
<li><p>下载GLPK，<a href="http://ftp.gnu.org/gnu/glpk/" target="_blank" rel="noopener">点这里</a>，下载tar.gz文件即可，下载后解压即可</p>
</li>
<li><p>解压后打开文件夹，进入w64（视自己系统而定），由于我安装的时VS2015，所以修改两个文件Build_GLPK_with_VC14.bat/Build_GLPK_with_VC14_DLL.bat，将其中home地址都改为VS安装包中VC路径，然后双击运行这两个文件即可。<br><img src="https://img-blog.csdnimg.cn/20181212152258673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODY2NjYx,size_16,color_FFFFFF,t_70" alt="这是我的"></p>
</li>
<li><p>判断是否安装成功两种方法：<br>1，运行结果出现OPTIMAL LP SOLUTION FOUND字样<br>2，在w64文件夹中新增加了glpk.lib和glpsol.exe两个文件</p>
</li>
<li><p>此时已经安装成功，但是每次运行都要进入w64这个文件夹，所以配置一下glpsol.exe环境变量<br><img src="https://img-blog.csdnimg.cn/20181212152754771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODY2NjYx,size_16,color_FFFFFF,t_70" alt="配置环境变量">图片参考：<a href="https://blog.csdn.net/flygeda/article/details/78743810?utm_source=blogxgwz6" target="_blank" rel="noopener">https://blog.csdn.net/flygeda/article/details/78743810?utm_source=blogxgwz6</a></p>
</li>
<li><p>使用<br>cmd在命令行使用<br>使用命令：glpsol -m test.mod -o test.sol<br>test.mod 是写好的代求解的文件<br>test.sol 是生成的结果文件</p>
</li>
</ul>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>GLPK</tag>
      </tags>
  </entry>
  <entry>
    <title>《跟老齐学python》学习笔记4</title>
    <url>/2018/09/26/2018-10-28-%E3%80%8A%E8%B7%9F%E8%80%81%E9%BD%90%E5%AD%A6python%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<ul>
<li>全局变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = 2</span><br><span class="line">def funcx():</span><br><span class="line">x = 9</span><br><span class="line">print &quot;this x is in the funcx:--&gt;&quot;, x</span><br><span class="line">funcx()</span><br><span class="line">print &quot;--------------------------&quot;</span><br><span class="line">print &quot;this x is out of funcx:--&gt;&quot;, x</span><br></pre></td></tr></table></figure>
输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this x is in the funcx:--&gt; 9</span><br><span class="line">--------------------------</span><br><span class="line">this x is out of funcx:--&gt; 2</span><br></pre></td></tr></table></figure>
<p>在函数内多了一个global x,这句话的意思是在声明x是全局变量,也就是说这个x跟函数外面的那个x是同一个,接下来通过x=9将x的引用对象变成了9</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = 2</span><br><span class="line">def funcx():</span><br><span class="line">global x</span><br><span class="line">#跟上面函数的不同之处</span><br><span class="line">x = 9</span><br><span class="line">print &quot;this x is in the funcx:--&gt;&quot;, x</span><br><span class="line">funcx()</span><br><span class="line">print &quot;--------------------------&quot;</span><br><span class="line">print &quot;this x is out of funcx:--&gt;&quot;,x</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this x is in the funcx:--&gt; 9</span><br><span class="line">--------------------------</span><br><span class="line">this x is out of funcx:--&gt; 9</span><br></pre></td></tr></table></figure>

<ul>
<li>当函数的参数个数不确定的时候，可以通过如下方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(x,*arg):</span><br><span class="line">    print(x)</span><br><span class="line">    result = x</span><br><span class="line">    print(arg)</span><br><span class="line">    for i in arg:</span><br><span class="line">        result += i</span><br><span class="line">    return result</span><br><span class="line">print(func(1,2,3,4,5,6,7,8,9))</span><br></pre></td></tr></table></figure>
结果为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">(2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line">45</span><br></pre></td></tr></table></figure>
<p>从上面例子可以看出,如果输入的参数个数不确定,其他参数全部通过*arg,以元组的形式由arg收集起来。</p>
<ul>
<li>更优（zhuang）雅（b）的方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def add(x, y):</span><br><span class="line">...</span><br><span class="line">return x + y</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bars = (2, 3)</span><br><span class="line">&gt;&gt;&gt; add(*bars)</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>先把要传的值放到元组中,赋值给一个变量bars,然后用add(<em>bars)的方式,把值传到函数内。注意,元组中元素的个数要跟函数所要求的变量个数一致。使用一个星号</em>,以元组形式传值,用**的方式,是以字典的形式传值。</p>
<ul>
<li>几个特殊函数，filter、map、reduce、lambda、yield……</li>
<li>函数尽量达到的要求<br>1 尽量不要使用全局变量。<br>2 如果参数是可变类型数据,则在函数内不要修改它。<br>3 每个函数的功能和目标要单纯,不要试图一个函数做很多事情。<br>4 函数的代码行数尽量少。<br>5 函数的独立性越强越好,不要跟其他的外部东西产生关联。</li>
</ul>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《跟老齐学python》学习笔记3</title>
    <url>/2018/09/26/2018-09-26-%E3%80%8A%E8%B7%9F%E8%80%81%E9%BD%90%E5%AD%A6python%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<ul>
<li><p>Python开发者有意让违反了缩排规则的程序不能通过编译，以此来强迫程序员养成良好的编程习惯。并且Python语言利用缩排表示语句块的开始和结束（Off-side规则），而非使用花括号或者某种关键词。增加缩排表示语句块的开始，而减少缩排则表示语句块的结束。<br>哈哈哈，有趣。<br>两个必需的要求：1、必须要通过缩进方式来表示语句块的开始和结束。2、缩进用四个空格（也是必需的，别的方式或许也可以，但不提倡）。</p>
</li>
<li><p>zip()函数：它的参数必须是某种序列数据类型，如果是字典，那么视为序列。然后将序列对应的元素依次组成元组，并单做列表中的元素。</p>
</li>
<li><p>在python2和3中，print默认最后输出换行，如果输出不想换行，在2中 print xxx ,  加一个逗号即可，但在3中python为一个函数，加逗号就不可行，这里需要添加一个end，end表示字符串结尾添加什么字符</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; hello=&quot;world&quot;</span><br><span class="line">&gt;&gt;&gt; for i in hello:</span><br><span class="line">	print(i)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; for i in hello:</span><br><span class="line">	print(i),</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">w</span><br><span class="line">(None,)</span><br><span class="line">o</span><br><span class="line">(None,)</span><br><span class="line">r</span><br><span class="line">(None,)</span><br><span class="line">l</span><br><span class="line">(None,)</span><br><span class="line">d</span><br><span class="line">(None,)</span><br><span class="line">&gt;&gt;&gt; for i in hello:</span><br><span class="line">	print(i,)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; for i in hello:</span><br><span class="line">	print(i,end=&quot;&quot;)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<ul>
<li>两个值对调，其他语言都是引入一个第三个变量，即</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp</span><br></pre></td></tr></table></figure>
<p>python里简直不要太方便，直接a,b=b,a即可。</p>
<ul>
<li>range函数返回值需要用list来显示，python3中range（）返回的就是一个对象，但2中返回的就是一个列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; range(3,100,3)</span><br><span class="line">range(3, 100, 3)</span><br><span class="line">&gt;&gt;&gt; list(range(3,100,3))</span><br><span class="line">[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]</span><br></pre></td></tr></table></figure>


<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda环境安装</title>
    <url>/2018/09/25/2018-09-25-Anaconda%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>中秋浪完回来，得弄CCF大赛了，需要跑数据，首先搭平台，决定在linux下搞整一把。</p>
</blockquote>
<p>#Anaconda</p>
<ol>
<li>首先，安装anaconda,<a href="https://www.anaconda.com/download/#download" target="_blank" rel="noopener">Anaconda 5.2 For Linux Installer</a>，安装3.6版本，点击下载即可。</li>
<li>找到自己下载的目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后一直点击Enter键，然后一直yes</li>
</ol>
<p><img src="https://i.loli.net/2019/07/19/5d31603c2245e47668.png" alt=""></p>
<p>直到出现这张图片，这里可以更改安装目录，Enter选择默认即可，在home/user下</p>
<ol start="4">
<li>安装完成之后电脑重启，在终端输入 anaconda，即可看到安装成功，命令conda list可查看安装的所有包</li>
</ol>
<p>#Pycharm<br>接下来，安装pycharm，懒得破解，安装一个社区版就行了，够用，同样去官网找即可，<a href="http://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="noopener">Pycharm Linux</a>，下载完成之后解压，在bin文件夹下运行 <code>sh pycharm.sh &amp;</code>即可，打开之后在工具栏tools里可以添加desktop快捷方式，回到桌面在搜索里搜到右键“添加到收藏栏“即可。</p>
<p>从群里找到了大神写的一个脚本，用pycharm打开脚本之后除了改改字体大小之外首先需要修改环境：fils–&gt;setting–&gt;project pywork–&gt;project interpreter，可以看到此时默认的是pytharm安装的python环境，由于没有什么包，所以需要换刚才安装的anaconda里的python环境，点击齿轮修改即可，大神用到了ligthgbm,需要添加包，在anaconda里添加包即可，ligthgbm官网找到了添加的终端命令：<code>conda install -c conda-forge lightgbm</code>，OK搞定。</p>
<p>#Xgboost<br>在anaconda下安装xgboost</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install libgcc</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install xgboost</span><br></pre></td></tr></table></figure>


<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《跟老齐学python》学习笔记2</title>
    <url>/2018/09/05/2018-09-05-%E3%80%8A%E8%B7%9F%E8%80%81%E9%BD%90%E5%AD%A6python%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<p>第一季第一章第六节主要讲述了字符编码的问题，Python2中还有这个问题，但3中几乎不涉及这个问题了，所以这里不多做笔记，仔细看一看，对以前ASCII，Unicode等编码有不错的理解，挺好的。<br>额外记录一点：如果对文件操作,打开文件的时候,最好用codecs.open替代open</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import codecs</span><br><span class="line">codecs.open(&apos;filename&apos;, encoding=&apos;utf8&apos;)</span><br></pre></td></tr></table></figure>
<p>第七节：列表</p>
<ul>
<li>列表list同int,float,str一样，也是python的一种对象类型。</li>
<li>list用[]表示，这同其他语言的数组类似，但是数组中的元素必须是同一种类型，因为数组需要提前声明，说明数组类型，但列表不用，所以里面的元素可以是不同类型。</li>
<li>列表和字符串两种类型都属于序列(都是一些对象按照某个次序排列起来,这是序列的最大特征)</li>
<li>“反转”函数，示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst=[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; list(reversed(lst))</span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure>

<ul>
<li>关于迭代，看完一次有些不懂，建议再看，其实就目前而言，还无法理解迭代和extend函数之间的关系，我对于迭代有待以后更加深入，除了文章中给出的使用函数查看，还可以用“for 元素 in 对象： printf 元素”来检验，如果可以打印出来，那么对象就是可迭代的，不过文章中示例可以看出str类型的对象是不可迭代的，不过通过实验发现是可以迭代的，不知道是文章的错误还是python 2 和3之间的区别。</li>
<li>1.7和1.8 主要讲了列表的一些操作函数，例如反转、插入、删除等以及对于这么函数，列表和字符串的相同和不同，说实话，函数太多具体用法记不住，只能先过一遍，知道有这么个函数，可以实现什么功能，到具体用的时候再来仔细查看。<br>第九节：元组</li>
<li>1.9介绍了一个新的概念：元组。元组是用圆括号括起来的，元素之间用逗号隔开。</li>
</ul>
<p>| 对比 | 字符串 | 列表|元组<br>| ————- |————-| —–|<br>| 是否是序列 | 是 | 是  |是<br>| 元素是否可改 | 否 | 是  |否<br>| 元素类型 |非任意 | 任意 | 任意</p>
<p>######特别提醒，如果一个元组中只有一个元素，应该在该元素后面加一个半角的英文逗号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a=1</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; a=(1)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; a=(1,)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure>
<p>第十节：字典</p>
<ul>
<li>1.10介绍了新概念，字典(dict)。在一个字典中,键是唯一的,不能重复，必须是不可变对象。值则对应于键,且值可以重复。建立字典有三种方法，具体见p123。其中最后一种为使用{}.fromkeys</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person=&#123;&#125;.fromkeys((&quot;one&quot;,&quot;two&quot;),&quot;hpf&quot;)</span><br><span class="line">&gt;&gt;&gt; person</span><br><span class="line">&#123;&apos;one&apos;: &apos;hpf&apos;, &apos;two&apos;: &apos;hpf&apos;&#125;</span><br></pre></td></tr></table></figure>
<p>这里不同的键对应同一个值，如何不同的键对应不同的值呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person=&#123;&#125;.fromkeys((&quot;one&quot;,&quot;two&quot;),(&quot;hpf&quot;,&quot;lqh&quot;))</span><br><span class="line">&gt;&gt;&gt; person</span><br><span class="line">&#123;&apos;one&apos;: (&apos;hpf&apos;, &apos;lqh&apos;), &apos;two&apos;: (&apos;hpf&apos;, &apos;lqh&apos;)&#125;</span><br></pre></td></tr></table></figure>
<p>呃，也不是<br>查了一下，貌似是不可以的<br>类似键值对这种映射方式的数据存储方式十分高效，例如使用列表，python需要从头开始读，直到找到制定的索引值；但是使用字典便不需要，直接通过“键”来找到值，数据规模越大，这种优势越明显，因此也广泛应用于数据库中。</p>
<ul>
<li>Python中的copy为浅拷贝，如何理解浅拷贝。简单讲python只存储基本数据对象，如int、str等，这些对象在复制时，会新建一个内存地址，但是对于其他数据类型，在复制时并不会新辟地址。如果在复制时想全部新建地址，就需要“深复制”，需要导入一个模块，import copy，使用copy.deepcopy进行复制。</li>
<li>对于一个字典</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a=&#123;&quot;name&quot;:&quot;hpf&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; del a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#42&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    a</span><br><span class="line">NameError: name &apos;a&apos; is not defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>clear为清空，del为删除。<br>第十一节  集合<br>哇，感觉开学之后每天很紧张，好几天没有看老齐了，心中有愧呐，数据库课前看一波</p>
<ul>
<li>集合（set），特点：有的可变，有的不可变；元素无顺序，不可重复</li>
<li>可通过set（）创建，或者通过{}直接创建（不提倡，有时会和字典搞混）</li>
<li>set()创建的是可变的集合，用frozenset()创建的是不可变的集合，也就是可哈希的</li>
<li>其他的交并补等运算自己看</li>
</ul>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《跟老齐学python》学习笔记1</title>
    <url>/2018/09/03/2018-09-03-%E3%80%8A%E8%B7%9F%E8%80%81%E9%BD%90%E5%AD%A6python%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<blockquote>
<p>哈哈哈，前言太有趣，不得不说正是前言才让我选择继续跟着他学。</p>
</blockquote>
<ul>
<li>Ubuntu18.04.1版本默认是安装了Python3，没有装2，那我也不装喽，貌似2已经不怎么维护了。<br>（PS：查看版本号命令  lsb_release  -a）</li>
<li>Python2中print不是一个函数；Python3中print是一个函数，同样输出“Hello World”，2是print   “Hello, World”；3是print   （”Hello, World”）</li>
<li>Python中一个对象的特征：身份，类型，值。所谓“身份”，其实就是对象的内存地址，可以通过内建函数id()查看；所谓“类型”，也就是整形、浮点型这些，可以通过内建函数type()查看；所谓“值”，就是对象本身喽。</li>
<li>Python2中非浮点数准备的有int和long类型，长整型后边会有L；Python3中只有一种整数类型int。</li>
<li>在Python2里面有一个规定,像2/5这样的除法要取整(就是去掉小数,但不是四舍五入)。2除以5,商是0(整数),余数是2(整数)。如果用这种形式:2/5,那么计算结果就是商那个整数。或者可以理解为:整数除以整数,结果是整数(商)。2计算2/5，结果为0；3计算2/5，结果为0.4.</li>
<li>字符串，用单引号或者双引号。但是如果字符串中有单引号或双引号，这时再用相同的符号就会报错，所以有单用双，有双用单；另外还可以在字符串的引号前加一个转义符，使本来计算机不认为是字符串一部分的引号变为字符串一部分，转义符为\，例如&gt;&gt;&gt; ‘What&#39;s your name?’。</li>
<li>由r开头引起的字符串就是声明了后面引号里的东西是原始字符串,在里面放任何字符都表示该字符的原始含义。例如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dos = r&quot;c:\news&quot;</span><br><span class="line">&gt;&gt;&gt; print dos</span><br><span class="line">c:\news   #这里\n没有表示转义字符换行，而是按照原始格式打印</span><br></pre></td></tr></table></figure>

<ul>
<li>发现一个比较有趣的东东</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a=input(&quot;input your old:&quot;)</span><br><span class="line">input your old:12</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; b=print(12)</span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &apos;NoneType&apos;&gt;</span><br></pre></td></tr></table></figure>


<p> 貌似input的值都是str类型，于是想试一下print，后来发现没法这么试，input函数是把键盘输入的值赋给了a，但print函数很显然并不是把要打印的值赋给b，但 b=print(12)没有报错，所以这句话表示什么呢？有些疑问</p>
<ul>
<li>有一个编写小对话的示例，才发现IDLE一直没用，一直在终端里进python3输命令，在终端输idle，显示未安装，按照提示安装即可。安装完成回到终端，输入idle即可打开，在shell里新建窗口就可以写代码啦。</li>
<li>在leetcode上第一题两数之和看到了index，查了也没完全弄明白，今天看到了，恍然大悟</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a=&quot;study&quot;</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">&apos;s&apos;</span><br><span class="line">&gt;&gt;&gt; a.index(&quot;y&quot;)</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>不用解释了，一看就明白了</p>
<ul>
<li>有时候字符串的拼接使用join函数更加便捷</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b=&quot;I.love.lqh&quot;</span><br><span class="line">&gt;&gt;&gt; c=b.split(&quot;.&quot;)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&apos;I&apos;, &apos;love&apos;, &apos;lqh&apos;]</span><br><span class="line">&gt;&gt;&gt; &quot;.&quot;.join(c)</span><br><span class="line">&apos;I.love.lqh&apos;</span><br></pre></td></tr></table></figure>

<ul>
<li>python中占位符与后边实际输出的内容通过%连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;  print(&quot;i like %s&quot;,&quot;python&quot;)</span><br><span class="line">SyntaxError: unexpected indent</span><br><span class="line">&gt;&gt;&gt; print(&quot;i like %s&quot;%&quot;python&quot;)</span><br><span class="line">i like python</span><br></pre></td></tr></table></figure>
<p>另外还有一种python推荐的格式化方法string.format()，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;I love &#123;0&#125; since &#123;1&#125; years ago.&quot;.format(&quot;lqh&quot;,7))</span><br><span class="line">I love lqh since 7 years ago.</span><br></pre></td></tr></table></figure>
<p>按0，1，2……的顺序（PS：{}里面甚至可以不是标号，写什么都可以）用{}标好占位符，字符串后边.format()写入要输出的内容即可，嘿嘿嘿，美滋滋。</p>
<p>以上。</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统安装</title>
    <url>/2018/09/02/2018-09-02-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>最近打算装个双系统，其实也没有想好具体要做什么，只是觉得学python也方便，以后搞其他开发也方便。绕过了不少坑，在此记录一下。</p>
</blockquote>
<ol>
<li>当然，第一步先从官网下Ubuntu的ISO镜像文件，哇，经历了昨天的网速，今天图书馆的网速简直就是飞起；</li>
<li>下一个小工具<a href="http://rufus.akeo.ie/" target="_blank" rel="noopener">Rufus</a>，准备一个格式化好的U盘；</li>
<li>制作U盘启动盘，注意分区类型选择GPT，目标系统类型为UEFI（非CSM），其他默认就好，文件系统和簇大小不同电脑默认可能会有不同（我和马大姐的就不一样），按照自己的默认就好，之后开始制作即可；</li>
<li>制作过程中给电脑进行分区，可以用电脑自带的磁盘管理，可以下一个分区助手，我这里规划了60个G，电脑自带的只能分出相邻的区，如果要每个盘都割一点出来，最好下一个分区助手；</li>
<li>制作完成之后点击关闭，不要拔出U盘，电脑重启，重启过程中不停按F12进入boot(不同电脑按键可能不同)，选择自己插入的U盘，Enter;</li>
<li>整个安装过程比较简单，唯一需要注意的是在安装类型，选择“其他选项”，在这里对系统进行分区，即将刚才在WINDOWS划分出的60个G进行分配，我的划分为ext4      /     30G;ext4    /home    20G;交换分区swap    8G;efi   启动器  2G；</li>
<li>这里看你创建的“/boot”分区的编号是什么，比如我的是“sda11”（你的不一定是这个，取决于你的“/boot”分区编号）。那么下边的“安装启动引导区的设备”下拉菜单中选择“sda11”，如果这步忽略了，那就是用ubuntu来引导windows了；</li>
<li>之后也就没啥了，用户名，设备名称，密码这些。</li>
</ol>
<p>直到安装完成也没想清楚Ubuntu系统到底要干啥，中午回去看了会《跟老齐学python》，感觉廷不错的，正好书中是以LINUX为例，岂不美哉。不过稍有遗憾的是他主要讲的是Python2，python3就靠自己摸索啦，推荐刷题，领扣就不错<a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">领扣</a></p>
<p>开始吧，骚年！</p>
<p><strong><em>注</em></strong>：转载文章请注明出处，谢谢~</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>柔术最大的谎言「译」</title>
    <url>/2018/01/04/2018-01-04-%E6%9F%94%E6%9C%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E8%B0%8E%E8%A8%80%E3%80%8C%E8%AF%91%E3%80%8D/</url>
    <content><![CDATA[<blockquote>
<p>译自 <a href="http://www.jiujitsubrotherhood.com/the-biggest-lie-in-jiu-jitsu/" target="_blank" rel="noopener">《THE BIGGEST LIE IN JIU JITSU》</a></p>
</blockquote>
<p><img src="http://mjrnxewya3t1in23ybpwjw59.wpengine.netdna-cdn.com/wp-content/uploads/buchecha-marcus-almeida-roger-gracie.jpg" alt="Marcus&#39;Buchecha&#39;Almeida - 现任IBJJF绝对冠军。这家伙很坚强，相信我！图片由BJJ Pix的William Burkhardt提供  。"></p>
<p>最近我看到了一个让我捧腹的柔术笑话。</p>
<p>“柔术的技术是无敌的！”</p>
<p>你可能不想听听下面的内容，但是作为一名柔术教练，我的工作是与你分享我认为的真理，而不是虚假的谎言。所以在这里与你们分享我的见解：</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>技术不是无敌的</li>
<li>我的见解</li>
<li>一个假设</li>
<li>真实的例子</li>
<li>这个神话是从哪里来的？</li>
<li>好消息</li>
<li>如何变得更强</li>
<li>你该怎么做</li>
</ul>
<h2 id="技术不是无敌的"><a href="#技术不是无敌的" class="headerlink" title="技术不是无敌的"></a>技术不是无敌的</h2><p>基础运动能力，特别是力量，对柔术的表现起着巨大的作用，而且往往可以克服技巧。尽管你被告知了卓越的技术并不总是能克服体型和力量优势。但在我看来，力量和技术一样重要。</p>
<h2 id="我的见解"><a href="#我的见解" class="headerlink" title="我的见解"></a>我的见解</h2><p>我练习巴西柔术将近二十年，已经是一个黑带了。我认为自己是一个技术顶尖的柔术运动员，我致力于使自己的技术动作更加高效和精准。</p>
<p>但是这里有个小秘密：有时候，我会利用力量强行完成一个柔术动作。我并不常这样做，但我明白力量对于柔术的重要性，并且它可以更好的帮助我完成动作，我已经认识到这样做是正确的。</p>
<p>我的脑袋中仍然有一种“无力游戏”的想法，那就是我技术非常优秀，以至于我不需要出力就可以降服对手。但我知道这只是我的一个天真的想法。</p>
<p>是的，世界顶尖的柔术运动员毫无疑问都拥有顶尖的柔术技术。但是，他们无一例外都是非常强壮的人。由于先天的遗传和后天科学的训练，这些家伙拥有不可思议的力量和体格。</p>
<p>我的经验得出的这个等式适用与大多数情况：</p>
<blockquote>
<p><strong>运动员A（中等技术 + 上等身体素质） &gt;  运动员B（上等技术 + 下等身体素质）</strong></p>
</blockquote>
<h3 id="一个假设"><a href="#一个假设" class="headerlink" title="一个假设"></a>一个假设</h3><p>我知道你还不相信我，所以我会用一个例子来说明我的观点。让我们来看看使用两个战士 Steve 和 JoJo 的假想情景。</p>
<h4 id="Steve"><a href="#Steve" class="headerlink" title="Steve:"></a>Steve:</h4><p>Steve 5岁开始学习柔术，由马塞洛·加西亚，拉法·门德斯和瑞克森·格雷西执教。它学会了他们所有的技巧，并且吸收了他们所有关于压力，时间和人体力学的智慧。他在接下来的13年里每周训练6天。</p>
<p>18岁，体重200磅的 Steve 击败了所有对手取得了 <a href="https://en.wikipedia.org/wiki/International_Brazilian_Jiu-Jitsu_Federation" target="_blank" rel="noopener">IBJJF（国际巴西柔术联合会</a>）世界锦标赛的棕色带中量级冠军，并且立即被授予黑带。第二年，在对战拥有绝对黑带实力的 Buchecha（开头照片中的人）的决赛中，用了一个飞身十字固在13秒内降服了他。</p>
<h4 id="JoJo："><a href="#JoJo：" class="headerlink" title="JoJo："></a>JoJo：</h4><p>JoJo 是一个10岁的银背大猩猩。他体重400磅。他从未接受过柔术或其他武术的训练。</p>
<h4 id="一决胜负："><a href="#一决胜负：" class="headerlink" title="一决胜负："></a>一决胜负：</h4><p>假设 JoJo 与 Steve 展开一场柔术规则的比赛。</p>
<p>你认为谁会赢得这场比赛？如果你认为 Steve 会用他的“无敌技巧”击败 JoJo，那么你就是妄想。（此外，你可以用 <a href="https://en.wikipedia.org/wiki/Dim_Mak_Records" target="_blank" rel="noopener">点穴</a> 试试~）</p>
<p>JoJo 的<strong>体格</strong>与<strong>力量</strong>优势根本无法用技术来克服。</p>
<p><img src="http://mjrnxewya3t1in23ybpwjw59.wpengine.netdna-cdn.com/wp-content/uploads/gorilla.jpg" alt="你可以知道世界上所有的柔术运动，但是你不会打败JoJo。"></p>
<h3 id="真实的例子"><a href="#真实的例子" class="headerlink" title="真实的例子"></a>真实的例子</h3><p>好吧，上面的例子非常不切实际，根本不会发生。但是，我可以举一些我身边的例子：</p>
<h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1:"></a>例子1:</h4><p>在2013年，我亲眼目睹了世界冠军中，一位黑带女性与体重相同的紫色带男性的比赛，他们在一个开放的垫子上打成一片。这个女人一点机会都没有。她在6分钟内拍垫近十次。</p>
<p>那么现在是因为“女人不擅长柔术”还是因为“男人比女人好”呢？当然不是。这只是一个简单的力量问题。这位男性拥有更高的睾酮水平，因此拥有更强大的结缔组织和更多的肌肉。</p>
<h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2:"></a>例子2:</h4><p>我有一个朋友身高 1.95m，重达 300磅（136kg），是一个前NCAA中后卫球员。同时他也是柔术棕色腰带。他可以（而且经常）很容易地只用一只手臂将我从地面上抬起。当我们滚动时他绝对砸我，这时候基本上我是无能为力的。</p>
<p>这是否因为他的技术比我好？当然不是。我的训练的时间比他更长，训练频率和强度要高得多。这是因为他比我更高，更大，更强壮。</p>
<h4 id="例子3"><a href="#例子3" class="headerlink" title="例子3:"></a>例子3:</h4><p>我的正常体重大约是203磅（92kg）。有时，由于各种原因，包括力量训练计划，肌酸周期或假日过度放纵，可能会高达218甚至220磅。</p>
<p>因为我一直在垫子上呆着，所以我可以敏锐的察觉到体重对于柔术的影响。我可以直接告诉你：你越重，对抗越轻松。我可以更轻松的控制体重较轻的对手，并且能对抗更长的时间。</p>
<h3 id="这个神话是从哪里来的？"><a href="#这个神话是从哪里来的？" class="headerlink" title="这个神话是从哪里来的？"></a>这个神话是从哪里来的？</h3><h4 id="传统武术的胡扯"><a href="#传统武术的胡扯" class="headerlink" title="传统武术的胡扯"></a>传统武术的胡扯</h4><p>这个误解也是传统武术的骗人的精髓所在。告诉一个弱小的人学习了某种武术，他就轻松可以击败比他高大，更强壮的坏人。</p>
<p>在20世纪，一个巨大的产业就建立在这个基础之上，各种乱七八糟的武术系统被包装并推给了好骗的西方人。尽管MMA中的柔术技术帮助清除了许多武术的骗局，但现在仍然受到影响。</p>
<h4 id="柔术课的结构"><a href="#柔术课的结构" class="headerlink" title="柔术课的结构"></a>柔术课的结构</h4><p>还有一部分原因是由于柔术学院商业模式的本质。虽然柔术比赛竞争激烈，但是现在的柔术学院通常还只是围绕着<code>技术动作</code>和<code>实战对抗</code>这两个方面进行教学和训练。因此，早期的先驱者重视身体训练，这是有道理的。</p>
<p>乔治·圣皮埃尔的教练Firhas Zahabi曾经对我说过。“随着柔术学院商业化的推广，我们看到了很多必要的体能训练消失了。”他说的对，在绝大多数的柔术学院中，体能训练并不被重视。当然，你也可以做一些跳跃俯卧撑和俯卧撑作为热身的一部分，但这还远远不够。看看拳击手和摔跤手。体能训练往往是他们训练的最重要的组成部分，而对抗往往是花时间最小的一个。</p>
<h4 id="罗伊斯·格雷斯-与-UFC"><a href="#罗伊斯·格雷斯-与-UFC" class="headerlink" title="罗伊斯·格雷斯 与 UFC"></a>罗伊斯·格雷斯 与 UFC</h4><p>罗伊斯·格雷西（Royce Gracie）在 UFC 早期的比赛中的惊人表现导致了一些人相信技术确实是无敌的。在我看来，罗伊斯赢了，因为他打的比赛看起来像这样：</p>
<blockquote>
<p><strong>斗士A（中等属性+强大的技术）&gt; 斗士B（伟大的属性+没有技术）</strong></p>
</blockquote>
<p>由于第二代 MMA 斗士的的属性已经改变，因为家伙们已经开始学习柔术了。比赛开始更像这样：</p>
<blockquote>
<p><strong>斗士A（中等属性+强大技术）≥ 斗士B（强大属性+一点点技巧）</strong></p>
</blockquote>
<p>在如今的 MMA 比赛中，我们经常看到的情况是这样的：</p>
<blockquote>
<p><strong>斗士A（卓越的属性+伟大的技术）&gt; 斗士B（伟大的属性+伟大的技术）</strong></p>
</blockquote>
<h4 id="杠杠原理的迷惑"><a href="#杠杠原理的迷惑" class="headerlink" title="杠杠原理的迷惑"></a>杠杠原理的迷惑</h4><p>杠杠原理能成倍加强力量，但不是力量的来源。当然，杠杠原理能帮你能更有效的利用力量，但没有力量来源，这个杠杠力也不复存在。这就是‘柔术’中‘杠杠原理’这个概念的迷惑性。</p>
<p>尽管可能会有人告诉你，没有人能为柔术添加杠杠作用。但是一些聪明的运动员及教练确实能够准确的找到杠杠的支点，并且使用的力量来完成动作，效果惊人。</p>
<h3 id="好消息"><a href="#好消息" class="headerlink" title="好消息"></a>好消息</h3><p>好消息是就算你只进行柔术对抗训练也能自然而然的提升你的体能，尽管这个提升有局限性并且基因决定了你的体能极限（抱歉，就是这样），而通过科学而且集中体能训练可以大幅度提升你的体能。</p>
<p>同时，体型小的训练者并不是总是处于劣势。相对力量会随着体型的增加而减小。所以假设其他条件相同的情况下，一个体重比你大20%的对手，力量并不会比你大20%，通常这个值会是12%~15%。这就意味着那些拥有惊人身体的小个子训练者通常会扳平体型的劣势，有时候甚至还会反超。</p>
<p>最后一个就是力量的增长也会随着年龄的增长而称下降的趋势，并在年老的时候就维持不变了。“人的力量就是这么真实”。</p>
<h3 id="如何变得更强"><a href="#如何变得更强" class="headerlink" title="如何变得更强"></a>如何变得更强</h3><h4 id="检查你的激素水平"><a href="#检查你的激素水平" class="headerlink" title="检查你的激素水平"></a>检查你的激素水平</h4><p>如果你是一个男性柔术运动员，我建议你去内分泌专家那检查你的激素水平。如果你的睾丸酮激素水平过低，不管你如何训练，你的身体素质都不会有较大的提升。一个好医生会建议你使用多种补剂和药品来解决这个问题。</p>
<h4 id="体操"><a href="#体操" class="headerlink" title="体操"></a>体操</h4><p>总体来说，拥有了功能性力量与身体控制能力，你将很难被击败。如果让我在力量训练之外再挑选一个最为柔术的赋值训练，那就是体操了。</p>
<h4 id="攀岩"><a href="#攀岩" class="headerlink" title="攀岩"></a>攀岩</h4><p>另一项能直接对柔术的运动表现及其力量提升极大的运动就是攀岩了，尤其是握力。</p>
<h4 id="举重"><a href="#举重" class="headerlink" title="举重"></a>举重</h4><p>举重对运动表现的提升不是通过几组二头弯举或者卧推就可以的，那是健身。你需要在专业教练的指导下练习奥运举和力量举（例如挺举，深蹲）。</p>
<h3 id="你该怎么做"><a href="#你该怎么做" class="headerlink" title="你该怎么做"></a>你该怎么做</h3><p>提高柔术水平不仅仅是提升柔术技术。我喜欢柔术的技术，它是那样的直接有效，令人着迷。如果你想在道垫上降服对手，高质量的动作是必不可少的。但这还不够。你可以在<a href="http://www.jiujitsubrotherhood.com/brazilian-jiu-jitsu-tips-a-c-t-model/" target="_blank" rel="noopener">这篇文章</a>中找到答案。</p>
<p>真正的武术家是一个在各个方面力精益求精的人。这包括变得更加强壮。如果你想成为顶级的柔术家，将你的体能提升到极限是你的必修课。</p>
]]></content>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>为博客添加 Gitalk 评论插件</title>
    <url>/2017/12/19/2017-12-19-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于 <strong>Disqus</strong> 对于国内网路的支持十分糟糕，很多人反映 Disqus 评论插件一直加载不出来。而我一直是处于翻墙状态的~（话说你们做程序员的都不翻墙用Google的吗😅，哈哈，吐嘈下）</p>
<p>针对这个问题，我添加了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a> 评论插件。在此，非常感谢 <a href="https://github.com/FeDemo" target="_blank" rel="noopener">@FeDemo</a> 的推荐 。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Gitalk-评论插件"><a href="#Gitalk-评论插件" class="headerlink" title="Gitalk 评论插件"></a>Gitalk 评论插件</h3><p>首先来看看 Gitalk 的界面和功能：</p>
<p><a href="https://gitalk.github.io/" target="_blank" rel="noopener"><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm4u3j0lmj30nk0kl40i.jpg" alt=""></a></p>
<p>gitalk 使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 <code>MarkDown语法</code>。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 Gitalk 之前还有一个 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a> 插件也是基于这个原理开发的,不过 gitment 已经很久没人维护了。</p>
<p>可以看到在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm5916av1j30i209rab7.jpg" alt="gitalk评论框"></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm596ggkfj30mx0gfjuk.jpg" alt="Github issue"></p>
<h3 id="集成-Gitalk"><a href="#集成-Gitalk" class="headerlink" title="集成 Gitalk"></a>集成 Gitalk</h3><p>到这里，你应该对 Gitalk 有个大致的了解了，现在，开始集成 gitalk 插件吧。</p>
<p>将这段代码插入到你的网站：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- Gitalk 评论 start  --&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> site.gitalk.enable %&#125;</span><br><span class="line">&lt;!-- Link Gitalk 的支持文件  --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/gitalk@latest/dist/gitalk.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"gitalk-container"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gitalk的主要参数</span></span><br><span class="line">		clientID: <span class="string">`Github Application clientID`</span>,</span><br><span class="line">		clientSecret: <span class="string">`Github Application clientSecret`</span>,</span><br><span class="line">		repo: <span class="string">`存储你评论 issue 的 Github 仓库名`</span>,</span><br><span class="line">		owner: <span class="string">'Github 用户名'</span>,</span><br><span class="line">		admin: [<span class="string">'Github 用户名'</span>],</span><br><span class="line">		id: <span class="string">'页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签'</span>,</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">    gitalk.render(<span class="string">'gitalk-container'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&lt;!-- Gitalk end --&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们需要关心的就是配置下面几个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clientID: <span class="string">`Github Application clientID`</span>,</span><br><span class="line">clientSecret: <span class="string">`Github Application clientSecret`</span>,</span><br><span class="line">repo: <span class="string">`Github 仓库名`</span>,<span class="comment">//存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名）</span></span><br><span class="line">owner: <span class="string">'Github 用户名'</span>,</span><br><span class="line">admin: [<span class="string">'Github 用户名'</span>], <span class="comment">//这个仓库的管理员，可以有多个，用数组表示，一般写自己,</span></span><br><span class="line">id: <span class="string">'window.location.pathname'</span>, <span class="comment">//页面的唯一标识，gitalk 会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识</span></span><br></pre></td></tr></table></figure>
<p>当然，还有其他很多参数，有兴趣的话可以 <a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener"> 点这里</a>。</p>
<p>比如我就增加了这个全屏遮罩的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distractionFreeMode: true,</span><br></pre></td></tr></table></figure>

<h3 id="创建-Github-Application"><a href="#创建-Github-Application" class="headerlink" title="创建 Github Application"></a>创建 Github Application</h3><p>Gitalk 需要一个 <strong>Github Application</strong>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a>。</p>
<p>填写下面参数：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jaib6fj30jo0gaacs.jpg" alt=""></p>
<p>点击创建</p>
<p>获取 <code>Client ID</code> 和 <code>Client Secret</code> 填入你的我们 Gitalk 参数中</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jrzff6j30lc0budhp.jpg" alt=""></p>
<p>当你参数都设置好，将代码推送到 Github 仓库后，没什么问题的话，当你点击进入你的博客页面后就会出现评论框了。</p>
<p>当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 <code>repo</code> 的仓库下创建对应 issue。</p>
<p>比如说这样：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmm867n88cj30l809mjse.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm8a0i0jkj30rr0ct42t.jpg" alt=""></p>
<p>当然，你也可以手动创建issue作为 gitalk评论容器。只要有 <code>Gitalk</code> 标签 和 <code>id</code> 对应标签就可以。比我我自己创建的 <a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/38" target="_blank" rel="noopener">About issue</a> 。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后说几句吐嘈几句， Gitalk 需要你点开每篇文章的页面才会创建对应的 issue,对我来说真是个糟糕的体验（文章有点多~）。</p>
<p>当然，也有解决办法，这篇 <a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a>，就解决了这个问题。</p>
<p>最后，<a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">给个 star 吧</a>~</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
